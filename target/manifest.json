{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v8.json", "dbt_version": "1.4.5", "generated_at": "2023-07-09T23:21:21.425647Z", "invocation_id": "05f80841-08b5-4e03-90e2-dc599e11a922", "env": {}, "project_id": "3c2f5decde47940c8baf3b80dea449bd", "user_id": "f119f5d8-1d85-46de-ae7e-8ee145ef8975", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"test.csp.sampletest": {"database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "sampletest", "resource_type": "test", "package_name": "csp", "path": "sampletest.sql", "original_file_path": "tests/sampletest.sql", "unique_id": "test.csp.sampletest", "fqn": ["csp", "sampletest"], "alias": "sampletest", "checksum": {"name": "sha256", "checksum": "a0417dffd2b282e48108af18e328b4e3cad2455d3a08ff55ffdf99f5e34b1d5a"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688944882.046836, "relation_name": null, "raw_code": "select 1 from dmn01-rsksoi-bld-01-2017.dmn01_rsksoi_euwe2_rsk_csp_downstream_raw.rskcsp_ds_account_copy\nwhere length(AccountNumber)<=0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/csp/tests/sampletest.sql", "compiled": true, "compiled_code": "select 1 from dmn01-rsksoi-bld-01-2017.dmn01_rsksoi_euwe2_rsk_csp_downstream_raw.rskcsp_ds_account_copy\nwhere length(AccountNumber)<=0", "extra_ctes_injected": true, "extra_ctes": []}, "test.csp.cardholdertest": {"database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "cardholdertest", "resource_type": "test", "package_name": "csp", "path": "Limits/cardholdertest.sql", "original_file_path": "tests/Limits/cardholdertest.sql", "unique_id": "test.csp.cardholdertest", "fqn": ["csp", "Limits", "cardholdertest"], "alias": "cardholdertest", "checksum": {"name": "sha256", "checksum": "4c44b2a6922d0c398ccb7841fd07b391013c802a8427868acf88270b745572b1"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688944882.05219, "relation_name": null, "raw_code": "select id from {{source('curated','rskcsp_ds_cardholder_curated')}}\nwhere length(id) > 18", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_cardholder_curated"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.csp.curated.rskcsp_ds_cardholder_curated"]}, "compiled_path": "target/compiled/csp/tests/Limits/cardholdertest.sql", "compiled": true, "compiled_code": "select id from `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_cardholder_curated`\nwhere length(id) > 18", "extra_ctes_injected": true, "extra_ctes": []}, "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Email__c__80.48c668962f": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 80, "column_name": "CCS_Email__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_cardholder_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Email__c__80", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_c7133fae98e4da7e9afc1a339b321bb4.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Email__c__80.48c668962f", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Email__c__80"], "alias": "source_length_check_curated_rs_c7133fae98e4da7e9afc1a339b321bb4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_c7133fae98e4da7e9afc1a339b321bb4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_c7133fae98e4da7e9afc1a339b321bb4"}, "created_at": 1688944882.111883, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_c7133fae98e4da7e9afc1a339b321bb4\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_cardholder_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_cardholder_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_c7133fae98e4da7e9afc1a339b321bb4.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_cardholder_curated`\nWHERE\n  LENGTH(CCS_Email__c) > 80\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Email__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Email__c__String.4383285e09": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Email__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_cardholder_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Email__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_926e0b8995dbeba58e59ebae0a81a6cc.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Email__c__String.4383285e09", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Email__c__String"], "alias": "dbt_expectations_source_expect_926e0b8995dbeba58e59ebae0a81a6cc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_926e0b8995dbeba58e59ebae0a81a6cc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_926e0b8995dbeba58e59ebae0a81a6cc"}, "created_at": 1688944882.115598, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_926e0b8995dbeba58e59ebae0a81a6cc\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_cardholder_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_cardholder_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_926e0b8995dbeba58e59ebae0a81a6cc.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_FACILITY_ID__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_COUNTRY_CODE__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_DATE_OF_BIRTH__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_EMAIL__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_FIRST_NAME__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_IS_CARD_NEEDED__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LAST_NAME__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LEVEL_OF_CONTROL__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LIMIT__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_MOBILE_NUMBER__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_NUMBER_OF_CARDS__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_TITLE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_EMAIL__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Email__c", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_cardholder_curated_CCS_Facility_ID__c.93b5c8f1c6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CCS_Facility_ID__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_cardholder_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_cardholder_curated_CCS_Facility_ID__c", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_60135d9d2906e5f0ce4c28e0804b1831.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_cardholder_curated_CCS_Facility_ID__c.93b5c8f1c6", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_cardholder_curated_CCS_Facility_ID__c"], "alias": "source_not_null_curated_rskcsp_60135d9d2906e5f0ce4c28e0804b1831", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_60135d9d2906e5f0ce4c28e0804b1831", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_60135d9d2906e5f0ce4c28e0804b1831"}, "created_at": 1688944882.11978, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_60135d9d2906e5f0ce4c28e0804b1831\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_cardholder_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_cardholder_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_60135d9d2906e5f0ce4c28e0804b1831.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CCS_Facility_ID__c\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_cardholder_curated`\nwhere CCS_Facility_ID__c is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Facility_ID__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Facility_ID__c__18.975a514e01": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "CCS_Facility_ID__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_cardholder_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Facility_ID__c__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_c75a65af7a578aa159dcc4b47bf9cb0a.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Facility_ID__c__18.975a514e01", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Facility_ID__c__18"], "alias": "source_length_check_curated_rs_c75a65af7a578aa159dcc4b47bf9cb0a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_c75a65af7a578aa159dcc4b47bf9cb0a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_c75a65af7a578aa159dcc4b47bf9cb0a"}, "created_at": 1688944882.120564, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_c75a65af7a578aa159dcc4b47bf9cb0a\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_cardholder_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_cardholder_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_c75a65af7a578aa159dcc4b47bf9cb0a.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_cardholder_curated`\nWHERE\n  LENGTH(CCS_Facility_ID__c) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Facility_ID__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Facility_ID__c__String.d250c7f57d": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Facility_ID__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_cardholder_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Facility_ID__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_a41634a65a4cf064f2a037d41a61aa70.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Facility_ID__c__String.d250c7f57d", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Facility_ID__c__String"], "alias": "dbt_expectations_source_expect_a41634a65a4cf064f2a037d41a61aa70", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_a41634a65a4cf064f2a037d41a61aa70", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_a41634a65a4cf064f2a037d41a61aa70"}, "created_at": 1688944882.122725, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_a41634a65a4cf064f2a037d41a61aa70\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_cardholder_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_cardholder_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_a41634a65a4cf064f2a037d41a61aa70.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_FACILITY_ID__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_COUNTRY_CODE__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_DATE_OF_BIRTH__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_EMAIL__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_FIRST_NAME__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_IS_CARD_NEEDED__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LAST_NAME__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LEVEL_OF_CONTROL__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LIMIT__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_MOBILE_NUMBER__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_NUMBER_OF_CARDS__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_TITLE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_FACILITY_ID__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Facility_ID__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_First_Name__c__255.b70ed6ec5c": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_First_Name__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_cardholder_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_First_Name__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_398714103be9ece13071f79bd0c99a34.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_First_Name__c__255.b70ed6ec5c", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_First_Name__c__255"], "alias": "source_length_check_curated_rs_398714103be9ece13071f79bd0c99a34", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_398714103be9ece13071f79bd0c99a34", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_398714103be9ece13071f79bd0c99a34"}, "created_at": 1688944882.124581, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_398714103be9ece13071f79bd0c99a34\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_cardholder_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_cardholder_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_398714103be9ece13071f79bd0c99a34.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_cardholder_curated`\nWHERE\n  LENGTH(CCS_First_Name__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_First_Name__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_First_Name__c__String.e0e09baba0": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_First_Name__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_cardholder_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_First_Name__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_78881faee23a4e94429bc7d696d98561.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_First_Name__c__String.e0e09baba0", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_First_Name__c__String"], "alias": "dbt_expectations_source_expect_78881faee23a4e94429bc7d696d98561", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_78881faee23a4e94429bc7d696d98561", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_78881faee23a4e94429bc7d696d98561"}, "created_at": 1688944882.17099, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_78881faee23a4e94429bc7d696d98561\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_cardholder_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_cardholder_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_78881faee23a4e94429bc7d696d98561.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_FACILITY_ID__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_COUNTRY_CODE__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_DATE_OF_BIRTH__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_EMAIL__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_FIRST_NAME__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_IS_CARD_NEEDED__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LAST_NAME__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LEVEL_OF_CONTROL__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LIMIT__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_MOBILE_NUMBER__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_NUMBER_OF_CARDS__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_TITLE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_FIRST_NAME__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_First_Name__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Is_Card_Needed__c__255.2836e217e0": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Is_Card_Needed__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_cardholder_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Is_Card_Needed__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_425eb5cc3bba1ef9646894ce49c081d8.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Is_Card_Needed__c__255.2836e217e0", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Is_Card_Needed__c__255"], "alias": "source_length_check_curated_rs_425eb5cc3bba1ef9646894ce49c081d8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_425eb5cc3bba1ef9646894ce49c081d8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_425eb5cc3bba1ef9646894ce49c081d8"}, "created_at": 1688944882.172995, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_425eb5cc3bba1ef9646894ce49c081d8\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_cardholder_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_cardholder_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_425eb5cc3bba1ef9646894ce49c081d8.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_cardholder_curated`\nWHERE\n  LENGTH(CCS_Is_Card_Needed__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Is_Card_Needed__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Is_Card_Needed__c__String.7f72683ffb": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Is_Card_Needed__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_cardholder_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Is_Card_Needed__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_8b2ad824f4265b02f6c39943caed4062.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Is_Card_Needed__c__String.7f72683ffb", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Is_Card_Needed__c__String"], "alias": "dbt_expectations_source_expect_8b2ad824f4265b02f6c39943caed4062", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_8b2ad824f4265b02f6c39943caed4062", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_8b2ad824f4265b02f6c39943caed4062"}, "created_at": 1688944882.174757, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_8b2ad824f4265b02f6c39943caed4062\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_cardholder_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_cardholder_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_8b2ad824f4265b02f6c39943caed4062.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_FACILITY_ID__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_COUNTRY_CODE__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_DATE_OF_BIRTH__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_EMAIL__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_FIRST_NAME__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_IS_CARD_NEEDED__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LAST_NAME__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LEVEL_OF_CONTROL__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LIMIT__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_MOBILE_NUMBER__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_NUMBER_OF_CARDS__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_TITLE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_IS_CARD_NEEDED__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Is_Card_Needed__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Last_Name__c__255.4b67642f28": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Last_Name__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_cardholder_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Last_Name__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_3738021a667bde2f72cfb059ec636e02.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Last_Name__c__255.4b67642f28", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Last_Name__c__255"], "alias": "source_length_check_curated_rs_3738021a667bde2f72cfb059ec636e02", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_3738021a667bde2f72cfb059ec636e02", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_3738021a667bde2f72cfb059ec636e02"}, "created_at": 1688944882.176605, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_3738021a667bde2f72cfb059ec636e02\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_cardholder_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_cardholder_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_3738021a667bde2f72cfb059ec636e02.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_cardholder_curated`\nWHERE\n  LENGTH(CCS_Last_Name__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Last_Name__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Last_Name__c__String.8cdce274c7": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Last_Name__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_cardholder_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Last_Name__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_aaa1219a4600433213de7b823bd04ee6.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Last_Name__c__String.8cdce274c7", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Last_Name__c__String"], "alias": "dbt_expectations_source_expect_aaa1219a4600433213de7b823bd04ee6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_aaa1219a4600433213de7b823bd04ee6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_aaa1219a4600433213de7b823bd04ee6"}, "created_at": 1688944882.1783712, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_aaa1219a4600433213de7b823bd04ee6\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_cardholder_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_cardholder_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_aaa1219a4600433213de7b823bd04ee6.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_FACILITY_ID__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_COUNTRY_CODE__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_DATE_OF_BIRTH__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_EMAIL__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_FIRST_NAME__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_IS_CARD_NEEDED__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LAST_NAME__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LEVEL_OF_CONTROL__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LIMIT__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_MOBILE_NUMBER__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_NUMBER_OF_CARDS__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_TITLE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_LAST_NAME__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Last_Name__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Level_of_Control__c__255.cf76a1ee91": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Level_of_Control__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_cardholder_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Level_of_Control__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_06e5176195905c152b3792b4c50ef012.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Level_of_Control__c__255.cf76a1ee91", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Level_of_Control__c__255"], "alias": "source_length_check_curated_rs_06e5176195905c152b3792b4c50ef012", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_06e5176195905c152b3792b4c50ef012", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_06e5176195905c152b3792b4c50ef012"}, "created_at": 1688944882.1803021, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_06e5176195905c152b3792b4c50ef012\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_cardholder_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_cardholder_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_06e5176195905c152b3792b4c50ef012.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_cardholder_curated`\nWHERE\n  LENGTH(CCS_Level_of_Control__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Level_of_Control__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Level_of_Control__c__String.229bf943dd": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Level_of_Control__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_cardholder_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Level_of_Control__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_f3a9cb8641ec6a5fb67c4aa3868e9c1c.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Level_of_Control__c__String.229bf943dd", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Level_of_Control__c__String"], "alias": "dbt_expectations_source_expect_f3a9cb8641ec6a5fb67c4aa3868e9c1c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_f3a9cb8641ec6a5fb67c4aa3868e9c1c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_f3a9cb8641ec6a5fb67c4aa3868e9c1c"}, "created_at": 1688944882.181924, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_f3a9cb8641ec6a5fb67c4aa3868e9c1c\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_cardholder_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_cardholder_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_f3a9cb8641ec6a5fb67c4aa3868e9c1c.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_FACILITY_ID__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_COUNTRY_CODE__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_DATE_OF_BIRTH__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_EMAIL__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_FIRST_NAME__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_IS_CARD_NEEDED__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LAST_NAME__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LEVEL_OF_CONTROL__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LIMIT__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_MOBILE_NUMBER__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_NUMBER_OF_CARDS__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_TITLE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_LEVEL_OF_CONTROL__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Level_of_Control__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Mobile_Number__c__40.371229c6c9": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 40, "column_name": "CCS_Mobile_Number__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_cardholder_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Mobile_Number__c__40", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_6a383430303189b95e92fcc7a025a213.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Mobile_Number__c__40.371229c6c9", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Mobile_Number__c__40"], "alias": "source_length_check_curated_rs_6a383430303189b95e92fcc7a025a213", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_6a383430303189b95e92fcc7a025a213", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_6a383430303189b95e92fcc7a025a213"}, "created_at": 1688944882.183861, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_6a383430303189b95e92fcc7a025a213\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_cardholder_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_cardholder_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_6a383430303189b95e92fcc7a025a213.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_cardholder_curated`\nWHERE\n  LENGTH(CCS_Mobile_Number__c) > 40\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Mobile_Number__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Mobile_Number__c__String.981e790b85": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Mobile_Number__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_cardholder_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Mobile_Number__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_7fc584aa93cc69625aefb1c435bfdee2.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Mobile_Number__c__String.981e790b85", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Mobile_Number__c__String"], "alias": "dbt_expectations_source_expect_7fc584aa93cc69625aefb1c435bfdee2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_7fc584aa93cc69625aefb1c435bfdee2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_7fc584aa93cc69625aefb1c435bfdee2"}, "created_at": 1688944882.185465, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_7fc584aa93cc69625aefb1c435bfdee2\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_cardholder_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_cardholder_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_7fc584aa93cc69625aefb1c435bfdee2.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_FACILITY_ID__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_COUNTRY_CODE__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_DATE_OF_BIRTH__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_EMAIL__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_FIRST_NAME__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_IS_CARD_NEEDED__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LAST_NAME__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LEVEL_OF_CONTROL__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LIMIT__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_MOBILE_NUMBER__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_NUMBER_OF_CARDS__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_TITLE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_MOBILE_NUMBER__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Mobile_Number__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Title__c__255.f5e3caa7fe": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Title__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_cardholder_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Title__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_5f8eb681512ecf78d8359034d096dedc.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Title__c__255.f5e3caa7fe", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Title__c__255"], "alias": "source_length_check_curated_rs_5f8eb681512ecf78d8359034d096dedc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_5f8eb681512ecf78d8359034d096dedc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_5f8eb681512ecf78d8359034d096dedc"}, "created_at": 1688944882.187405, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_5f8eb681512ecf78d8359034d096dedc\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_cardholder_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_cardholder_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_5f8eb681512ecf78d8359034d096dedc.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_cardholder_curated`\nWHERE\n  LENGTH(CCS_Title__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Title__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Title__c__String.93d1b7980b": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Title__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_cardholder_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Title__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_6fde3c29948d946275e86f937964b4af.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Title__c__String.93d1b7980b", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Title__c__String"], "alias": "dbt_expectations_source_expect_6fde3c29948d946275e86f937964b4af", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_6fde3c29948d946275e86f937964b4af", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_6fde3c29948d946275e86f937964b4af"}, "created_at": 1688944882.189155, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_6fde3c29948d946275e86f937964b4af\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_cardholder_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_cardholder_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_6fde3c29948d946275e86f937964b4af.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_FACILITY_ID__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_COUNTRY_CODE__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_DATE_OF_BIRTH__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_EMAIL__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_FIRST_NAME__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_IS_CARD_NEEDED__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LAST_NAME__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LEVEL_OF_CONTROL__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LIMIT__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_MOBILE_NUMBER__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_NUMBER_OF_CARDS__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_TITLE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_TITLE__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Title__c", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_cardholder_curated_CreatedById.11104cbeb1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CreatedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_cardholder_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_cardholder_curated_CreatedById", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_7af48a66dc75520af562b12986aba570.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_cardholder_curated_CreatedById.11104cbeb1", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_cardholder_curated_CreatedById"], "alias": "source_not_null_curated_rskcsp_7af48a66dc75520af562b12986aba570", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_7af48a66dc75520af562b12986aba570", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_7af48a66dc75520af562b12986aba570"}, "created_at": 1688944882.19111, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_7af48a66dc75520af562b12986aba570\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_cardholder_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_cardholder_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_7af48a66dc75520af562b12986aba570.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CreatedById\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_cardholder_curated`\nwhere CreatedById is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CreatedById", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CreatedById__18.41a5de79d4": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "CreatedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_cardholder_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_cardholder_curated_CreatedById__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_6bac510c7bdf0c174fdad840f828457c.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CreatedById__18.41a5de79d4", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_cardholder_curated_CreatedById__18"], "alias": "source_length_check_curated_rs_6bac510c7bdf0c174fdad840f828457c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_6bac510c7bdf0c174fdad840f828457c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_6bac510c7bdf0c174fdad840f828457c"}, "created_at": 1688944882.191873, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_6bac510c7bdf0c174fdad840f828457c\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_cardholder_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_cardholder_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_6bac510c7bdf0c174fdad840f828457c.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_cardholder_curated`\nWHERE\n  LENGTH(CreatedById) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CreatedById", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CreatedById__String.75d4c9f264": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CreatedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_cardholder_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CreatedById__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_519b5d1f7da100d23920dc7f34cfb201.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CreatedById__String.75d4c9f264", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CreatedById__String"], "alias": "dbt_expectations_source_expect_519b5d1f7da100d23920dc7f34cfb201", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_519b5d1f7da100d23920dc7f34cfb201", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_519b5d1f7da100d23920dc7f34cfb201"}, "created_at": 1688944882.1934981, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_519b5d1f7da100d23920dc7f34cfb201\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_cardholder_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_cardholder_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_519b5d1f7da100d23920dc7f34cfb201.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_FACILITY_ID__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_COUNTRY_CODE__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_DATE_OF_BIRTH__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_EMAIL__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_FIRST_NAME__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_IS_CARD_NEEDED__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LAST_NAME__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LEVEL_OF_CONTROL__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LIMIT__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_MOBILE_NUMBER__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_NUMBER_OF_CARDS__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_TITLE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CREATEDBYID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CreatedById", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_cardholder_curated_CreatedDate.cd39601b66": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CreatedDate", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_cardholder_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_cardholder_curated_CreatedDate", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_29b5617aa1d928998acec635075c5408.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_cardholder_curated_CreatedDate.cd39601b66", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_cardholder_curated_CreatedDate"], "alias": "source_not_null_curated_rskcsp_29b5617aa1d928998acec635075c5408", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_29b5617aa1d928998acec635075c5408", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_29b5617aa1d928998acec635075c5408"}, "created_at": 1688944882.195443, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_29b5617aa1d928998acec635075c5408\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_cardholder_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_cardholder_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_29b5617aa1d928998acec635075c5408.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CreatedDate\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_cardholder_curated`\nwhere CreatedDate is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CreatedDate", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CurrencyIsoCode__3.c3b3077d33": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 3, "column_name": "CurrencyIsoCode", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_cardholder_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_cardholder_curated_CurrencyIsoCode__3", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_307990799052860e65adab6631967212.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CurrencyIsoCode__3.c3b3077d33", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_cardholder_curated_CurrencyIsoCode__3"], "alias": "source_length_check_curated_rs_307990799052860e65adab6631967212", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_307990799052860e65adab6631967212", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_307990799052860e65adab6631967212"}, "created_at": 1688944882.196197, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_307990799052860e65adab6631967212\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_cardholder_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_cardholder_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_307990799052860e65adab6631967212.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_cardholder_curated`\nWHERE\n  LENGTH(CurrencyIsoCode) > 3\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CurrencyIsoCode", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CurrencyIsoCode__String.2b12d5d003": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CurrencyIsoCode", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_cardholder_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CurrencyIsoCode__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_5c57537c4cacd84b459269da75e71d7e.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CurrencyIsoCode__String.2b12d5d003", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CurrencyIsoCode__String"], "alias": "dbt_expectations_source_expect_5c57537c4cacd84b459269da75e71d7e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_5c57537c4cacd84b459269da75e71d7e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_5c57537c4cacd84b459269da75e71d7e"}, "created_at": 1688944882.19796, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_5c57537c4cacd84b459269da75e71d7e\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_cardholder_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_cardholder_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_5c57537c4cacd84b459269da75e71d7e.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_FACILITY_ID__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_COUNTRY_CODE__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_DATE_OF_BIRTH__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_EMAIL__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_FIRST_NAME__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_IS_CARD_NEEDED__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LAST_NAME__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LEVEL_OF_CONTROL__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LIMIT__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_MOBILE_NUMBER__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_NUMBER_OF_CARDS__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_TITLE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CURRENCYISOCODE'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CurrencyIsoCode", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_cardholder_curated_Id.8058ab6385": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "Id", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_cardholder_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_cardholder_curated_Id", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_ds_cardholder_curated_Id.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_cardholder_curated_Id.8058ab6385", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_cardholder_curated_Id"], "alias": "source_not_null_curated_rskcsp_ds_cardholder_curated_Id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688944882.199876, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_cardholder_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_cardholder_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_ds_cardholder_curated_Id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect Id\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_cardholder_curated`\nwhere Id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Id", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_Id__18.b5049735d3": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "Id", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_cardholder_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_cardholder_curated_Id__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rskcsp_ds_cardholder_curated_Id__18.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_Id__18.b5049735d3", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_cardholder_curated_Id__18"], "alias": "source_length_check_curated_rskcsp_ds_cardholder_curated_Id__18", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688944882.200636, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_cardholder_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_cardholder_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rskcsp_ds_cardholder_curated_Id__18.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_cardholder_curated`\nWHERE\n  LENGTH(Id) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Id", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_Id__String.78a8d212e0": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "Id", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_cardholder_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_Id__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_f4dae7f60267aa08cd990c0c6ada775d.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_Id__String.78a8d212e0", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_Id__String"], "alias": "dbt_expectations_source_expect_f4dae7f60267aa08cd990c0c6ada775d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_f4dae7f60267aa08cd990c0c6ada775d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_f4dae7f60267aa08cd990c0c6ada775d"}, "created_at": 1688944882.202125, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_f4dae7f60267aa08cd990c0c6ada775d\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_cardholder_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_cardholder_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_f4dae7f60267aa08cd990c0c6ada775d.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_FACILITY_ID__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_COUNTRY_CODE__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_DATE_OF_BIRTH__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_EMAIL__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_FIRST_NAME__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_IS_CARD_NEEDED__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LAST_NAME__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LEVEL_OF_CONTROL__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LIMIT__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_MOBILE_NUMBER__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_NUMBER_OF_CARDS__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_TITLE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Id", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_cardholder_curated_LastModifiedById.b9ad66c0fb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LastModifiedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_cardholder_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_cardholder_curated_LastModifiedById", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_813629b1b221a37275e73d3a19cdb205.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_cardholder_curated_LastModifiedById.b9ad66c0fb", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_cardholder_curated_LastModifiedById"], "alias": "source_not_null_curated_rskcsp_813629b1b221a37275e73d3a19cdb205", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_813629b1b221a37275e73d3a19cdb205", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_813629b1b221a37275e73d3a19cdb205"}, "created_at": 1688944882.204318, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_813629b1b221a37275e73d3a19cdb205\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_cardholder_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_cardholder_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_813629b1b221a37275e73d3a19cdb205.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect LastModifiedById\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_cardholder_curated`\nwhere LastModifiedById is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LastModifiedById", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_LastModifiedById__18.9ae03035f1": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "LastModifiedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_cardholder_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_cardholder_curated_LastModifiedById__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_3eb07c11102021184bc87de7a9eb1d4f.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_LastModifiedById__18.9ae03035f1", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_cardholder_curated_LastModifiedById__18"], "alias": "source_length_check_curated_rs_3eb07c11102021184bc87de7a9eb1d4f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_3eb07c11102021184bc87de7a9eb1d4f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_3eb07c11102021184bc87de7a9eb1d4f"}, "created_at": 1688944882.205069, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_3eb07c11102021184bc87de7a9eb1d4f\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_cardholder_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_cardholder_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_3eb07c11102021184bc87de7a9eb1d4f.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_cardholder_curated`\nWHERE\n  LENGTH(LastModifiedById) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LastModifiedById", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_LastModifiedById__String.feca5019bf": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LastModifiedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_cardholder_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_LastModifiedById__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_02e06dc2091c1749c4e9274410e6be9f.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_LastModifiedById__String.feca5019bf", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_LastModifiedById__String"], "alias": "dbt_expectations_source_expect_02e06dc2091c1749c4e9274410e6be9f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_02e06dc2091c1749c4e9274410e6be9f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_02e06dc2091c1749c4e9274410e6be9f"}, "created_at": 1688944882.206812, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_02e06dc2091c1749c4e9274410e6be9f\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_cardholder_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_cardholder_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_02e06dc2091c1749c4e9274410e6be9f.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_FACILITY_ID__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_COUNTRY_CODE__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_DATE_OF_BIRTH__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_EMAIL__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_FIRST_NAME__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_IS_CARD_NEEDED__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LAST_NAME__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LEVEL_OF_CONTROL__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LIMIT__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_MOBILE_NUMBER__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_NUMBER_OF_CARDS__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_TITLE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LASTMODIFIEDBYID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LastModifiedById", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_cardholder_curated_LastModifiedDate.6aed7f5098": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LastModifiedDate", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_cardholder_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_cardholder_curated_LastModifiedDate", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_ed0b89ba8bb1f4e574b638956903d3b4.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_cardholder_curated_LastModifiedDate.6aed7f5098", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_cardholder_curated_LastModifiedDate"], "alias": "source_not_null_curated_rskcsp_ed0b89ba8bb1f4e574b638956903d3b4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_ed0b89ba8bb1f4e574b638956903d3b4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_ed0b89ba8bb1f4e574b638956903d3b4"}, "created_at": 1688944882.208721, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_ed0b89ba8bb1f4e574b638956903d3b4\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_cardholder_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_cardholder_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_ed0b89ba8bb1f4e574b638956903d3b4.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect LastModifiedDate\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_cardholder_curated`\nwhere LastModifiedDate is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LastModifiedDate", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_cardholder_curated_Name.b60c864c33": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "Name", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_cardholder_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_cardholder_curated_Name", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_ds_cardholder_curated_Name.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_cardholder_curated_Name.b60c864c33", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_cardholder_curated_Name"], "alias": "source_not_null_curated_rskcsp_ds_cardholder_curated_Name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688944882.209472, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_cardholder_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_cardholder_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_ds_cardholder_curated_Name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect Name\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_cardholder_curated`\nwhere Name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Name", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_Name__80.c6237921f6": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 80, "column_name": "Name", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_cardholder_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_cardholder_curated_Name__80", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_3513add993b4b50dd2920fb895617b18.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_Name__80.c6237921f6", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_cardholder_curated_Name__80"], "alias": "source_length_check_curated_rs_3513add993b4b50dd2920fb895617b18", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_3513add993b4b50dd2920fb895617b18", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_3513add993b4b50dd2920fb895617b18"}, "created_at": 1688944882.210212, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_3513add993b4b50dd2920fb895617b18\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_cardholder_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_cardholder_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_3513add993b4b50dd2920fb895617b18.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_cardholder_curated`\nWHERE\n  LENGTH(Name) > 80\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Name", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_Name__String.0fe179ecb6": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "Name", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_cardholder_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_Name__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_05528b0feb70a1b6dd2d8afce18845c6.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_Name__String.0fe179ecb6", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_Name__String"], "alias": "dbt_expectations_source_expect_05528b0feb70a1b6dd2d8afce18845c6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_05528b0feb70a1b6dd2d8afce18845c6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_05528b0feb70a1b6dd2d8afce18845c6"}, "created_at": 1688944882.211958, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_05528b0feb70a1b6dd2d8afce18845c6\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_cardholder_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_cardholder_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_05528b0feb70a1b6dd2d8afce18845c6.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_FACILITY_ID__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_COUNTRY_CODE__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_DATE_OF_BIRTH__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_EMAIL__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_FIRST_NAME__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_IS_CARD_NEEDED__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LAST_NAME__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LEVEL_OF_CONTROL__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LIMIT__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_MOBILE_NUMBER__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_NUMBER_OF_CARDS__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_TITLE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'NAME'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Name", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_limit_curated_CCS_Facility__c.f96725e6fa": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CCS_Facility__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_limit_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_limit_curated_CCS_Facility__c", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_ds_limit_curated_CCS_Facility__c.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_limit_curated_CCS_Facility__c.f96725e6fa", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_limit_curated_CCS_Facility__c"], "alias": "source_not_null_curated_rskcsp_ds_limit_curated_CCS_Facility__c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688944882.213988, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_limit_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_limit_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_ds_limit_curated_CCS_Facility__c.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CCS_Facility__c\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_limit_curated`\nwhere CCS_Facility__c is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Facility__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_limit_curated_CCS_Facility__c__18.ed8b173071": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "CCS_Facility__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_limit_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_limit_curated_CCS_Facility__c__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_d3c09b8accf8f0c561bef2ff5e4af758.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_limit_curated_CCS_Facility__c__18.ed8b173071", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_limit_curated_CCS_Facility__c__18"], "alias": "source_length_check_curated_rs_d3c09b8accf8f0c561bef2ff5e4af758", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_d3c09b8accf8f0c561bef2ff5e4af758", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_d3c09b8accf8f0c561bef2ff5e4af758"}, "created_at": 1688944882.214873, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_d3c09b8accf8f0c561bef2ff5e4af758\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_limit_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_limit_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_d3c09b8accf8f0c561bef2ff5e4af758.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_limit_curated`\nWHERE\n  LENGTH(CCS_Facility__c) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Facility__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_CCS_Facility__c__String.12b7433887": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Facility__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_limit_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_CCS_Facility__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_de8d562de7fbd1f4390d5a4d3a2cddf4.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_CCS_Facility__c__String.12b7433887", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_CCS_Facility__c__String"], "alias": "dbt_expectations_source_expect_de8d562de7fbd1f4390d5a4d3a2cddf4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_de8d562de7fbd1f4390d5a4d3a2cddf4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_de8d562de7fbd1f4390d5a4d3a2cddf4"}, "created_at": 1688944882.216511, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_de8d562de7fbd1f4390d5a4d3a2cddf4\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_limit_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_limit_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_de8d562de7fbd1f4390d5a4d3a2cddf4.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_FACILITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_AMOUNT__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_EXPIRY_DATE__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_IS_THIS_A_TEMPORARY_AMENDMENT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_START_DATE__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_CURRENT_LIMIT__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_PROPOSED_LIMIT__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_TENOR__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_UTILISATION__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_FACILITY__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Facility__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_limit_curated_CCS_Is_this_a_Temporary_Amendment__c__255.f76d2ae503": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Is_this_a_Temporary_Amendment__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_limit_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_limit_curated_CCS_Is_this_a_Temporary_Amendment__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_87817af6cef9a63b00ee60c034242a7d.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_limit_curated_CCS_Is_this_a_Temporary_Amendment__c__255.f76d2ae503", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_limit_curated_CCS_Is_this_a_Temporary_Amendment__c__255"], "alias": "source_length_check_curated_rs_87817af6cef9a63b00ee60c034242a7d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_87817af6cef9a63b00ee60c034242a7d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_87817af6cef9a63b00ee60c034242a7d"}, "created_at": 1688944882.218459, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_87817af6cef9a63b00ee60c034242a7d\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_limit_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_limit_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_87817af6cef9a63b00ee60c034242a7d.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_limit_curated`\nWHERE\n  LENGTH(CCS_Is_this_a_Temporary_Amendment__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Is_this_a_Temporary_Amendment__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_CCS_Is_this_a_Temporary_Amendment__c__String.b93ecc04f5": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Is_this_a_Temporary_Amendment__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_limit_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_CCS_Is_this_a_Temporary_Amendment__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_d562ac8c6eb96299c9139baba48ebe6d.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_CCS_Is_this_a_Temporary_Amendment__c__String.b93ecc04f5", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_CCS_Is_this_a_Temporary_Amendment__c__String"], "alias": "dbt_expectations_source_expect_d562ac8c6eb96299c9139baba48ebe6d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_d562ac8c6eb96299c9139baba48ebe6d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_d562ac8c6eb96299c9139baba48ebe6d"}, "created_at": 1688944882.220072, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_d562ac8c6eb96299c9139baba48ebe6d\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_limit_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_limit_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_d562ac8c6eb96299c9139baba48ebe6d.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_FACILITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_AMOUNT__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_EXPIRY_DATE__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_IS_THIS_A_TEMPORARY_AMENDMENT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_START_DATE__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_CURRENT_LIMIT__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_PROPOSED_LIMIT__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_TENOR__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_UTILISATION__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_IS_THIS_A_TEMPORARY_AMENDMENT__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Is_this_a_Temporary_Amendment__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_limit_curated_CCS_Tenor__c__30.2e148aff69": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 30, "column_name": "CCS_Tenor__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_limit_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_limit_curated_CCS_Tenor__c__30", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_14ff1c1746bb723e3d60a79aefd60c10.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_limit_curated_CCS_Tenor__c__30.2e148aff69", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_limit_curated_CCS_Tenor__c__30"], "alias": "source_length_check_curated_rs_14ff1c1746bb723e3d60a79aefd60c10", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_14ff1c1746bb723e3d60a79aefd60c10", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_14ff1c1746bb723e3d60a79aefd60c10"}, "created_at": 1688944882.222017, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_14ff1c1746bb723e3d60a79aefd60c10\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_limit_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_limit_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_14ff1c1746bb723e3d60a79aefd60c10.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_limit_curated`\nWHERE\n  LENGTH(CCS_Tenor__c) > 30\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Tenor__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_CCS_Tenor__c__String.e2ccc850bd": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Tenor__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_limit_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_CCS_Tenor__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_30561d0c4a6094ae27814113f41abe3b.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_CCS_Tenor__c__String.e2ccc850bd", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_CCS_Tenor__c__String"], "alias": "dbt_expectations_source_expect_30561d0c4a6094ae27814113f41abe3b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_30561d0c4a6094ae27814113f41abe3b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_30561d0c4a6094ae27814113f41abe3b"}, "created_at": 1688944882.2237408, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_30561d0c4a6094ae27814113f41abe3b\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_limit_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_limit_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_30561d0c4a6094ae27814113f41abe3b.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_FACILITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_AMOUNT__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_EXPIRY_DATE__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_IS_THIS_A_TEMPORARY_AMENDMENT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_START_DATE__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_CURRENT_LIMIT__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_PROPOSED_LIMIT__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_TENOR__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_UTILISATION__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_TENOR__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Tenor__c", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_limit_curated_CreatedById.492bab4edb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CreatedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_limit_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_limit_curated_CreatedById", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_ds_limit_curated_CreatedById.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_limit_curated_CreatedById.492bab4edb", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_limit_curated_CreatedById"], "alias": "source_not_null_curated_rskcsp_ds_limit_curated_CreatedById", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688944882.2255518, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_limit_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_limit_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_ds_limit_curated_CreatedById.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CreatedById\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_limit_curated`\nwhere CreatedById is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CreatedById", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_limit_curated_CreatedById__18.9fa460032a": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "CreatedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_limit_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_limit_curated_CreatedById__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_d8ec71a7c7aa7d07586681e11ffece40.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_limit_curated_CreatedById__18.9fa460032a", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_limit_curated_CreatedById__18"], "alias": "source_length_check_curated_rs_d8ec71a7c7aa7d07586681e11ffece40", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_d8ec71a7c7aa7d07586681e11ffece40", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_d8ec71a7c7aa7d07586681e11ffece40"}, "created_at": 1688944882.226469, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_d8ec71a7c7aa7d07586681e11ffece40\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_limit_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_limit_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_d8ec71a7c7aa7d07586681e11ffece40.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_limit_curated`\nWHERE\n  LENGTH(CreatedById) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CreatedById", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_CreatedById__String.1e81e459da": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CreatedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_limit_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_CreatedById__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_489271a74ffbf6b8026cecd0e37ca2bb.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_CreatedById__String.1e81e459da", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_CreatedById__String"], "alias": "dbt_expectations_source_expect_489271a74ffbf6b8026cecd0e37ca2bb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_489271a74ffbf6b8026cecd0e37ca2bb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_489271a74ffbf6b8026cecd0e37ca2bb"}, "created_at": 1688944882.228102, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_489271a74ffbf6b8026cecd0e37ca2bb\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_limit_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_limit_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_489271a74ffbf6b8026cecd0e37ca2bb.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_FACILITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_AMOUNT__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_EXPIRY_DATE__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_IS_THIS_A_TEMPORARY_AMENDMENT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_START_DATE__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_CURRENT_LIMIT__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_PROPOSED_LIMIT__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_TENOR__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_UTILISATION__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CREATEDBYID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CreatedById", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_limit_curated_CreatedDate.5e65ad90a8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CreatedDate", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_limit_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_limit_curated_CreatedDate", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_ds_limit_curated_CreatedDate.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_limit_curated_CreatedDate.5e65ad90a8", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_limit_curated_CreatedDate"], "alias": "source_not_null_curated_rskcsp_ds_limit_curated_CreatedDate", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688944882.2300842, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_limit_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_limit_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_ds_limit_curated_CreatedDate.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CreatedDate\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_limit_curated`\nwhere CreatedDate is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CreatedDate", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_limit_curated_CurrencyIsoCode__3.fd146ed665": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 3, "column_name": "CurrencyIsoCode", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_limit_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_limit_curated_CurrencyIsoCode__3", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_804d3952d33629f6ee67498e4a0b1f57.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_limit_curated_CurrencyIsoCode__3.fd146ed665", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_limit_curated_CurrencyIsoCode__3"], "alias": "source_length_check_curated_rs_804d3952d33629f6ee67498e4a0b1f57", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_804d3952d33629f6ee67498e4a0b1f57", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_804d3952d33629f6ee67498e4a0b1f57"}, "created_at": 1688944882.2308521, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_804d3952d33629f6ee67498e4a0b1f57\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_limit_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_limit_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_804d3952d33629f6ee67498e4a0b1f57.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_limit_curated`\nWHERE\n  LENGTH(CurrencyIsoCode) > 3\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CurrencyIsoCode", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_CurrencyIsoCode__String.07c269c97a": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CurrencyIsoCode", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_limit_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_CurrencyIsoCode__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_de4efdd2f46f26b8ef65eb2052cc0d16.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_CurrencyIsoCode__String.07c269c97a", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_CurrencyIsoCode__String"], "alias": "dbt_expectations_source_expect_de4efdd2f46f26b8ef65eb2052cc0d16", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_de4efdd2f46f26b8ef65eb2052cc0d16", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_de4efdd2f46f26b8ef65eb2052cc0d16"}, "created_at": 1688944882.23266, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_de4efdd2f46f26b8ef65eb2052cc0d16\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_limit_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_limit_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_de4efdd2f46f26b8ef65eb2052cc0d16.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_FACILITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_AMOUNT__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_EXPIRY_DATE__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_IS_THIS_A_TEMPORARY_AMENDMENT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_START_DATE__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_CURRENT_LIMIT__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_PROPOSED_LIMIT__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_TENOR__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_UTILISATION__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CURRENCYISOCODE'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CurrencyIsoCode", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_limit_curated_Id.7b32a7d878": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "Id", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_limit_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_limit_curated_Id", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_ds_limit_curated_Id.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_limit_curated_Id.7b32a7d878", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_limit_curated_Id"], "alias": "source_not_null_curated_rskcsp_ds_limit_curated_Id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688944882.2345989, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_limit_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_limit_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_ds_limit_curated_Id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect Id\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_limit_curated`\nwhere Id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Id", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_limit_curated_Id__18.a7c04f54f3": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "Id", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_limit_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_limit_curated_Id__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rskcsp_ds_limit_curated_Id__18.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_limit_curated_Id__18.a7c04f54f3", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_limit_curated_Id__18"], "alias": "source_length_check_curated_rskcsp_ds_limit_curated_Id__18", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688944882.235359, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_limit_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_limit_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rskcsp_ds_limit_curated_Id__18.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_limit_curated`\nWHERE\n  LENGTH(Id) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Id", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_Id__String.40e8a609c7": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "Id", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_limit_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_Id__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_16f8d9c812886af5f1cc41121a4cda9f.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_Id__String.40e8a609c7", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_Id__String"], "alias": "dbt_expectations_source_expect_16f8d9c812886af5f1cc41121a4cda9f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_16f8d9c812886af5f1cc41121a4cda9f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_16f8d9c812886af5f1cc41121a4cda9f"}, "created_at": 1688944882.2369, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_16f8d9c812886af5f1cc41121a4cda9f\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_limit_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_limit_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_16f8d9c812886af5f1cc41121a4cda9f.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_FACILITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_AMOUNT__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_EXPIRY_DATE__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_IS_THIS_A_TEMPORARY_AMENDMENT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_START_DATE__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_CURRENT_LIMIT__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_PROPOSED_LIMIT__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_TENOR__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_UTILISATION__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Id", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_limit_curated_LastModifiedById.4568f789ca": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LastModifiedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_limit_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_limit_curated_LastModifiedById", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_d70cbdf703885d322da3a928f5f96b1e.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_limit_curated_LastModifiedById.4568f789ca", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_limit_curated_LastModifiedById"], "alias": "source_not_null_curated_rskcsp_d70cbdf703885d322da3a928f5f96b1e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_d70cbdf703885d322da3a928f5f96b1e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_d70cbdf703885d322da3a928f5f96b1e"}, "created_at": 1688944882.23908, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_d70cbdf703885d322da3a928f5f96b1e\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_limit_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_limit_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_d70cbdf703885d322da3a928f5f96b1e.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect LastModifiedById\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_limit_curated`\nwhere LastModifiedById is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LastModifiedById", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_limit_curated_LastModifiedById__18.f8cee00a5d": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "LastModifiedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_limit_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_limit_curated_LastModifiedById__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_3e996a98dc7ce869fb641682a1fd8819.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_limit_curated_LastModifiedById__18.f8cee00a5d", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_limit_curated_LastModifiedById__18"], "alias": "source_length_check_curated_rs_3e996a98dc7ce869fb641682a1fd8819", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_3e996a98dc7ce869fb641682a1fd8819", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_3e996a98dc7ce869fb641682a1fd8819"}, "created_at": 1688944882.239827, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_3e996a98dc7ce869fb641682a1fd8819\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_limit_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_limit_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_3e996a98dc7ce869fb641682a1fd8819.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_limit_curated`\nWHERE\n  LENGTH(LastModifiedById) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LastModifiedById", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_LastModifiedById__String.12bf21e705": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LastModifiedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_limit_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_LastModifiedById__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_a0cafbd27ac48efc45d27a1b37771e64.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_LastModifiedById__String.12bf21e705", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_LastModifiedById__String"], "alias": "dbt_expectations_source_expect_a0cafbd27ac48efc45d27a1b37771e64", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_a0cafbd27ac48efc45d27a1b37771e64", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_a0cafbd27ac48efc45d27a1b37771e64"}, "created_at": 1688944882.24159, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_a0cafbd27ac48efc45d27a1b37771e64\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_limit_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_limit_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_a0cafbd27ac48efc45d27a1b37771e64.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_FACILITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_AMOUNT__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_EXPIRY_DATE__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_IS_THIS_A_TEMPORARY_AMENDMENT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_START_DATE__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_CURRENT_LIMIT__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_PROPOSED_LIMIT__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_TENOR__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_UTILISATION__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LASTMODIFIEDBYID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LastModifiedById", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_limit_curated_LastModifiedDate.7a34374111": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LastModifiedDate", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_limit_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_limit_curated_LastModifiedDate", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_2e62fbc84e972fa33577bc413a5d3bfe.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_limit_curated_LastModifiedDate.7a34374111", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_limit_curated_LastModifiedDate"], "alias": "source_not_null_curated_rskcsp_2e62fbc84e972fa33577bc413a5d3bfe", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_2e62fbc84e972fa33577bc413a5d3bfe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_2e62fbc84e972fa33577bc413a5d3bfe"}, "created_at": 1688944882.2435231, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_2e62fbc84e972fa33577bc413a5d3bfe\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_limit_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_limit_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_2e62fbc84e972fa33577bc413a5d3bfe.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect LastModifiedDate\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_limit_curated`\nwhere LastModifiedDate is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LastModifiedDate", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_limit_curated_Name.58a0a4503f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "Name", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_limit_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_limit_curated_Name", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_ds_limit_curated_Name.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_limit_curated_Name.58a0a4503f", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_limit_curated_Name"], "alias": "source_not_null_curated_rskcsp_ds_limit_curated_Name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688944882.244291, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_limit_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_limit_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_ds_limit_curated_Name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect Name\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_limit_curated`\nwhere Name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Name", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_limit_curated_Name__80.7af9cc9356": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 80, "column_name": "Name", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_limit_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_limit_curated_Name__80", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rskcsp_ds_limit_curated_Name__80.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_limit_curated_Name__80.7af9cc9356", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_limit_curated_Name__80"], "alias": "source_length_check_curated_rskcsp_ds_limit_curated_Name__80", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688944882.24503, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_limit_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_limit_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rskcsp_ds_limit_curated_Name__80.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_limit_curated`\nWHERE\n  LENGTH(Name) > 80\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Name", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_Name__String.c349a2fdd3": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "Name", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_limit_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_Name__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_c41fb699f86ec7615c2ce59337f4f27a.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_Name__String.c349a2fdd3", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_Name__String"], "alias": "dbt_expectations_source_expect_c41fb699f86ec7615c2ce59337f4f27a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_c41fb699f86ec7615c2ce59337f4f27a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_c41fb699f86ec7615c2ce59337f4f27a"}, "created_at": 1688944882.246685, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_c41fb699f86ec7615c2ce59337f4f27a\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_limit_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_limit_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_c41fb699f86ec7615c2ce59337f4f27a.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_FACILITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_AMOUNT__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_EXPIRY_DATE__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_IS_THIS_A_TEMPORARY_AMENDMENT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_START_DATE__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_CURRENT_LIMIT__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_PROPOSED_LIMIT__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_TENOR__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_UTILISATION__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'NAME'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Name", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_entity_involvement_curated_CreatedById.0ac5b9c4a4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CreatedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_entity_involvement_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_entity_involvement_curated_CreatedById", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_4907ee41a8ddbf7d27385e4edd028cf2.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_entity_involvement_curated_CreatedById.0ac5b9c4a4", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_entity_involvement_curated_CreatedById"], "alias": "source_not_null_curated_rskcsp_4907ee41a8ddbf7d27385e4edd028cf2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_4907ee41a8ddbf7d27385e4edd028cf2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_4907ee41a8ddbf7d27385e4edd028cf2"}, "created_at": 1688944882.248608, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_4907ee41a8ddbf7d27385e4edd028cf2\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_entity_involvement_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_4907ee41a8ddbf7d27385e4edd028cf2.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CreatedById\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_entity_involvement_curated`\nwhere CreatedById is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CreatedById", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_CreatedById__18.c50f0954df": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "CreatedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_entity_involvement_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_entity_involvement_curated_CreatedById__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_bb4d8c80ec79bcdfcb0084dcdb7d09fe.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_CreatedById__18.c50f0954df", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_entity_involvement_curated_CreatedById__18"], "alias": "source_length_check_curated_rs_bb4d8c80ec79bcdfcb0084dcdb7d09fe", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_bb4d8c80ec79bcdfcb0084dcdb7d09fe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_bb4d8c80ec79bcdfcb0084dcdb7d09fe"}, "created_at": 1688944882.249495, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_bb4d8c80ec79bcdfcb0084dcdb7d09fe\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_entity_involvement_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_bb4d8c80ec79bcdfcb0084dcdb7d09fe.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_entity_involvement_curated`\nWHERE\n  LENGTH(CreatedById) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CreatedById", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_CreatedById__String.4b8c158c6e": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CreatedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_entity_involvement_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_CreatedById__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_feeb408e773156975234dd3eb421de88.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_CreatedById__String.4b8c158c6e", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_CreatedById__String"], "alias": "dbt_expectations_source_expect_feeb408e773156975234dd3eb421de88", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_feeb408e773156975234dd3eb421de88", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_feeb408e773156975234dd3eb421de88"}, "created_at": 1688944882.251123, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_feeb408e773156975234dd3eb421de88\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_entity_involvement_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_feeb408e773156975234dd3eb421de88.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CREATEDBYID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CreatedById", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_entity_involvement_curated_CreatedDate.8cd3dcc5f3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CreatedDate", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_entity_involvement_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_entity_involvement_curated_CreatedDate", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_8b9458cef624529e7b281a9966702bc6.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_entity_involvement_curated_CreatedDate.8cd3dcc5f3", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_entity_involvement_curated_CreatedDate"], "alias": "source_not_null_curated_rskcsp_8b9458cef624529e7b281a9966702bc6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_8b9458cef624529e7b281a9966702bc6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_8b9458cef624529e7b281a9966702bc6"}, "created_at": 1688944882.253074, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_8b9458cef624529e7b281a9966702bc6\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_entity_involvement_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_8b9458cef624529e7b281a9966702bc6.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CreatedDate\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_entity_involvement_curated`\nwhere CreatedDate is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CreatedDate", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_CurrencyIsoCode__3.90c3f28b19": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 3, "column_name": "CurrencyIsoCode", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_entity_involvement_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_entity_involvement_curated_CurrencyIsoCode__3", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_5522b8d7361175c9afed1cdd4b2ddbe3.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_CurrencyIsoCode__3.90c3f28b19", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_entity_involvement_curated_CurrencyIsoCode__3"], "alias": "source_length_check_curated_rs_5522b8d7361175c9afed1cdd4b2ddbe3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_5522b8d7361175c9afed1cdd4b2ddbe3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_5522b8d7361175c9afed1cdd4b2ddbe3"}, "created_at": 1688944882.2538319, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_5522b8d7361175c9afed1cdd4b2ddbe3\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_entity_involvement_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_5522b8d7361175c9afed1cdd4b2ddbe3.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_entity_involvement_curated`\nWHERE\n  LENGTH(CurrencyIsoCode) > 3\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CurrencyIsoCode", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_CurrencyIsoCode__String.c7479241c3": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CurrencyIsoCode", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_entity_involvement_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_CurrencyIsoCode__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_a78f67edc42641e708dd0a8b10b9cc6f.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_CurrencyIsoCode__String.c7479241c3", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_CurrencyIsoCode__String"], "alias": "dbt_expectations_source_expect_a78f67edc42641e708dd0a8b10b9cc6f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_a78f67edc42641e708dd0a8b10b9cc6f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_a78f67edc42641e708dd0a8b10b9cc6f"}, "created_at": 1688944882.255585, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_a78f67edc42641e708dd0a8b10b9cc6f\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_entity_involvement_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_a78f67edc42641e708dd0a8b10b9cc6f.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CURRENCYISOCODE'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CurrencyIsoCode", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_entity_involvement_curated_Id.0c27c42eba": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "Id", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_entity_involvement_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_entity_involvement_curated_Id", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_ds_entity_involvement_curated_Id.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_entity_involvement_curated_Id.0c27c42eba", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_entity_involvement_curated_Id"], "alias": "source_not_null_curated_rskcsp_ds_entity_involvement_curated_Id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688944882.2573922, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_entity_involvement_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_ds_entity_involvement_curated_Id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect Id\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_entity_involvement_curated`\nwhere Id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Id", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_Id__18.2867d4d293": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "Id", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_entity_involvement_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_entity_involvement_curated_Id__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_8dc89f8c8ba120f7264bc2df2a60fb63.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_Id__18.2867d4d293", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_entity_involvement_curated_Id__18"], "alias": "source_length_check_curated_rs_8dc89f8c8ba120f7264bc2df2a60fb63", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_8dc89f8c8ba120f7264bc2df2a60fb63", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_8dc89f8c8ba120f7264bc2df2a60fb63"}, "created_at": 1688944882.2582989, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_8dc89f8c8ba120f7264bc2df2a60fb63\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_entity_involvement_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_8dc89f8c8ba120f7264bc2df2a60fb63.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_entity_involvement_curated`\nWHERE\n  LENGTH(Id) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Id", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_Id__String.59b63e5fa4": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "Id", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_entity_involvement_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_Id__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_aa2e592eb3e63d67a402b9aa8ee7f5dc.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_Id__String.59b63e5fa4", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_Id__String"], "alias": "dbt_expectations_source_expect_aa2e592eb3e63d67a402b9aa8ee7f5dc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_aa2e592eb3e63d67a402b9aa8ee7f5dc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_aa2e592eb3e63d67a402b9aa8ee7f5dc"}, "created_at": 1688944882.259927, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_aa2e592eb3e63d67a402b9aa8ee7f5dc\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_entity_involvement_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_aa2e592eb3e63d67a402b9aa8ee7f5dc.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Id", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_entity_involvement_curated_LastModifiedById.4a5f99dd9b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LastModifiedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_entity_involvement_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_entity_involvement_curated_LastModifiedById", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_baee5b44abcf6332403d9c86ea56c59b.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_entity_involvement_curated_LastModifiedById.4a5f99dd9b", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_entity_involvement_curated_LastModifiedById"], "alias": "source_not_null_curated_rskcsp_baee5b44abcf6332403d9c86ea56c59b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_baee5b44abcf6332403d9c86ea56c59b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_baee5b44abcf6332403d9c86ea56c59b"}, "created_at": 1688944882.261881, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_baee5b44abcf6332403d9c86ea56c59b\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_entity_involvement_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_baee5b44abcf6332403d9c86ea56c59b.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect LastModifiedById\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_entity_involvement_curated`\nwhere LastModifiedById is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LastModifiedById", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_LastModifiedById__18.bdf1164c04": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "LastModifiedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_entity_involvement_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_entity_involvement_curated_LastModifiedById__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_a05705738455b735e248691979a46be5.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_LastModifiedById__18.bdf1164c04", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_entity_involvement_curated_LastModifiedById__18"], "alias": "source_length_check_curated_rs_a05705738455b735e248691979a46be5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_a05705738455b735e248691979a46be5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_a05705738455b735e248691979a46be5"}, "created_at": 1688944882.262639, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_a05705738455b735e248691979a46be5\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_entity_involvement_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_a05705738455b735e248691979a46be5.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_entity_involvement_curated`\nWHERE\n  LENGTH(LastModifiedById) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LastModifiedById", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LastModifiedById__String.21aa6a7cdb": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LastModifiedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_entity_involvement_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LastModifiedById__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_7b3cc0b9dc2d3daab7f9a247faa1dbfe.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LastModifiedById__String.21aa6a7cdb", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LastModifiedById__String"], "alias": "dbt_expectations_source_expect_7b3cc0b9dc2d3daab7f9a247faa1dbfe", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_7b3cc0b9dc2d3daab7f9a247faa1dbfe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_7b3cc0b9dc2d3daab7f9a247faa1dbfe"}, "created_at": 1688944882.264394, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_7b3cc0b9dc2d3daab7f9a247faa1dbfe\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_entity_involvement_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_7b3cc0b9dc2d3daab7f9a247faa1dbfe.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LASTMODIFIEDBYID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LastModifiedById", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_entity_involvement_curated_LastModifiedDate.d9e6c8471d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LastModifiedDate", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_entity_involvement_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_entity_involvement_curated_LastModifiedDate", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_481679da8fcc8655e515e08fd123c166.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_entity_involvement_curated_LastModifiedDate.d9e6c8471d", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_entity_involvement_curated_LastModifiedDate"], "alias": "source_not_null_curated_rskcsp_481679da8fcc8655e515e08fd123c166", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_481679da8fcc8655e515e08fd123c166", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_481679da8fcc8655e515e08fd123c166"}, "created_at": 1688944882.2662022, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_481679da8fcc8655e515e08fd123c166\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_entity_involvement_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_481679da8fcc8655e515e08fd123c166.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect LastModifiedDate\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_entity_involvement_curated`\nwhere LastModifiedDate is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LastModifiedDate", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Account__c.4227eb8fd6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LLC_BI__Account__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_entity_involvement_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Account__c", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_32112a50d350efb091e4b91c8865315b.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Account__c.4227eb8fd6", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Account__c"], "alias": "source_not_null_curated_rskcsp_32112a50d350efb091e4b91c8865315b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_32112a50d350efb091e4b91c8865315b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_32112a50d350efb091e4b91c8865315b"}, "created_at": 1688944882.267103, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_32112a50d350efb091e4b91c8865315b\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_entity_involvement_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_32112a50d350efb091e4b91c8865315b.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect LLC_BI__Account__c\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_entity_involvement_curated`\nwhere LLC_BI__Account__c is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Account__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Account__c__18.5ffc385d3b": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "LLC_BI__Account__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_entity_involvement_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Account__c__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_f178419baae3ce720fb909745e345bab.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Account__c__18.5ffc385d3b", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Account__c__18"], "alias": "source_length_check_curated_rs_f178419baae3ce720fb909745e345bab", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_f178419baae3ce720fb909745e345bab", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_f178419baae3ce720fb909745e345bab"}, "created_at": 1688944882.267851, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_f178419baae3ce720fb909745e345bab\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_entity_involvement_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_f178419baae3ce720fb909745e345bab.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_entity_involvement_curated`\nWHERE\n  LENGTH(LLC_BI__Account__c) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Account__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Account__c__String.dc7b77d556": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LLC_BI__Account__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_entity_involvement_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Account__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_69e57edde418dd364f6e5eb3d06d8aa5.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Account__c__String.dc7b77d556", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Account__c__String"], "alias": "dbt_expectations_source_expect_69e57edde418dd364f6e5eb3d06d8aa5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_69e57edde418dd364f6e5eb3d06d8aa5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_69e57edde418dd364f6e5eb3d06d8aa5"}, "created_at": 1688944882.2694669, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_69e57edde418dd364f6e5eb3d06d8aa5\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_entity_involvement_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_69e57edde418dd364f6e5eb3d06d8aa5.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LLC_BI__ACCOUNT__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Account__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Borrower_Type__c__255.534d37fdec": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "LLC_BI__Borrower_Type__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_entity_involvement_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Borrower_Type__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_465c0bfce75e3b13875f395c155b7279.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Borrower_Type__c__255.534d37fdec", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Borrower_Type__c__255"], "alias": "source_length_check_curated_rs_465c0bfce75e3b13875f395c155b7279", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_465c0bfce75e3b13875f395c155b7279", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_465c0bfce75e3b13875f395c155b7279"}, "created_at": 1688944882.2714229, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_465c0bfce75e3b13875f395c155b7279\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_entity_involvement_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_465c0bfce75e3b13875f395c155b7279.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_entity_involvement_curated`\nWHERE\n  LENGTH(LLC_BI__Borrower_Type__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Borrower_Type__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Borrower_Type__c__String.1d4a591f91": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LLC_BI__Borrower_Type__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_entity_involvement_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Borrower_Type__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_1afe4c2cc0943aa4aaefd797cdd55074.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Borrower_Type__c__String.1d4a591f91", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Borrower_Type__c__String"], "alias": "dbt_expectations_source_expect_1afe4c2cc0943aa4aaefd797cdd55074", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_1afe4c2cc0943aa4aaefd797cdd55074", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_1afe4c2cc0943aa4aaefd797cdd55074"}, "created_at": 1688944882.273372, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_1afe4c2cc0943aa4aaefd797cdd55074\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_entity_involvement_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_1afe4c2cc0943aa4aaefd797cdd55074.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LLC_BI__BORROWER_TYPE__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Borrower_Type__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Contingent_Type__c__255.d47173ca0e": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "LLC_BI__Contingent_Type__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_entity_involvement_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Contingent_Type__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_3ea461df5ed23cacbc0c6fb44e6aeec2.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Contingent_Type__c__255.d47173ca0e", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Contingent_Type__c__255"], "alias": "source_length_check_curated_rs_3ea461df5ed23cacbc0c6fb44e6aeec2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_3ea461df5ed23cacbc0c6fb44e6aeec2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_3ea461df5ed23cacbc0c6fb44e6aeec2"}, "created_at": 1688944882.275178, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_3ea461df5ed23cacbc0c6fb44e6aeec2\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_entity_involvement_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_3ea461df5ed23cacbc0c6fb44e6aeec2.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_entity_involvement_curated`\nWHERE\n  LENGTH(LLC_BI__Contingent_Type__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Contingent_Type__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Contingent_Type__c__String.a82415a14f": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LLC_BI__Contingent_Type__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_entity_involvement_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Contingent_Type__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_cc3b006cfe5dac093e0ae505441e51e3.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Contingent_Type__c__String.a82415a14f", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Contingent_Type__c__String"], "alias": "dbt_expectations_source_expect_cc3b006cfe5dac093e0ae505441e51e3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_cc3b006cfe5dac093e0ae505441e51e3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_cc3b006cfe5dac093e0ae505441e51e3"}, "created_at": 1688944882.276936, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_cc3b006cfe5dac093e0ae505441e51e3\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_entity_involvement_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_cc3b006cfe5dac093e0ae505441e51e3.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LLC_BI__CONTINGENT_TYPE__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Contingent_Type__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Loan__c__18.0356536f4e": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "LLC_BI__Loan__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_entity_involvement_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Loan__c__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_39d9aeb7f046fe7c56046f6085b81684.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Loan__c__18.0356536f4e", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Loan__c__18"], "alias": "source_length_check_curated_rs_39d9aeb7f046fe7c56046f6085b81684", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_39d9aeb7f046fe7c56046f6085b81684", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_39d9aeb7f046fe7c56046f6085b81684"}, "created_at": 1688944882.278846, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_39d9aeb7f046fe7c56046f6085b81684\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_entity_involvement_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_39d9aeb7f046fe7c56046f6085b81684.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_entity_involvement_curated`\nWHERE\n  LENGTH(LLC_BI__Loan__c) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Loan__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Loan__c__String.9168694324": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LLC_BI__Loan__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_entity_involvement_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Loan__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_092b41ab0e4d2093abf139a2a72c318d.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Loan__c__String.9168694324", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Loan__c__String"], "alias": "dbt_expectations_source_expect_092b41ab0e4d2093abf139a2a72c318d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_092b41ab0e4d2093abf139a2a72c318d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_092b41ab0e4d2093abf139a2a72c318d"}, "created_at": 1688944882.280448, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_092b41ab0e4d2093abf139a2a72c318d\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_entity_involvement_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_092b41ab0e4d2093abf139a2a72c318d.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LLC_BI__LOAN__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Loan__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Product_Package__c__18.f174ca6c31": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "LLC_BI__Product_Package__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_entity_involvement_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Product_Package__c__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_b1e53b130191d6ee603aaf03a1a45bd4.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Product_Package__c__18.f174ca6c31", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Product_Package__c__18"], "alias": "source_length_check_curated_rs_b1e53b130191d6ee603aaf03a1a45bd4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_b1e53b130191d6ee603aaf03a1a45bd4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_b1e53b130191d6ee603aaf03a1a45bd4"}, "created_at": 1688944882.2824, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_b1e53b130191d6ee603aaf03a1a45bd4\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_entity_involvement_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_b1e53b130191d6ee603aaf03a1a45bd4.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_entity_involvement_curated`\nWHERE\n  LENGTH(LLC_BI__Product_Package__c) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Product_Package__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Product_Package__c__String.7d990badc0": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LLC_BI__Product_Package__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_entity_involvement_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Product_Package__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_8514aa3e4afe412a691aee6902f44443.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Product_Package__c__String.7d990badc0", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Product_Package__c__String"], "alias": "dbt_expectations_source_expect_8514aa3e4afe412a691aee6902f44443", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_8514aa3e4afe412a691aee6902f44443", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_8514aa3e4afe412a691aee6902f44443"}, "created_at": 1688944882.284141, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_8514aa3e4afe412a691aee6902f44443\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_entity_involvement_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_8514aa3e4afe412a691aee6902f44443.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LLC_BI__PRODUCT_PACKAGE__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Product_Package__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_Migration_ID__c__18.719c3680b8": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "Migration_ID__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_entity_involvement_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_entity_involvement_curated_Migration_ID__c__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_d132e8d891c233729a57b7c67dda61b8.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_Migration_ID__c__18.719c3680b8", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_entity_involvement_curated_Migration_ID__c__18"], "alias": "source_length_check_curated_rs_d132e8d891c233729a57b7c67dda61b8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_d132e8d891c233729a57b7c67dda61b8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_d132e8d891c233729a57b7c67dda61b8"}, "created_at": 1688944882.2859452, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_d132e8d891c233729a57b7c67dda61b8\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_entity_involvement_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_d132e8d891c233729a57b7c67dda61b8.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_entity_involvement_curated`\nWHERE\n  LENGTH(Migration_ID__c) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Migration_ID__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_Migration_ID__c__String.704c7befc9": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "Migration_ID__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_entity_involvement_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_Migration_ID__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_4a24227e19c77f87a47dcac6911964da.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_Migration_ID__c__String.704c7befc9", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_Migration_ID__c__String"], "alias": "dbt_expectations_source_expect_4a24227e19c77f87a47dcac6911964da", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_4a24227e19c77f87a47dcac6911964da", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_4a24227e19c77f87a47dcac6911964da"}, "created_at": 1688944882.2877078, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_4a24227e19c77f87a47dcac6911964da\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_entity_involvement_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_4a24227e19c77f87a47dcac6911964da.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MIGRATION_ID__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Migration_ID__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_Name__80.c9396fb10a": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 80, "column_name": "Name", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_entity_involvement_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_entity_involvement_curated_Name__80", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_e3557f0da7e346b347c3292eeb6a16e5.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_Name__80.c9396fb10a", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_entity_involvement_curated_Name__80"], "alias": "source_length_check_curated_rs_e3557f0da7e346b347c3292eeb6a16e5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_e3557f0da7e346b347c3292eeb6a16e5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_e3557f0da7e346b347c3292eeb6a16e5"}, "created_at": 1688944882.289649, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_e3557f0da7e346b347c3292eeb6a16e5\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_entity_involvement_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_e3557f0da7e346b347c3292eeb6a16e5.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_entity_involvement_curated`\nWHERE\n  LENGTH(Name) > 80\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Name", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_Name__String.59554e6b34": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "Name", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_entity_involvement_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_Name__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_2150810ebad34a2a420eaf7cd3117fa8.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_Name__String.59554e6b34", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_Name__String"], "alias": "dbt_expectations_source_expect_2150810ebad34a2a420eaf7cd3117fa8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_2150810ebad34a2a420eaf7cd3117fa8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_2150810ebad34a2a420eaf7cd3117fa8"}, "created_at": 1688944882.29126, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_2150810ebad34a2a420eaf7cd3117fa8\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_entity_involvement_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_2150810ebad34a2a420eaf7cd3117fa8.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'NAME'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Name", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_RecordTypeId__18.f26d0fbd12": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "RecordTypeId", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_entity_involvement_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_entity_involvement_curated_RecordTypeId__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_a4c2515093bbd4167ee2fa862e6338f0.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_RecordTypeId__18.f26d0fbd12", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_entity_involvement_curated_RecordTypeId__18"], "alias": "source_length_check_curated_rs_a4c2515093bbd4167ee2fa862e6338f0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_a4c2515093bbd4167ee2fa862e6338f0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_a4c2515093bbd4167ee2fa862e6338f0"}, "created_at": 1688944882.293397, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_a4c2515093bbd4167ee2fa862e6338f0\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_entity_involvement_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_a4c2515093bbd4167ee2fa862e6338f0.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_entity_involvement_curated`\nWHERE\n  LENGTH(RecordTypeId) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "RecordTypeId", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_RecordTypeId__String.c6bd2a6caf": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "RecordTypeId", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_entity_involvement_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_RecordTypeId__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_2e8f2b144b8eb4dce5fd6156abe7d090.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_RecordTypeId__String.c6bd2a6caf", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_RecordTypeId__String"], "alias": "dbt_expectations_source_expect_2e8f2b144b8eb4dce5fd6156abe7d090", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_2e8f2b144b8eb4dce5fd6156abe7d090", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_2e8f2b144b8eb4dce5fd6156abe7d090"}, "created_at": 1688944882.295097, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_2e8f2b144b8eb4dce5fd6156abe7d090\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_entity_involvement_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_2e8f2b144b8eb4dce5fd6156abe7d090.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'RECORDTYPEID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "RecordTypeId", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_50_of_Security_LV_from_Land_Property__c__255.ffde91bc94": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_50_of_Security_LV_from_Land_Property__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_50_of_Security_LV_from_Land_Property__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_af60daefa73ba32a58855087dd58ad36.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_50_of_Security_LV_from_Land_Property__c__255.ffde91bc94", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_50_of_Security_LV_from_Land_Property__c__255"], "alias": "source_length_check_curated_rs_af60daefa73ba32a58855087dd58ad36", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_af60daefa73ba32a58855087dd58ad36", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_af60daefa73ba32a58855087dd58ad36"}, "created_at": 1688944882.297197, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_af60daefa73ba32a58855087dd58ad36\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_af60daefa73ba32a58855087dd58ad36.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_50_of_Security_LV_from_Land_Property__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_50_of_Security_LV_from_Land_Property__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_50_of_Security_LV_from_Land_Property__c__String.f18b2bce6f": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_50_of_Security_LV_from_Land_Property__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_50_of_Security_LV_from_Land_Property__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_d68dd95846a68cd2d16ba8f2a20e7341.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_50_of_Security_LV_from_Land_Property__c__String.f18b2bce6f", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_50_of_Security_LV_from_Land_Property__c__String"], "alias": "dbt_expectations_source_expect_d68dd95846a68cd2d16ba8f2a20e7341", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_d68dd95846a68cd2d16ba8f2a20e7341", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_d68dd95846a68cd2d16ba8f2a20e7341"}, "created_at": 1688944882.2989619, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_d68dd95846a68cd2d16ba8f2a20e7341\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_d68dd95846a68cd2d16ba8f2a20e7341.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_50_OF_SECURITY_LV_FROM_LAND_PROPERTY__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_50_of_Security_LV_from_Land_Property__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Account_a_Discounted_Account__c__255.4aa51d61c0": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Account_a_Discounted_Account__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Account_a_Discounted_Account__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_64553f6d81c5fa5f4f332e2544d5cdca.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Account_a_Discounted_Account__c__255.4aa51d61c0", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Account_a_Discounted_Account__c__255"], "alias": "source_length_check_curated_rs_64553f6d81c5fa5f4f332e2544d5cdca", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_64553f6d81c5fa5f4f332e2544d5cdca", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_64553f6d81c5fa5f4f332e2544d5cdca"}, "created_at": 1688944882.300907, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_64553f6d81c5fa5f4f332e2544d5cdca\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_64553f6d81c5fa5f4f332e2544d5cdca.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Account_a_Discounted_Account__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Account_a_Discounted_Account__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Account_a_Discounted_Account__c__String.51b82174fe": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Account_a_Discounted_Account__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Account_a_Discounted_Account__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_0a100ccf729f896a904355d2c539a0ef.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Account_a_Discounted_Account__c__String.51b82174fe", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Account_a_Discounted_Account__c__String"], "alias": "dbt_expectations_source_expect_0a100ccf729f896a904355d2c539a0ef", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_0a100ccf729f896a904355d2c539a0ef", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_0a100ccf729f896a904355d2c539a0ef"}, "created_at": 1688944882.3025548, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_0a100ccf729f896a904355d2c539a0ef\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_0a100ccf729f896a904355d2c539a0ef.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_ACCOUNT_A_DISCOUNTED_ACCOUNT__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Account_a_Discounted_Account__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_AccountNumber__c__8.9e9161367a": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 8, "column_name": "CCS_AccountNumber__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_AccountNumber__c__8", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_3249dd6e889699f9b88026788d593116.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_AccountNumber__c__8.9e9161367a", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_AccountNumber__c__8"], "alias": "source_length_check_curated_rs_3249dd6e889699f9b88026788d593116", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_3249dd6e889699f9b88026788d593116", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_3249dd6e889699f9b88026788d593116"}, "created_at": 1688944882.304496, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_3249dd6e889699f9b88026788d593116\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_3249dd6e889699f9b88026788d593116.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_AccountNumber__c) > 8\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_AccountNumber__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_AccountNumber__c__String.0bd878362e": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_AccountNumber__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_AccountNumber__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_a1e0a6ef5bb5c1df7464b72d9572975b.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_AccountNumber__c__String.0bd878362e", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_AccountNumber__c__String"], "alias": "dbt_expectations_source_expect_a1e0a6ef5bb5c1df7464b72d9572975b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_a1e0a6ef5bb5c1df7464b72d9572975b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_a1e0a6ef5bb5c1df7464b72d9572975b"}, "created_at": 1688944882.306091, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_a1e0a6ef5bb5c1df7464b72d9572975b\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_a1e0a6ef5bb5c1df7464b72d9572975b.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_ACCOUNTNUMBER__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_AccountNumber__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Amend_Margin__c__255.965d929c77": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Amend_Margin__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Amend_Margin__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_97e9d8bbc37c84f1d04d1cce3ec75c8f.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Amend_Margin__c__255.965d929c77", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Amend_Margin__c__255"], "alias": "source_length_check_curated_rs_97e9d8bbc37c84f1d04d1cce3ec75c8f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_97e9d8bbc37c84f1d04d1cce3ec75c8f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_97e9d8bbc37c84f1d04d1cce3ec75c8f"}, "created_at": 1688944882.3082721, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_97e9d8bbc37c84f1d04d1cce3ec75c8f\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_97e9d8bbc37c84f1d04d1cce3ec75c8f.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Amend_Margin__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Amend_Margin__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Amend_Margin__c__String.a97d0ca9da": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Amend_Margin__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Amend_Margin__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_744228d94bd1a9cda8f27be7052c3b4a.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Amend_Margin__c__String.a97d0ca9da", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Amend_Margin__c__String"], "alias": "dbt_expectations_source_expect_744228d94bd1a9cda8f27be7052c3b4a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_744228d94bd1a9cda8f27be7052c3b4a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_744228d94bd1a9cda8f27be7052c3b4a"}, "created_at": 1688944882.3099918, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_744228d94bd1a9cda8f27be7052c3b4a\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_744228d94bd1a9cda8f27be7052c3b4a.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_AMEND_MARGIN__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Amend_Margin__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Amend_Returned_Margin__c__255.9d035c6f76": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Amend_Returned_Margin__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Amend_Returned_Margin__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_2f00b25ffca0ca22e9a9b11857dfc47d.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Amend_Returned_Margin__c__255.9d035c6f76", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Amend_Returned_Margin__c__255"], "alias": "source_length_check_curated_rs_2f00b25ffca0ca22e9a9b11857dfc47d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_2f00b25ffca0ca22e9a9b11857dfc47d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_2f00b25ffca0ca22e9a9b11857dfc47d"}, "created_at": 1688944882.311795, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_2f00b25ffca0ca22e9a9b11857dfc47d\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_2f00b25ffca0ca22e9a9b11857dfc47d.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Amend_Returned_Margin__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Amend_Returned_Margin__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Amend_Returned_Margin__c__String.7170346938": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Amend_Returned_Margin__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Amend_Returned_Margin__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_de6c5d4043f02b2ae16eb17b048db43e.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Amend_Returned_Margin__c__String.7170346938", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Amend_Returned_Margin__c__String"], "alias": "dbt_expectations_source_expect_de6c5d4043f02b2ae16eb17b048db43e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_de6c5d4043f02b2ae16eb17b048db43e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_de6c5d4043f02b2ae16eb17b048db43e"}, "created_at": 1688944882.313557, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_de6c5d4043f02b2ae16eb17b048db43e\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_de6c5d4043f02b2ae16eb17b048db43e.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_AMEND_RETURNED_MARGIN__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Amend_Returned_Margin__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Apply_CRH__c__255.60f0e80f40": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Apply_CRH__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Apply_CRH__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_daae3189ce0a8a0d1f93fcc4ccd2d539.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Apply_CRH__c__255.60f0e80f40", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Apply_CRH__c__255"], "alias": "source_length_check_curated_rs_daae3189ce0a8a0d1f93fcc4ccd2d539", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_daae3189ce0a8a0d1f93fcc4ccd2d539", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_daae3189ce0a8a0d1f93fcc4ccd2d539"}, "created_at": 1688944882.315487, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_daae3189ce0a8a0d1f93fcc4ccd2d539\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_daae3189ce0a8a0d1f93fcc4ccd2d539.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Apply_CRH__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Apply_CRH__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Apply_CRH__c__String.99cf0e6410": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Apply_CRH__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Apply_CRH__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_fa3cc925051a3ef2e99b5f9130872010.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Apply_CRH__c__String.99cf0e6410", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Apply_CRH__c__String"], "alias": "dbt_expectations_source_expect_fa3cc925051a3ef2e99b5f9130872010", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_fa3cc925051a3ef2e99b5f9130872010", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_fa3cc925051a3ef2e99b5f9130872010"}, "created_at": 1688944882.317117, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_fa3cc925051a3ef2e99b5f9130872010\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_fa3cc925051a3ef2e99b5f9130872010.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_APPLY_CRH__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Apply_CRH__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Apply_Tranche_Drawdown__c__255.14c48768e1": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Apply_Tranche_Drawdown__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Apply_Tranche_Drawdown__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_33315cbb90492d4148bcafd8d129c770.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Apply_Tranche_Drawdown__c__255.14c48768e1", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Apply_Tranche_Drawdown__c__255"], "alias": "source_length_check_curated_rs_33315cbb90492d4148bcafd8d129c770", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_33315cbb90492d4148bcafd8d129c770", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_33315cbb90492d4148bcafd8d129c770"}, "created_at": 1688944882.319058, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_33315cbb90492d4148bcafd8d129c770\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_33315cbb90492d4148bcafd8d129c770.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Apply_Tranche_Drawdown__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Apply_Tranche_Drawdown__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Apply_Tranche_Drawdown__c__String.3d8ecdc48a": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Apply_Tranche_Drawdown__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Apply_Tranche_Drawdown__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_12565975c98336b24016ca386f71127d.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Apply_Tranche_Drawdown__c__String.3d8ecdc48a", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Apply_Tranche_Drawdown__c__String"], "alias": "dbt_expectations_source_expect_12565975c98336b24016ca386f71127d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_12565975c98336b24016ca386f71127d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_12565975c98336b24016ca386f71127d"}, "created_at": 1688944882.320659, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_12565975c98336b24016ca386f71127d\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_12565975c98336b24016ca386f71127d.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_APPLY_TRANCHE_DRAWDOWN__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Apply_Tranche_Drawdown__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Approval_Status__c__255.b9b44d0bc1": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Approval_Status__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Approval_Status__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_ff3984323e539b6f17c4569e8230d91d.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Approval_Status__c__255.b9b44d0bc1", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Approval_Status__c__255"], "alias": "source_length_check_curated_rs_ff3984323e539b6f17c4569e8230d91d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_ff3984323e539b6f17c4569e8230d91d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_ff3984323e539b6f17c4569e8230d91d"}, "created_at": 1688944882.322613, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_ff3984323e539b6f17c4569e8230d91d\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_ff3984323e539b6f17c4569e8230d91d.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Approval_Status__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Approval_Status__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Approval_Status__c__String.65b0ce30e4": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Approval_Status__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Approval_Status__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_4160be5bcbf44b3d16f0d87f5e0399a3.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Approval_Status__c__String.65b0ce30e4", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Approval_Status__c__String"], "alias": "dbt_expectations_source_expect_4160be5bcbf44b3d16f0d87f5e0399a3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_4160be5bcbf44b3d16f0d87f5e0399a3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_4160be5bcbf44b3d16f0d87f5e0399a3"}, "created_at": 1688944882.324337, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_4160be5bcbf44b3d16f0d87f5e0399a3\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_4160be5bcbf44b3d16f0d87f5e0399a3.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_APPROVAL_STATUS__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Approval_Status__c", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_Borrowing_Structure_Route__c.7ac40ac21a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CCS_Borrowing_Structure_Route__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_facility_curated_CCS_Borrowing_Structure_Route__c", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_a1ebfd9d78a4b27e988f7058316a72db.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_Borrowing_Structure_Route__c.7ac40ac21a", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_facility_curated_CCS_Borrowing_Structure_Route__c"], "alias": "source_not_null_curated_rskcsp_a1ebfd9d78a4b27e988f7058316a72db", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_a1ebfd9d78a4b27e988f7058316a72db", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_a1ebfd9d78a4b27e988f7058316a72db"}, "created_at": 1688944882.326134, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_a1ebfd9d78a4b27e988f7058316a72db\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_a1ebfd9d78a4b27e988f7058316a72db.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CCS_Borrowing_Structure_Route__c\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nwhere CCS_Borrowing_Structure_Route__c is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Borrowing_Structure_Route__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_CardScheme__c__255.c27b6fff53": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_CardScheme__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_CardScheme__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_285989e1c41f27906a6800ac8229a8f7.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_CardScheme__c__255.c27b6fff53", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_CardScheme__c__255"], "alias": "source_length_check_curated_rs_285989e1c41f27906a6800ac8229a8f7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_285989e1c41f27906a6800ac8229a8f7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_285989e1c41f27906a6800ac8229a8f7"}, "created_at": 1688944882.32703, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_285989e1c41f27906a6800ac8229a8f7\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_285989e1c41f27906a6800ac8229a8f7.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_CardScheme__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_CardScheme__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_CardScheme__c__String.4d7f46a8d7": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_CardScheme__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_CardScheme__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_e44de4b04eafaaa2648ce472fa6c418e.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_CardScheme__c__String.4d7f46a8d7", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_CardScheme__c__String"], "alias": "dbt_expectations_source_expect_e44de4b04eafaaa2648ce472fa6c418e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_e44de4b04eafaaa2648ce472fa6c418e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_e44de4b04eafaaa2648ce472fa6c418e"}, "created_at": 1688944882.3286662, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_e44de4b04eafaaa2648ce472fa6c418e\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_e44de4b04eafaaa2648ce472fa6c418e.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_CARDSCHEME__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_CardScheme__c", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_CCA__c.86f21435af": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CCS_CCA__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_facility_curated_CCS_CCA__c", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_ds_facility_curated_CCS_CCA__c.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_CCA__c.86f21435af", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_facility_curated_CCS_CCA__c"], "alias": "source_not_null_curated_rskcsp_ds_facility_curated_CCS_CCA__c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688944882.330622, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_ds_facility_curated_CCS_CCA__c.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CCS_CCA__c\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nwhere CCS_CCA__c is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_CCA__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_CFGICleanGrowthFinanceInitiative__c__255.b815119ca4": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_CFGICleanGrowthFinanceInitiative__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_CFGICleanGrowthFinanceInitiative__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_78580573c548efe7c1a91595d2742e47.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_CFGICleanGrowthFinanceInitiative__c__255.b815119ca4", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_CFGICleanGrowthFinanceInitiative__c__255"], "alias": "source_length_check_curated_rs_78580573c548efe7c1a91595d2742e47", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_78580573c548efe7c1a91595d2742e47", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_78580573c548efe7c1a91595d2742e47"}, "created_at": 1688944882.331373, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_78580573c548efe7c1a91595d2742e47\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_78580573c548efe7c1a91595d2742e47.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_CFGICleanGrowthFinanceInitiative__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_CFGICleanGrowthFinanceInitiative__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_CFGICleanGrowthFinanceInitiative__c__String.8fad710767": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_CFGICleanGrowthFinanceInitiative__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_CFGICleanGrowthFinanceInitiative__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_af7feea2f01a100b7d5ce0e3f18e8844.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_CFGICleanGrowthFinanceInitiative__c__String.8fad710767", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_CFGICleanGrowthFinanceInitiative__c__String"], "alias": "dbt_expectations_source_expect_af7feea2f01a100b7d5ce0e3f18e8844", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_af7feea2f01a100b7d5ce0e3f18e8844", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_af7feea2f01a100b7d5ce0e3f18e8844"}, "created_at": 1688944882.3331368, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_af7feea2f01a100b7d5ce0e3f18e8844\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_af7feea2f01a100b7d5ce0e3f18e8844.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_CFGICLEANGROWTHFINANCEINITIATIVE__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_CFGICleanGrowthFinanceInitiative__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Change_Fixed_Rate_Duration__c__255.a4da67ae6d": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Change_Fixed_Rate_Duration__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Change_Fixed_Rate_Duration__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_decfa64994cf3fe55d4ec96d67919b21.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Change_Fixed_Rate_Duration__c__255.a4da67ae6d", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Change_Fixed_Rate_Duration__c__255"], "alias": "source_length_check_curated_rs_decfa64994cf3fe55d4ec96d67919b21", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_decfa64994cf3fe55d4ec96d67919b21", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_decfa64994cf3fe55d4ec96d67919b21"}, "created_at": 1688944882.3350852, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_decfa64994cf3fe55d4ec96d67919b21\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_decfa64994cf3fe55d4ec96d67919b21.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Change_Fixed_Rate_Duration__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Change_Fixed_Rate_Duration__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Change_Fixed_Rate_Duration__c__String.5da80801f8": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Change_Fixed_Rate_Duration__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Change_Fixed_Rate_Duration__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_a8459a284e8e03648b0b6ea491dd1f7f.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Change_Fixed_Rate_Duration__c__String.5da80801f8", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Change_Fixed_Rate_Duration__c__String"], "alias": "dbt_expectations_source_expect_a8459a284e8e03648b0b6ea491dd1f7f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_a8459a284e8e03648b0b6ea491dd1f7f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_a8459a284e8e03648b0b6ea491dd1f7f"}, "created_at": 1688944882.3366919, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_a8459a284e8e03648b0b6ea491dd1f7f\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_a8459a284e8e03648b0b6ea491dd1f7f.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_CHANGE_FIXED_RATE_DURATION__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Change_Fixed_Rate_Duration__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Chosen_Rate__c__255.93f588a8ae": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Chosen_Rate__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Chosen_Rate__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_c73997ec7793a3756c352346d320f9cc.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Chosen_Rate__c__255.93f588a8ae", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Chosen_Rate__c__255"], "alias": "source_length_check_curated_rs_c73997ec7793a3756c352346d320f9cc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_c73997ec7793a3756c352346d320f9cc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_c73997ec7793a3756c352346d320f9cc"}, "created_at": 1688944882.338611, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_c73997ec7793a3756c352346d320f9cc\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_c73997ec7793a3756c352346d320f9cc.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Chosen_Rate__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Chosen_Rate__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Chosen_Rate__c__String.0c5a77656d": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Chosen_Rate__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Chosen_Rate__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_6ebf9633f446d0a7aa7fb3db2d768a62.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Chosen_Rate__c__String.0c5a77656d", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Chosen_Rate__c__String"], "alias": "dbt_expectations_source_expect_6ebf9633f446d0a7aa7fb3db2d768a62", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_6ebf9633f446d0a7aa7fb3db2d768a62", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_6ebf9633f446d0a7aa7fb3db2d768a62"}, "created_at": 1688944882.340218, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_6ebf9633f446d0a7aa7fb3db2d768a62\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_6ebf9633f446d0a7aa7fb3db2d768a62.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_CHOSEN_RATE__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Chosen_Rate__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Client_Choice_Rationale__c__255.49e15a64b6": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Client_Choice_Rationale__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Client_Choice_Rationale__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_f8fd4914de09ef6b93ffe765c034fa5d.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Client_Choice_Rationale__c__255.49e15a64b6", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Client_Choice_Rationale__c__255"], "alias": "source_length_check_curated_rs_f8fd4914de09ef6b93ffe765c034fa5d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_f8fd4914de09ef6b93ffe765c034fa5d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_f8fd4914de09ef6b93ffe765c034fa5d"}, "created_at": 1688944882.342419, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_f8fd4914de09ef6b93ffe765c034fa5d\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_f8fd4914de09ef6b93ffe765c034fa5d.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Client_Choice_Rationale__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Client_Choice_Rationale__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Client_Choice_Rationale__c__String.9bbf1abcc7": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Client_Choice_Rationale__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Client_Choice_Rationale__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_a800e74ee0c2122d9220d4b19e59e9f0.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Client_Choice_Rationale__c__String.9bbf1abcc7", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Client_Choice_Rationale__c__String"], "alias": "dbt_expectations_source_expect_a800e74ee0c2122d9220d4b19e59e9f0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_a800e74ee0c2122d9220d4b19e59e9f0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_a800e74ee0c2122d9220d4b19e59e9f0"}, "created_at": 1688944882.3441339, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_a800e74ee0c2122d9220d4b19e59e9f0\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_a800e74ee0c2122d9220d4b19e59e9f0.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_CLIENT_CHOICE_RATIONALE__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Client_Choice_Rationale__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Commentary_on_Pricing__c__32768.bd09d75094": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 32768, "column_name": "CCS_Commentary_on_Pricing__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Commentary_on_Pricing__c__32768", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_189985870e1b927f91507d9078846b3b.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Commentary_on_Pricing__c__32768.bd09d75094", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Commentary_on_Pricing__c__32768"], "alias": "source_length_check_curated_rs_189985870e1b927f91507d9078846b3b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_189985870e1b927f91507d9078846b3b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_189985870e1b927f91507d9078846b3b"}, "created_at": 1688944882.3459132, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_189985870e1b927f91507d9078846b3b\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_189985870e1b927f91507d9078846b3b.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Commentary_on_Pricing__c) > 32768\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Commentary_on_Pricing__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Commentary_on_Pricing__c__String.0247ec59e3": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Commentary_on_Pricing__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Commentary_on_Pricing__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_6362ca8ea7d4e29239016fbd41ed3ab1.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Commentary_on_Pricing__c__String.0247ec59e3", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Commentary_on_Pricing__c__String"], "alias": "dbt_expectations_source_expect_6362ca8ea7d4e29239016fbd41ed3ab1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_6362ca8ea7d4e29239016fbd41ed3ab1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_6362ca8ea7d4e29239016fbd41ed3ab1"}, "created_at": 1688944882.347646, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_6362ca8ea7d4e29239016fbd41ed3ab1\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_6362ca8ea7d4e29239016fbd41ed3ab1.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_COMMENTARY_ON_PRICING__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Commentary_on_Pricing__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_CRH_Monthly_or_Quarterly__c__255.900a010a7d": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_CRH_Monthly_or_Quarterly__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_CRH_Monthly_or_Quarterly__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_07a989988c611efb8be8a4d0c2313f1e.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_CRH_Monthly_or_Quarterly__c__255.900a010a7d", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_CRH_Monthly_or_Quarterly__c__255"], "alias": "source_length_check_curated_rs_07a989988c611efb8be8a4d0c2313f1e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_07a989988c611efb8be8a4d0c2313f1e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_07a989988c611efb8be8a4d0c2313f1e"}, "created_at": 1688944882.349557, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_07a989988c611efb8be8a4d0c2313f1e\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_07a989988c611efb8be8a4d0c2313f1e.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_CRH_Monthly_or_Quarterly__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_CRH_Monthly_or_Quarterly__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_CRH_Monthly_or_Quarterly__c__String.bf24d60c77": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_CRH_Monthly_or_Quarterly__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_CRH_Monthly_or_Quarterly__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_60ab5d2ff73045869b738a47a52cb751.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_CRH_Monthly_or_Quarterly__c__String.bf24d60c77", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_CRH_Monthly_or_Quarterly__c__String"], "alias": "dbt_expectations_source_expect_60ab5d2ff73045869b738a47a52cb751", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_60ab5d2ff73045869b738a47a52cb751", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_60ab5d2ff73045869b738a47a52cb751"}, "created_at": 1688944882.351157, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_60ab5d2ff73045869b738a47a52cb751\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_60ab5d2ff73045869b738a47a52cb751.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_CRH_MONTHLY_OR_QUARTERLY__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_CRH_Monthly_or_Quarterly__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Customer_documentation_preference__c__255.234307f5f0": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Customer_documentation_preference__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Customer_documentation_preference__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_7f14ce8c3bb365952d26922faf3140f7.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Customer_documentation_preference__c__255.234307f5f0", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Customer_documentation_preference__c__255"], "alias": "source_length_check_curated_rs_7f14ce8c3bb365952d26922faf3140f7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_7f14ce8c3bb365952d26922faf3140f7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_7f14ce8c3bb365952d26922faf3140f7"}, "created_at": 1688944882.3530922, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_7f14ce8c3bb365952d26922faf3140f7\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_7f14ce8c3bb365952d26922faf3140f7.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Customer_documentation_preference__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Customer_documentation_preference__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Customer_documentation_preference__c__String.fbec828014": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Customer_documentation_preference__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Customer_documentation_preference__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_1741ded8b83effc70de71ce911d430ad.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Customer_documentation_preference__c__String.fbec828014", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Customer_documentation_preference__c__String"], "alias": "dbt_expectations_source_expect_1741ded8b83effc70de71ce911d430ad", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_1741ded8b83effc70de71ce911d430ad", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_1741ded8b83effc70de71ce911d430ad"}, "created_at": 1688944882.354688, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_1741ded8b83effc70de71ce911d430ad\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_1741ded8b83effc70de71ce911d430ad.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_CUSTOMER_DOCUMENTATION_PREFERENCE__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Customer_documentation_preference__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_DateOfMarketLinksAgreementKnown__c__255.30de9d16d3": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_DateOfMarketLinksAgreementKnown__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_DateOfMarketLinksAgreementKnown__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_85d7b87555d1df9978e3160bc52a511d.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_DateOfMarketLinksAgreementKnown__c__255.30de9d16d3", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_DateOfMarketLinksAgreementKnown__c__255"], "alias": "source_length_check_curated_rs_85d7b87555d1df9978e3160bc52a511d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_85d7b87555d1df9978e3160bc52a511d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_85d7b87555d1df9978e3160bc52a511d"}, "created_at": 1688944882.3566191, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_85d7b87555d1df9978e3160bc52a511d\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_85d7b87555d1df9978e3160bc52a511d.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_DateOfMarketLinksAgreementKnown__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_DateOfMarketLinksAgreementKnown__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_DateOfMarketLinksAgreementKnown__c__String.aa938e9e03": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_DateOfMarketLinksAgreementKnown__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_DateOfMarketLinksAgreementKnown__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_21fe730c73782ed23ee9e407beaa47b5.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_DateOfMarketLinksAgreementKnown__c__String.aa938e9e03", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_DateOfMarketLinksAgreementKnown__c__String"], "alias": "dbt_expectations_source_expect_21fe730c73782ed23ee9e407beaa47b5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_21fe730c73782ed23ee9e407beaa47b5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_21fe730c73782ed23ee9e407beaa47b5"}, "created_at": 1688944882.35835, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_21fe730c73782ed23ee9e407beaa47b5\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_21fe730c73782ed23ee9e407beaa47b5.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_DATEOFMARKETLINKSAGREEMENTKNOWN__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_DateOfMarketLinksAgreementKnown__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_DateOfTravelLinkAgreementKnown__c__255.86f196456b": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_DateOfTravelLinkAgreementKnown__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_DateOfTravelLinkAgreementKnown__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_98fcac28dd31945de90dc5bd8af14ed7.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_DateOfTravelLinkAgreementKnown__c__255.86f196456b", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_DateOfTravelLinkAgreementKnown__c__255"], "alias": "source_length_check_curated_rs_98fcac28dd31945de90dc5bd8af14ed7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_98fcac28dd31945de90dc5bd8af14ed7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_98fcac28dd31945de90dc5bd8af14ed7"}, "created_at": 1688944882.360137, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_98fcac28dd31945de90dc5bd8af14ed7\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_98fcac28dd31945de90dc5bd8af14ed7.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_DateOfTravelLinkAgreementKnown__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_DateOfTravelLinkAgreementKnown__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_DateOfTravelLinkAgreementKnown__c__String.3a5e4b63ba": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_DateOfTravelLinkAgreementKnown__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_DateOfTravelLinkAgreementKnown__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_3ce31a6fde65037a49a0f14aa1860b41.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_DateOfTravelLinkAgreementKnown__c__String.3a5e4b63ba", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_DateOfTravelLinkAgreementKnown__c__String"], "alias": "dbt_expectations_source_expect_3ce31a6fde65037a49a0f14aa1860b41", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_3ce31a6fde65037a49a0f14aa1860b41", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_3ce31a6fde65037a49a0f14aa1860b41"}, "created_at": 1688944882.3618639, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_3ce31a6fde65037a49a0f14aa1860b41\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_3ce31a6fde65037a49a0f14aa1860b41.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_DATEOFTRAVELLINKAGREEMENTKNOWN__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_DateOfTravelLinkAgreementKnown__c", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_DoNotTrade__c.2abd07cb78": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CCS_DoNotTrade__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_facility_curated_CCS_DoNotTrade__c", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_7dc5d0acd5d8bb9955ae292364ef28f4.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_DoNotTrade__c.2abd07cb78", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_facility_curated_CCS_DoNotTrade__c"], "alias": "source_not_null_curated_rskcsp_7dc5d0acd5d8bb9955ae292364ef28f4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_7dc5d0acd5d8bb9955ae292364ef28f4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_7dc5d0acd5d8bb9955ae292364ef28f4"}, "created_at": 1688944882.363765, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_7dc5d0acd5d8bb9955ae292364ef28f4\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_7dc5d0acd5d8bb9955ae292364ef28f4.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CCS_DoNotTrade__c\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nwhere CCS_DoNotTrade__c is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_DoNotTrade__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Duration__c__255.4a95f93f36": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Duration__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Duration__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_304d70594530e180bd77dd87258d474c.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Duration__c__255.4a95f93f36", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Duration__c__255"], "alias": "source_length_check_curated_rs_304d70594530e180bd77dd87258d474c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_304d70594530e180bd77dd87258d474c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_304d70594530e180bd77dd87258d474c"}, "created_at": 1688944882.3645198, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_304d70594530e180bd77dd87258d474c\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_304d70594530e180bd77dd87258d474c.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Duration__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Duration__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Duration__c__String.2df4f9bc42": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Duration__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Duration__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_8c088d5051564cf6eee1917b2a6bce4c.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Duration__c__String.2df4f9bc42", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Duration__c__String"], "alias": "dbt_expectations_source_expect_8c088d5051564cf6eee1917b2a6bce4c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_8c088d5051564cf6eee1917b2a6bce4c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_8c088d5051564cf6eee1917b2a6bce4c"}, "created_at": 1688944882.366266, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_8c088d5051564cf6eee1917b2a6bce4c\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_8c088d5051564cf6eee1917b2a6bce4c.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_DURATION__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Duration__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_e_Loan_Product_Selection__c__4099.9eca70b01a": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 4099, "column_name": "CCS_e_Loan_Product_Selection__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_e_Loan_Product_Selection__c__4099", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_a41ece79c2027d35e44edfe5feea4604.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_e_Loan_Product_Selection__c__4099.9eca70b01a", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_e_Loan_Product_Selection__c__4099"], "alias": "source_length_check_curated_rs_a41ece79c2027d35e44edfe5feea4604", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_a41ece79c2027d35e44edfe5feea4604", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_a41ece79c2027d35e44edfe5feea4604"}, "created_at": 1688944882.368055, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_a41ece79c2027d35e44edfe5feea4604\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_a41ece79c2027d35e44edfe5feea4604.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_e_Loan_Product_Selection__c) > 4099\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_e_Loan_Product_Selection__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_e_Loan_Product_Selection__c__String.d581597085": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_e_Loan_Product_Selection__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_e_Loan_Product_Selection__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_229cf71752c6ab08f50088beb9f76367.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_e_Loan_Product_Selection__c__String.d581597085", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_e_Loan_Product_Selection__c__String"], "alias": "dbt_expectations_source_expect_229cf71752c6ab08f50088beb9f76367", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_229cf71752c6ab08f50088beb9f76367", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_229cf71752c6ab08f50088beb9f76367"}, "created_at": 1688944882.369811, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_229cf71752c6ab08f50088beb9f76367\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_229cf71752c6ab08f50088beb9f76367.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_E_LOAN_PRODUCT_SELECTION__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_e_Loan_Product_Selection__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Eligible_for_CRH__c__1300.9a011acab8": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 1300, "column_name": "CCS_Eligible_for_CRH__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Eligible_for_CRH__c__1300", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_1507baa35be3df621c7eba819386fca0.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Eligible_for_CRH__c__1300.9a011acab8", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Eligible_for_CRH__c__1300"], "alias": "source_length_check_curated_rs_1507baa35be3df621c7eba819386fca0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_1507baa35be3df621c7eba819386fca0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_1507baa35be3df621c7eba819386fca0"}, "created_at": 1688944882.371727, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_1507baa35be3df621c7eba819386fca0\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_1507baa35be3df621c7eba819386fca0.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Eligible_for_CRH__c) > 1300\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Eligible_for_CRH__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Eligible_for_CRH__c__String.5b03a746fa": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Eligible_for_CRH__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Eligible_for_CRH__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_15ed0688c5b8c9fbcf6efacee350e087.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Eligible_for_CRH__c__String.5b03a746fa", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Eligible_for_CRH__c__String"], "alias": "dbt_expectations_source_expect_15ed0688c5b8c9fbcf6efacee350e087", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_15ed0688c5b8c9fbcf6efacee350e087", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_15ed0688c5b8c9fbcf6efacee350e087"}, "created_at": 1688944882.3733451, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_15ed0688c5b8c9fbcf6efacee350e087\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_15ed0688c5b8c9fbcf6efacee350e087.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_ELIGIBLE_FOR_CRH__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Eligible_for_CRH__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Exception_Pricing_Request__c__255.f9c81db9ee": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Exception_Pricing_Request__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Exception_Pricing_Request__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_65e2859b661b604063237ce5d604dc4c.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Exception_Pricing_Request__c__255.f9c81db9ee", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Exception_Pricing_Request__c__255"], "alias": "source_length_check_curated_rs_65e2859b661b604063237ce5d604dc4c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_65e2859b661b604063237ce5d604dc4c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_65e2859b661b604063237ce5d604dc4c"}, "created_at": 1688944882.375498, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_65e2859b661b604063237ce5d604dc4c\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_65e2859b661b604063237ce5d604dc4c.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Exception_Pricing_Request__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Exception_Pricing_Request__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Exception_Pricing_Request__c__String.e9b154f4aa": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Exception_Pricing_Request__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Exception_Pricing_Request__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_f3a1dd76704167564da0eceb06451e56.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Exception_Pricing_Request__c__String.e9b154f4aa", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Exception_Pricing_Request__c__String"], "alias": "dbt_expectations_source_expect_f3a1dd76704167564da0eceb06451e56", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_f3a1dd76704167564da0eceb06451e56", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_f3a1dd76704167564da0eceb06451e56"}, "created_at": 1688944882.3770921, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_f3a1dd76704167564da0eceb06451e56\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_f3a1dd76704167564da0eceb06451e56.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_EXCEPTION_PRICING_REQUEST__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Exception_Pricing_Request__c", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_Exclude_from_Change__c.696c2da65d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CCS_Exclude_from_Change__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_facility_curated_CCS_Exclude_from_Change__c", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_51cf678836110a3dcaef43a99dbb1089.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_Exclude_from_Change__c.696c2da65d", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_facility_curated_CCS_Exclude_from_Change__c"], "alias": "source_not_null_curated_rskcsp_51cf678836110a3dcaef43a99dbb1089", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_51cf678836110a3dcaef43a99dbb1089", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_51cf678836110a3dcaef43a99dbb1089"}, "created_at": 1688944882.379026, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_51cf678836110a3dcaef43a99dbb1089\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_51cf678836110a3dcaef43a99dbb1089.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CCS_Exclude_from_Change__c\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nwhere CCS_Exclude_from_Change__c is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Exclude_from_Change__c", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_Exclude_from_Exposure_Value__c.70a68d99cf": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CCS_Exclude_from_Exposure_Value__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_facility_curated_CCS_Exclude_from_Exposure_Value__c", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_dc5f70cb9d0cf611c5ed2c865a3bef7b.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_Exclude_from_Exposure_Value__c.70a68d99cf", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_facility_curated_CCS_Exclude_from_Exposure_Value__c"], "alias": "source_not_null_curated_rskcsp_dc5f70cb9d0cf611c5ed2c865a3bef7b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_dc5f70cb9d0cf611c5ed2c865a3bef7b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_dc5f70cb9d0cf611c5ed2c865a3bef7b"}, "created_at": 1688944882.379772, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_dc5f70cb9d0cf611c5ed2c865a3bef7b\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_dc5f70cb9d0cf611c5ed2c865a3bef7b.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CCS_Exclude_from_Exposure_Value__c\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nwhere CCS_Exclude_from_Exposure_Value__c is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Exclude_from_Exposure_Value__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Exposure_Value__c__1300.b71cf7a719": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 1300, "column_name": "CCS_Exposure_Value__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Exposure_Value__c__1300", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_c383a0069cf24cd4af34c4dd624a0cf9.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Exposure_Value__c__1300.b71cf7a719", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Exposure_Value__c__1300"], "alias": "source_length_check_curated_rs_c383a0069cf24cd4af34c4dd624a0cf9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_c383a0069cf24cd4af34c4dd624a0cf9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_c383a0069cf24cd4af34c4dd624a0cf9"}, "created_at": 1688944882.380644, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_c383a0069cf24cd4af34c4dd624a0cf9\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_c383a0069cf24cd4af34c4dd624a0cf9.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Exposure_Value__c) > 1300\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Exposure_Value__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Exposure_Value__c__String.5c743d4753": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Exposure_Value__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Exposure_Value__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_6c96053f8807a188e196118bb56ea55a.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Exposure_Value__c__String.5c743d4753", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Exposure_Value__c__String"], "alias": "dbt_expectations_source_expect_6c96053f8807a188e196118bb56ea55a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_6c96053f8807a188e196118bb56ea55a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_6c96053f8807a188e196118bb56ea55a"}, "created_at": 1688944882.382255, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_6c96053f8807a188e196118bb56ea55a\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_6c96053f8807a188e196118bb56ea55a.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_EXPOSURE_VALUE__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Exposure_Value__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Final_Limit_or_Change_per_Step__c__255.d199bf68ae": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Final_Limit_or_Change_per_Step__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Final_Limit_or_Change_per_Step__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_d04eeae22984e1b28bd254449b10c0df.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Final_Limit_or_Change_per_Step__c__255.d199bf68ae", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Final_Limit_or_Change_per_Step__c__255"], "alias": "source_length_check_curated_rs_d04eeae22984e1b28bd254449b10c0df", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_d04eeae22984e1b28bd254449b10c0df", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_d04eeae22984e1b28bd254449b10c0df"}, "created_at": 1688944882.38418, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_d04eeae22984e1b28bd254449b10c0df\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_d04eeae22984e1b28bd254449b10c0df.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Final_Limit_or_Change_per_Step__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Final_Limit_or_Change_per_Step__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Final_Limit_or_Change_per_Step__c__String.c9e5b0a7bb": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Final_Limit_or_Change_per_Step__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Final_Limit_or_Change_per_Step__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_ee8fce3850ace84d0c0377326f06d050.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Final_Limit_or_Change_per_Step__c__String.c9e5b0a7bb", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Final_Limit_or_Change_per_Step__c__String"], "alias": "dbt_expectations_source_expect_ee8fce3850ace84d0c0377326f06d050", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_ee8fce3850ace84d0c0377326f06d050", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_ee8fce3850ace84d0c0377326f06d050"}, "created_at": 1688944882.385777, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_ee8fce3850ace84d0c0377326f06d050\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_ee8fce3850ace84d0c0377326f06d050.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_FINAL_LIMIT_OR_CHANGE_PER_STEP__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Final_Limit_or_Change_per_Step__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_FormFactor__c__255.bff7f1305a": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_FormFactor__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_FormFactor__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_bd0df08ddb3e6086910ecc12989b78b9.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_FormFactor__c__255.bff7f1305a", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_FormFactor__c__255"], "alias": "source_length_check_curated_rs_bd0df08ddb3e6086910ecc12989b78b9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_bd0df08ddb3e6086910ecc12989b78b9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_bd0df08ddb3e6086910ecc12989b78b9"}, "created_at": 1688944882.387716, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_bd0df08ddb3e6086910ecc12989b78b9\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_bd0df08ddb3e6086910ecc12989b78b9.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_FormFactor__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_FormFactor__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_FormFactor__c__String.33a663ad8d": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_FormFactor__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_FormFactor__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_b6ccd83158b3fedb428aa9f3083d8119.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_FormFactor__c__String.33a663ad8d", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_FormFactor__c__String"], "alias": "dbt_expectations_source_expect_b6ccd83158b3fedb428aa9f3083d8119", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_b6ccd83158b3fedb428aa9f3083d8119", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_b6ccd83158b3fedb428aa9f3083d8119"}, "created_at": 1688944882.389442, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_b6ccd83158b3fedb428aa9f3083d8119\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_b6ccd83158b3fedb428aa9f3083d8119.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_FORMFACTOR__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_FormFactor__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Frequency__c__255.299519926e": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Frequency__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Frequency__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_37816e1071a7f43d1a1edd7c33aa941d.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Frequency__c__255.299519926e", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Frequency__c__255"], "alias": "source_length_check_curated_rs_37816e1071a7f43d1a1edd7c33aa941d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_37816e1071a7f43d1a1edd7c33aa941d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_37816e1071a7f43d1a1edd7c33aa941d"}, "created_at": 1688944882.391235, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_37816e1071a7f43d1a1edd7c33aa941d\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_37816e1071a7f43d1a1edd7c33aa941d.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Frequency__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Frequency__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Frequency__c__String.2e92dd9bbd": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Frequency__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Frequency__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_6fd3b107e383d98de2a5cecff00e9919.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Frequency__c__String.2e92dd9bbd", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Frequency__c__String"], "alias": "dbt_expectations_source_expect_6fd3b107e383d98de2a5cecff00e9919", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_6fd3b107e383d98de2a5cecff00e9919", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_6fd3b107e383d98de2a5cecff00e9919"}, "created_at": 1688944882.392983, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_6fd3b107e383d98de2a5cecff00e9919\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_6fd3b107e383d98de2a5cecff00e9919.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_FREQUENCY__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Frequency__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Front_Book_Back_Book__c__1300.d77f2ba7da": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 1300, "column_name": "CCS_Front_Book_Back_Book__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Front_Book_Back_Book__c__1300", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_f5083870191ed12fbc73c37324c34e99.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Front_Book_Back_Book__c__1300.d77f2ba7da", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Front_Book_Back_Book__c__1300"], "alias": "source_length_check_curated_rs_f5083870191ed12fbc73c37324c34e99", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_f5083870191ed12fbc73c37324c34e99", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_f5083870191ed12fbc73c37324c34e99"}, "created_at": 1688944882.394877, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_f5083870191ed12fbc73c37324c34e99\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_f5083870191ed12fbc73c37324c34e99.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Front_Book_Back_Book__c) > 1300\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Front_Book_Back_Book__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Front_Book_Back_Book__c__String.142378a61c": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Front_Book_Back_Book__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Front_Book_Back_Book__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_d4189b22db896915debefae96e24ff21.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Front_Book_Back_Book__c__String.142378a61c", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Front_Book_Back_Book__c__String"], "alias": "dbt_expectations_source_expect_d4189b22db896915debefae96e24ff21", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_d4189b22db896915debefae96e24ff21", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_d4189b22db896915debefae96e24ff21"}, "created_at": 1688944882.3964741, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_d4189b22db896915debefae96e24ff21\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_d4189b22db896915debefae96e24ff21.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_FRONT_BOOK_BACK_BOOK__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Front_Book_Back_Book__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Hard_Soft__c__1300.a59a422573": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 1300, "column_name": "CCS_Hard_Soft__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Hard_Soft__c__1300", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_d2e4a643199f4bedf085fc22993488af.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Hard_Soft__c__1300.a59a422573", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Hard_Soft__c__1300"], "alias": "source_length_check_curated_rs_d2e4a643199f4bedf085fc22993488af", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_d2e4a643199f4bedf085fc22993488af", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_d2e4a643199f4bedf085fc22993488af"}, "created_at": 1688944882.398409, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_d2e4a643199f4bedf085fc22993488af\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_d2e4a643199f4bedf085fc22993488af.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Hard_Soft__c) > 1300\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Hard_Soft__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Hard_Soft__c__String.fc57fab575": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Hard_Soft__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Hard_Soft__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_1b37294dc0ce1cd7d7d44903f01f70f3.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Hard_Soft__c__String.fc57fab575", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Hard_Soft__c__String"], "alias": "dbt_expectations_source_expect_1b37294dc0ce1cd7d7d44903f01f70f3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_1b37294dc0ce1cd7d7d44903f01f70f3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_1b37294dc0ce1cd7d7d44903f01f70f3"}, "created_at": 1688944882.400151, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_1b37294dc0ce1cd7d7d44903f01f70f3\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_1b37294dc0ce1cd7d7d44903f01f70f3.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_HARD_SOFT__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Hard_Soft__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Heritage__c__255.a718ac2091": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Heritage__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Heritage__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_998a7b8c11c114524ac15ab1101f1a08.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Heritage__c__255.a718ac2091", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Heritage__c__255"], "alias": "source_length_check_curated_rs_998a7b8c11c114524ac15ab1101f1a08", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_998a7b8c11c114524ac15ab1101f1a08", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_998a7b8c11c114524ac15ab1101f1a08"}, "created_at": 1688944882.4019709, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_998a7b8c11c114524ac15ab1101f1a08\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_998a7b8c11c114524ac15ab1101f1a08.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Heritage__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Heritage__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Heritage__c__String.0d4f83827b": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Heritage__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Heritage__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_7a088feb4b530335470509c3c688e362.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Heritage__c__String.0d4f83827b", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Heritage__c__String"], "alias": "dbt_expectations_source_expect_7a088feb4b530335470509c3c688e362", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_7a088feb4b530335470509c3c688e362", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_7a088feb4b530335470509c3c688e362"}, "created_at": 1688944882.4037051, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_7a088feb4b530335470509c3c688e362\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_7a088feb4b530335470509c3c688e362.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_HERITAGE__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Heritage__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_How_much_to_pay_off_each_month__c__255.3b75a715e7": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_How_much_to_pay_off_each_month__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_How_much_to_pay_off_each_month__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_a44aeb30d7629eaa8185148ef7f29c62.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_How_much_to_pay_off_each_month__c__255.3b75a715e7", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_How_much_to_pay_off_each_month__c__255"], "alias": "source_length_check_curated_rs_a44aeb30d7629eaa8185148ef7f29c62", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_a44aeb30d7629eaa8185148ef7f29c62", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_a44aeb30d7629eaa8185148ef7f29c62"}, "created_at": 1688944882.405622, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_a44aeb30d7629eaa8185148ef7f29c62\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_a44aeb30d7629eaa8185148ef7f29c62.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_How_much_to_pay_off_each_month__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_How_much_to_pay_off_each_month__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_How_much_to_pay_off_each_month__c__String.ffb7787124": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_How_much_to_pay_off_each_month__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_How_much_to_pay_off_each_month__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_74977c2289b8e2ef289640ac21780712.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_How_much_to_pay_off_each_month__c__String.ffb7787124", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_How_much_to_pay_off_each_month__c__String"], "alias": "dbt_expectations_source_expect_74977c2289b8e2ef289640ac21780712", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_74977c2289b8e2ef289640ac21780712", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_74977c2289b8e2ef289640ac21780712"}, "created_at": 1688944882.407238, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_74977c2289b8e2ef289640ac21780712\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_74977c2289b8e2ef289640ac21780712.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_HOW_MUCH_TO_PAY_OFF_EACH_MONTH__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_How_much_to_pay_off_each_month__c", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_Informed_Choice_Facility_Record__c.e084448330": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CCS_Informed_Choice_Facility_Record__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_facility_curated_CCS_Informed_Choice_Facility_Record__c", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_c611534c58ca7bf8077a30a744a5deb8.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_Informed_Choice_Facility_Record__c.e084448330", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_facility_curated_CCS_Informed_Choice_Facility_Record__c"], "alias": "source_not_null_curated_rskcsp_c611534c58ca7bf8077a30a744a5deb8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_c611534c58ca7bf8077a30a744a5deb8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_c611534c58ca7bf8077a30a744a5deb8"}, "created_at": 1688944882.409353, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_c611534c58ca7bf8077a30a744a5deb8\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_c611534c58ca7bf8077a30a744a5deb8.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CCS_Informed_Choice_Facility_Record__c\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nwhere CCS_Informed_Choice_Facility_Record__c is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Informed_Choice_Facility_Record__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type__c__255.8df4881148": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Interest_Rate_Type__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_d4af694d31983d8fea0896e0deef53f6.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type__c__255.8df4881148", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type__c__255"], "alias": "source_length_check_curated_rs_d4af694d31983d8fea0896e0deef53f6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_d4af694d31983d8fea0896e0deef53f6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_d4af694d31983d8fea0896e0deef53f6"}, "created_at": 1688944882.410101, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_d4af694d31983d8fea0896e0deef53f6\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_d4af694d31983d8fea0896e0deef53f6.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Interest_Rate_Type__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Interest_Rate_Type__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type__c__String.10fa9e2825": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Interest_Rate_Type__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_e5dd8101f6b9da1d9728474a3b22c274.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type__c__String.10fa9e2825", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type__c__String"], "alias": "dbt_expectations_source_expect_e5dd8101f6b9da1d9728474a3b22c274", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_e5dd8101f6b9da1d9728474a3b22c274", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_e5dd8101f6b9da1d9728474a3b22c274"}, "created_at": 1688944882.411853, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_e5dd8101f6b9da1d9728474a3b22c274\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_e5dd8101f6b9da1d9728474a3b22c274.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_INTEREST_RATE_TYPE__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Interest_Rate_Type__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_Greater50NonSplit__c__255.7011b03400": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Interest_Rate_Type_Greater50NonSplit__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_Greater50NonSplit__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_0b820a60a12d5a1d6232a0f414c42e7e.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_Greater50NonSplit__c__255.7011b03400", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_Greater50NonSplit__c__255"], "alias": "source_length_check_curated_rs_0b820a60a12d5a1d6232a0f414c42e7e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_0b820a60a12d5a1d6232a0f414c42e7e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_0b820a60a12d5a1d6232a0f414c42e7e"}, "created_at": 1688944882.413635, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_0b820a60a12d5a1d6232a0f414c42e7e\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_0b820a60a12d5a1d6232a0f414c42e7e.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Interest_Rate_Type_Greater50NonSplit__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Interest_Rate_Type_Greater50NonSplit__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_Greater50NonSplit__c__String.4b609c8ba3": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Interest_Rate_Type_Greater50NonSplit__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_Greater50NonSplit__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_016a60f905e89244d3c54267e54e1ea9.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_Greater50NonSplit__c__String.4b609c8ba3", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_Greater50NonSplit__c__String"], "alias": "dbt_expectations_source_expect_016a60f905e89244d3c54267e54e1ea9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_016a60f905e89244d3c54267e54e1ea9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_016a60f905e89244d3c54267e54e1ea9"}, "created_at": 1688944882.415367, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_016a60f905e89244d3c54267e54e1ea9\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_016a60f905e89244d3c54267e54e1ea9.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_INTEREST_RATE_TYPE_GREATER50NONSPLIT__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Interest_Rate_Type_Greater50NonSplit__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_Greater50Split__c__255.19e697d5c4": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Interest_Rate_Type_Greater50Split__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_Greater50Split__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_ae208ecb96a5a024dc4bf1966c1d889d.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_Greater50Split__c__255.19e697d5c4", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_Greater50Split__c__255"], "alias": "source_length_check_curated_rs_ae208ecb96a5a024dc4bf1966c1d889d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_ae208ecb96a5a024dc4bf1966c1d889d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_ae208ecb96a5a024dc4bf1966c1d889d"}, "created_at": 1688944882.4173, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_ae208ecb96a5a024dc4bf1966c1d889d\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_ae208ecb96a5a024dc4bf1966c1d889d.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Interest_Rate_Type_Greater50Split__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Interest_Rate_Type_Greater50Split__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_Greater50Split__c__String.69d8f73dd0": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Interest_Rate_Type_Greater50Split__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_Greater50Split__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_3131d8786fd7c7ec993b718ffa20f87e.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_Greater50Split__c__String.69d8f73dd0", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_Greater50Split__c__String"], "alias": "dbt_expectations_source_expect_3131d8786fd7c7ec993b718ffa20f87e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_3131d8786fd7c7ec993b718ffa20f87e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_3131d8786fd7c7ec993b718ffa20f87e"}, "created_at": 1688944882.4189172, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_3131d8786fd7c7ec993b718ffa20f87e\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_3131d8786fd7c7ec993b718ffa20f87e.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_INTEREST_RATE_TYPE_GREATER50SPLIT__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Interest_Rate_Type_Greater50Split__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_split__c__255.087bab44b7": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Interest_Rate_Type_split__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_split__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_7e2d5ef324720223dd8549bc651a810d.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_split__c__255.087bab44b7", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_split__c__255"], "alias": "source_length_check_curated_rs_7e2d5ef324720223dd8549bc651a810d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_7e2d5ef324720223dd8549bc651a810d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_7e2d5ef324720223dd8549bc651a810d"}, "created_at": 1688944882.420842, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_7e2d5ef324720223dd8549bc651a810d\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_7e2d5ef324720223dd8549bc651a810d.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Interest_Rate_Type_split__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Interest_Rate_Type_split__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_split__c__String.2c287c01e4": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Interest_Rate_Type_split__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_split__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_479cbedd5bea5ddbee2f330c9309176d.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_split__c__String.2c287c01e4", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_split__c__String"], "alias": "dbt_expectations_source_expect_479cbedd5bea5ddbee2f330c9309176d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_479cbedd5bea5ddbee2f330c9309176d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_479cbedd5bea5ddbee2f330c9309176d"}, "created_at": 1688944882.422444, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_479cbedd5bea5ddbee2f330c9309176d\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_479cbedd5bea5ddbee2f330c9309176d.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_INTEREST_RATE_TYPE_SPLIT__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Interest_Rate_Type_split__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Is_this_a_Temporary_Amendment__c__255.296f7c6b38": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Is_this_a_Temporary_Amendment__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Is_this_a_Temporary_Amendment__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_a2f1a0c4dcb3e66b5f615f71b58178bf.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Is_this_a_Temporary_Amendment__c__255.296f7c6b38", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Is_this_a_Temporary_Amendment__c__255"], "alias": "source_length_check_curated_rs_a2f1a0c4dcb3e66b5f615f71b58178bf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_a2f1a0c4dcb3e66b5f615f71b58178bf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_a2f1a0c4dcb3e66b5f615f71b58178bf"}, "created_at": 1688944882.424383, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_a2f1a0c4dcb3e66b5f615f71b58178bf\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_a2f1a0c4dcb3e66b5f615f71b58178bf.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Is_this_a_Temporary_Amendment__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Is_this_a_Temporary_Amendment__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Is_this_a_Temporary_Amendment__c__String.af1841a1ae": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Is_this_a_Temporary_Amendment__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Is_this_a_Temporary_Amendment__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_f22a56892117bf306537ff0751f41138.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Is_this_a_Temporary_Amendment__c__String.af1841a1ae", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Is_this_a_Temporary_Amendment__c__String"], "alias": "dbt_expectations_source_expect_f22a56892117bf306537ff0751f41138", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_f22a56892117bf306537ff0751f41138", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_f22a56892117bf306537ff0751f41138"}, "created_at": 1688944882.426107, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_f22a56892117bf306537ff0751f41138\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_f22a56892117bf306537ff0751f41138.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_IS_THIS_A_TEMPORARY_AMENDMENT__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Is_this_a_Temporary_Amendment__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Is_this_Facility_LBCM__c__255.08755fc57b": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Is_this_Facility_LBCM__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Is_this_Facility_LBCM__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_a6e893972a96078287af4b7feb5973a5.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Is_this_Facility_LBCM__c__255.08755fc57b", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Is_this_Facility_LBCM__c__255"], "alias": "source_length_check_curated_rs_a6e893972a96078287af4b7feb5973a5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_a6e893972a96078287af4b7feb5973a5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_a6e893972a96078287af4b7feb5973a5"}, "created_at": 1688944882.4278982, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_a6e893972a96078287af4b7feb5973a5\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_a6e893972a96078287af4b7feb5973a5.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Is_this_Facility_LBCM__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Is_this_Facility_LBCM__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Is_this_Facility_LBCM__c__String.2cf535f1b7": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Is_this_Facility_LBCM__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Is_this_Facility_LBCM__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_65c6f1abec3acf6e6abe449c28b4f9f4.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Is_this_Facility_LBCM__c__String.2cf535f1b7", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Is_this_Facility_LBCM__c__String"], "alias": "dbt_expectations_source_expect_65c6f1abec3acf6e6abe449c28b4f9f4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_65c6f1abec3acf6e6abe449c28b4f9f4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_65c6f1abec3acf6e6abe449c28b4f9f4"}, "created_at": 1688944882.429641, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_65c6f1abec3acf6e6abe449c28b4f9f4\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_65c6f1abec3acf6e6abe449c28b4f9f4.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_IS_THIS_FACILITY_LBCM__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Is_this_Facility_LBCM__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Journey__c__1300.71c778add8": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 1300, "column_name": "CCS_Journey__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Journey__c__1300", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_7035fec5a2ea540fa21965edcc6782ad.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Journey__c__1300.71c778add8", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Journey__c__1300"], "alias": "source_length_check_curated_rs_7035fec5a2ea540fa21965edcc6782ad", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_7035fec5a2ea540fa21965edcc6782ad", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_7035fec5a2ea540fa21965edcc6782ad"}, "created_at": 1688944882.431539, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_7035fec5a2ea540fa21965edcc6782ad\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_7035fec5a2ea540fa21965edcc6782ad.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Journey__c) > 1300\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Journey__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Journey__c__String.43e26dfbdb": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Journey__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Journey__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_f6ef5491419fd5cf9244c793c4c6a31a.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Journey__c__String.43e26dfbdb", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Journey__c__String"], "alias": "dbt_expectations_source_expect_f6ef5491419fd5cf9244c793c4c6a31a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_f6ef5491419fd5cf9244c793c4c6a31a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_f6ef5491419fd5cf9244c793c4c6a31a"}, "created_at": 1688944882.433126, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_f6ef5491419fd5cf9244c793c4c6a31a\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_f6ef5491419fd5cf9244c793c4c6a31a.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_JOURNEY__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Journey__c", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_LBCM_Facility_Validation__c.2f9371516d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CCS_LBCM_Facility_Validation__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_facility_curated_CCS_LBCM_Facility_Validation__c", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_fdf7cf6a02b3640e40a0e8b3e9edf2a0.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_LBCM_Facility_Validation__c.2f9371516d", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_facility_curated_CCS_LBCM_Facility_Validation__c"], "alias": "source_not_null_curated_rskcsp_fdf7cf6a02b3640e40a0e8b3e9edf2a0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_fdf7cf6a02b3640e40a0e8b3e9edf2a0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_fdf7cf6a02b3640e40a0e8b3e9edf2a0"}, "created_at": 1688944882.435055, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_fdf7cf6a02b3640e40a0e8b3e9edf2a0\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_fdf7cf6a02b3640e40a0e8b3e9edf2a0.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CCS_LBCM_Facility_Validation__c\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nwhere CCS_LBCM_Facility_Validation__c is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_LBCM_Facility_Validation__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Limit_Indicator__c__1300.8a2df6e011": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 1300, "column_name": "CCS_Limit_Indicator__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Limit_Indicator__c__1300", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_ce7ad6f249f647d6095996d0491bd987.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Limit_Indicator__c__1300.8a2df6e011", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Limit_Indicator__c__1300"], "alias": "source_length_check_curated_rs_ce7ad6f249f647d6095996d0491bd987", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_ce7ad6f249f647d6095996d0491bd987", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_ce7ad6f249f647d6095996d0491bd987"}, "created_at": 1688944882.4358048, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_ce7ad6f249f647d6095996d0491bd987\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_ce7ad6f249f647d6095996d0491bd987.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Limit_Indicator__c) > 1300\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Limit_Indicator__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Limit_Indicator__c__String.ef7533dd95": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Limit_Indicator__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Limit_Indicator__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_3de225dcf417fee6e094c70dcd13eb04.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Limit_Indicator__c__String.ef7533dd95", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Limit_Indicator__c__String"], "alias": "dbt_expectations_source_expect_3de225dcf417fee6e094c70dcd13eb04", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_3de225dcf417fee6e094c70dcd13eb04", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_3de225dcf417fee6e094c70dcd13eb04"}, "created_at": 1688944882.437581, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_3de225dcf417fee6e094c70dcd13eb04\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_3de225dcf417fee6e094c70dcd13eb04.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_LIMIT_INDICATOR__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Limit_Indicator__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Limit_Type__c__255.39c3078899": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Limit_Type__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Limit_Type__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_66e1adeb93374f232fd33e4c60ce6dcb.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Limit_Type__c__255.39c3078899", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Limit_Type__c__255"], "alias": "source_length_check_curated_rs_66e1adeb93374f232fd33e4c60ce6dcb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_66e1adeb93374f232fd33e4c60ce6dcb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_66e1adeb93374f232fd33e4c60ce6dcb"}, "created_at": 1688944882.439502, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_66e1adeb93374f232fd33e4c60ce6dcb\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_66e1adeb93374f232fd33e4c60ce6dcb.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Limit_Type__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Limit_Type__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Limit_Type__c__String.21bfc38166": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Limit_Type__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Limit_Type__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_1e0444d6fe7eca47600812ffe69dde20.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Limit_Type__c__String.21bfc38166", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Limit_Type__c__String"], "alias": "dbt_expectations_source_expect_1e0444d6fe7eca47600812ffe69dde20", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_1e0444d6fe7eca47600812ffe69dde20", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_1e0444d6fe7eca47600812ffe69dde20"}, "created_at": 1688944882.441111, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_1e0444d6fe7eca47600812ffe69dde20\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_1e0444d6fe7eca47600812ffe69dde20.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_LIMIT_TYPE__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Limit_Type__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Link__c__1300.61d2aa5796": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 1300, "column_name": "CCS_Link__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Link__c__1300", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_e420de07e323a3b55dd0690f1bf5361d.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Link__c__1300.61d2aa5796", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Link__c__1300"], "alias": "source_length_check_curated_rs_e420de07e323a3b55dd0690f1bf5361d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_e420de07e323a3b55dd0690f1bf5361d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_e420de07e323a3b55dd0690f1bf5361d"}, "created_at": 1688944882.443273, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_e420de07e323a3b55dd0690f1bf5361d\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_e420de07e323a3b55dd0690f1bf5361d.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Link__c) > 1300\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Link__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Link__c__String.d17762a3f7": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Link__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Link__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_416539cd80aa6649cb988cc5d32a162e.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Link__c__String.d17762a3f7", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Link__c__String"], "alias": "dbt_expectations_source_expect_416539cd80aa6649cb988cc5d32a162e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_416539cd80aa6649cb988cc5d32a162e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_416539cd80aa6649cb988cc5d32a162e"}, "created_at": 1688944882.4448462, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_416539cd80aa6649cb988cc5d32a162e\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_416539cd80aa6649cb988cc5d32a162e.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_LINK__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Link__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Loan_Repayment_Profile__c__255.1efef69ecd": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Loan_Repayment_Profile__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Loan_Repayment_Profile__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_998dd6d5cd7d89c75f4aaa2927e54798.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Loan_Repayment_Profile__c__255.1efef69ecd", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Loan_Repayment_Profile__c__255"], "alias": "source_length_check_curated_rs_998dd6d5cd7d89c75f4aaa2927e54798", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_998dd6d5cd7d89c75f4aaa2927e54798", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_998dd6d5cd7d89c75f4aaa2927e54798"}, "created_at": 1688944882.4467561, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_998dd6d5cd7d89c75f4aaa2927e54798\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_998dd6d5cd7d89c75f4aaa2927e54798.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Loan_Repayment_Profile__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Loan_Repayment_Profile__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Loan_Repayment_Profile__c__String.0d6937a6f5": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Loan_Repayment_Profile__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Loan_Repayment_Profile__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_22eda05705edfdb9782dd1c908ded088.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Loan_Repayment_Profile__c__String.0d6937a6f5", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Loan_Repayment_Profile__c__String"], "alias": "dbt_expectations_source_expect_22eda05705edfdb9782dd1c908ded088", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_22eda05705edfdb9782dd1c908ded088", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_22eda05705edfdb9782dd1c908ded088"}, "created_at": 1688944882.4484951, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_22eda05705edfdb9782dd1c908ded088\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_22eda05705edfdb9782dd1c908ded088.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_LOAN_REPAYMENT_PROFILE__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Loan_Repayment_Profile__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Max_period_for_each_FX_contract__c__255.1708a8378a": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Max_period_for_each_FX_contract__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Max_period_for_each_FX_contract__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_a6fed58e8d55ff1e952e7c6fa58b82ef.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Max_period_for_each_FX_contract__c__255.1708a8378a", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Max_period_for_each_FX_contract__c__255"], "alias": "source_length_check_curated_rs_a6fed58e8d55ff1e952e7c6fa58b82ef", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_a6fed58e8d55ff1e952e7c6fa58b82ef", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_a6fed58e8d55ff1e952e7c6fa58b82ef"}, "created_at": 1688944882.450277, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_a6fed58e8d55ff1e952e7c6fa58b82ef\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_a6fed58e8d55ff1e952e7c6fa58b82ef.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Max_period_for_each_FX_contract__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Max_period_for_each_FX_contract__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Max_period_for_each_FX_contract__c__String.8870a3fd50": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Max_period_for_each_FX_contract__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Max_period_for_each_FX_contract__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_0408157cf96b95595e11085b2e79ce6e.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Max_period_for_each_FX_contract__c__String.8870a3fd50", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Max_period_for_each_FX_contract__c__String"], "alias": "dbt_expectations_source_expect_0408157cf96b95595e11085b2e79ce6e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_0408157cf96b95595e11085b2e79ce6e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_0408157cf96b95595e11085b2e79ce6e"}, "created_at": 1688944882.4520261, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_0408157cf96b95595e11085b2e79ce6e\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_0408157cf96b95595e11085b2e79ce6e.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_MAX_PERIOD_FOR_EACH_FX_CONTRACT__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Max_period_for_each_FX_contract__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_MoneyOutExtractionIntended__c__255.583641302b": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_MoneyOutExtractionIntended__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_MoneyOutExtractionIntended__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_3e0029b0c3f3068338779585bd7e4144.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_MoneyOutExtractionIntended__c__255.583641302b", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_MoneyOutExtractionIntended__c__255"], "alias": "source_length_check_curated_rs_3e0029b0c3f3068338779585bd7e4144", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_3e0029b0c3f3068338779585bd7e4144", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_3e0029b0c3f3068338779585bd7e4144"}, "created_at": 1688944882.4539268, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_3e0029b0c3f3068338779585bd7e4144\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_3e0029b0c3f3068338779585bd7e4144.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_MoneyOutExtractionIntended__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_MoneyOutExtractionIntended__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_MoneyOutExtractionIntended__c__String.dde58678c1": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_MoneyOutExtractionIntended__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_MoneyOutExtractionIntended__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_99359b7a6acc251bb1d448965f5990e7.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_MoneyOutExtractionIntended__c__String.dde58678c1", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_MoneyOutExtractionIntended__c__String"], "alias": "dbt_expectations_source_expect_99359b7a6acc251bb1d448965f5990e7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_99359b7a6acc251bb1d448965f5990e7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_99359b7a6acc251bb1d448965f5990e7"}, "created_at": 1688944882.455518, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_99359b7a6acc251bb1d448965f5990e7\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_99359b7a6acc251bb1d448965f5990e7.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_MONEYOUTEXTRACTIONINTENDED__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_MoneyOutExtractionIntended__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_ODType__c__255.10a7240c92": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_ODType__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_ODType__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_7df570797d8f001fe49746159c042969.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_ODType__c__255.10a7240c92", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_ODType__c__255"], "alias": "source_length_check_curated_rs_7df570797d8f001fe49746159c042969", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_7df570797d8f001fe49746159c042969", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_7df570797d8f001fe49746159c042969"}, "created_at": 1688944882.457451, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_7df570797d8f001fe49746159c042969\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_7df570797d8f001fe49746159c042969.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_ODType__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_ODType__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_ODType__c__String.99f2bb1f87": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_ODType__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_ODType__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_c8af9ce5a2413b68e7188276c18c7fee.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_ODType__c__String.99f2bb1f87", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_ODType__c__String"], "alias": "dbt_expectations_source_expect_c8af9ce5a2413b68e7188276c18c7fee", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_c8af9ce5a2413b68e7188276c18c7fee", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_c8af9ce5a2413b68e7188276c18c7fee"}, "created_at": 1688944882.459189, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_c8af9ce5a2413b68e7188276c18c7fee\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_c8af9ce5a2413b68e7188276c18c7fee.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_ODTYPE__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_ODType__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Overdraft_Limit_Type__c__255.3faaa9002d": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Overdraft_Limit_Type__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Overdraft_Limit_Type__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_d3ed2bc772a289d2b84df2c1c20860e4.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Overdraft_Limit_Type__c__255.3faaa9002d", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Overdraft_Limit_Type__c__255"], "alias": "source_length_check_curated_rs_d3ed2bc772a289d2b84df2c1c20860e4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_d3ed2bc772a289d2b84df2c1c20860e4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_d3ed2bc772a289d2b84df2c1c20860e4"}, "created_at": 1688944882.460992, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_d3ed2bc772a289d2b84df2c1c20860e4\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_d3ed2bc772a289d2b84df2c1c20860e4.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Overdraft_Limit_Type__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Overdraft_Limit_Type__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Overdraft_Limit_Type__c__String.fc1e9ed103": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Overdraft_Limit_Type__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Overdraft_Limit_Type__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_9afb6bd87155d94f8e1ffebe3f4775b1.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Overdraft_Limit_Type__c__String.fc1e9ed103", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Overdraft_Limit_Type__c__String"], "alias": "dbt_expectations_source_expect_9afb6bd87155d94f8e1ffebe3f4775b1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_9afb6bd87155d94f8e1ffebe3f4775b1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_9afb6bd87155d94f8e1ffebe3f4775b1"}, "created_at": 1688944882.4627259, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_9afb6bd87155d94f8e1ffebe3f4775b1\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_9afb6bd87155d94f8e1ffebe3f4775b1.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_OVERDRAFT_LIMIT_TYPE__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Overdraft_Limit_Type__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Overdraft_Request_Type__c__255.c37bccad07": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Overdraft_Request_Type__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Overdraft_Request_Type__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_e0dbdd40c1eff3a51469c0cb929416ec.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Overdraft_Request_Type__c__255.c37bccad07", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Overdraft_Request_Type__c__255"], "alias": "source_length_check_curated_rs_e0dbdd40c1eff3a51469c0cb929416ec", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_e0dbdd40c1eff3a51469c0cb929416ec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_e0dbdd40c1eff3a51469c0cb929416ec"}, "created_at": 1688944882.464681, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_e0dbdd40c1eff3a51469c0cb929416ec\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_e0dbdd40c1eff3a51469c0cb929416ec.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Overdraft_Request_Type__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Overdraft_Request_Type__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Overdraft_Request_Type__c__String.0bd2257ebb": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Overdraft_Request_Type__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Overdraft_Request_Type__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_1372fa6726f4da25075c3154702a1446.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Overdraft_Request_Type__c__String.0bd2257ebb", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Overdraft_Request_Type__c__String"], "alias": "dbt_expectations_source_expect_1372fa6726f4da25075c3154702a1446", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_1372fa6726f4da25075c3154702a1446", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_1372fa6726f4da25075c3154702a1446"}, "created_at": 1688944882.4663029, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_1372fa6726f4da25075c3154702a1446\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_1372fa6726f4da25075c3154702a1446.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_OVERDRAFT_REQUEST_TYPE__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Overdraft_Request_Type__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Partially_Amortising_Loan_Type__c__255.76a8fbd696": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Partially_Amortising_Loan_Type__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Partially_Amortising_Loan_Type__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_f9b300dc5583c7374243c05c0a446eb1.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Partially_Amortising_Loan_Type__c__255.76a8fbd696", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Partially_Amortising_Loan_Type__c__255"], "alias": "source_length_check_curated_rs_f9b300dc5583c7374243c05c0a446eb1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_f9b300dc5583c7374243c05c0a446eb1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_f9b300dc5583c7374243c05c0a446eb1"}, "created_at": 1688944882.468231, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_f9b300dc5583c7374243c05c0a446eb1\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_f9b300dc5583c7374243c05c0a446eb1.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Partially_Amortising_Loan_Type__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Partially_Amortising_Loan_Type__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Partially_Amortising_Loan_Type__c__String.dc5c062d31": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Partially_Amortising_Loan_Type__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Partially_Amortising_Loan_Type__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_989bd2a4e7c595c93f8c27c4df9c61e2.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Partially_Amortising_Loan_Type__c__String.dc5c062d31", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Partially_Amortising_Loan_Type__c__String"], "alias": "dbt_expectations_source_expect_989bd2a4e7c595c93f8c27c4df9c61e2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_989bd2a4e7c595c93f8c27c4df9c61e2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_989bd2a4e7c595c93f8c27c4df9c61e2"}, "created_at": 1688944882.469839, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_989bd2a4e7c595c93f8c27c4df9c61e2\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_989bd2a4e7c595c93f8c27c4df9c61e2.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_PARTIALLY_AMORTISING_LOAN_TYPE__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Partially_Amortising_Loan_Type__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Pricing_Product__c__255.8a2217e69b": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Pricing_Product__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Pricing_Product__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_afe9998f30ef3c6d511cb3b12b451d03.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Pricing_Product__c__255.8a2217e69b", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Pricing_Product__c__255"], "alias": "source_length_check_curated_rs_afe9998f30ef3c6d511cb3b12b451d03", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_afe9998f30ef3c6d511cb3b12b451d03", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_afe9998f30ef3c6d511cb3b12b451d03"}, "created_at": 1688944882.471777, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_afe9998f30ef3c6d511cb3b12b451d03\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_afe9998f30ef3c6d511cb3b12b451d03.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Pricing_Product__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Pricing_Product__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Pricing_Product__c__String.37c8fea05f": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Pricing_Product__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Pricing_Product__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_3df6b8f8907bcbebb1b01948dba36aa8.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Pricing_Product__c__String.37c8fea05f", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Pricing_Product__c__String"], "alias": "dbt_expectations_source_expect_3df6b8f8907bcbebb1b01948dba36aa8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_3df6b8f8907bcbebb1b01948dba36aa8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_3df6b8f8907bcbebb1b01948dba36aa8"}, "created_at": 1688944882.4735, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_3df6b8f8907bcbebb1b01948dba36aa8\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_3df6b8f8907bcbebb1b01948dba36aa8.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_PRICING_PRODUCT__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Pricing_Product__c", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_Product_Approval_Rendering__c.2aaab996dd": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CCS_Product_Approval_Rendering__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_facility_curated_CCS_Product_Approval_Rendering__c", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_50ef8540e8b521dd9444663acfd305c6.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_Product_Approval_Rendering__c.2aaab996dd", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_facility_curated_CCS_Product_Approval_Rendering__c"], "alias": "source_not_null_curated_rskcsp_50ef8540e8b521dd9444663acfd305c6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_50ef8540e8b521dd9444663acfd305c6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_50ef8540e8b521dd9444663acfd305c6"}, "created_at": 1688944882.475281, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_50ef8540e8b521dd9444663acfd305c6\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_50ef8540e8b521dd9444663acfd305c6.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CCS_Product_Approval_Rendering__c\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nwhere CCS_Product_Approval_Rendering__c is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Product_Approval_Rendering__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Product_Rationale__c__120000.f10ac47312": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 120000, "column_name": "CCS_Product_Rationale__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Product_Rationale__c__120000", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_3d69654fd34a6f9fe28494bd55c56f08.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Product_Rationale__c__120000.f10ac47312", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Product_Rationale__c__120000"], "alias": "source_length_check_curated_rs_3d69654fd34a6f9fe28494bd55c56f08", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_3d69654fd34a6f9fe28494bd55c56f08", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_3d69654fd34a6f9fe28494bd55c56f08"}, "created_at": 1688944882.476434, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_3d69654fd34a6f9fe28494bd55c56f08\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_3d69654fd34a6f9fe28494bd55c56f08.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Product_Rationale__c) > 120000\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Product_Rationale__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Product_Rationale__c__String.1bf32de657": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Product_Rationale__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Product_Rationale__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_6ceac4ace7f946cfe37b16f50322632a.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Product_Rationale__c__String.1bf32de657", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Product_Rationale__c__String"], "alias": "dbt_expectations_source_expect_6ceac4ace7f946cfe37b16f50322632a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_6ceac4ace7f946cfe37b16f50322632a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_6ceac4ace7f946cfe37b16f50322632a"}, "created_at": 1688944882.478045, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_6ceac4ace7f946cfe37b16f50322632a\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_6ceac4ace7f946cfe37b16f50322632a.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_PRODUCT_RATIONALE__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Product_Rationale__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Provide_Comparative_quote__c__255.a7b1c44f31": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Provide_Comparative_quote__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Provide_Comparative_quote__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_b6bf0b2bb85d0b8be66fb863ad6b25c6.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Provide_Comparative_quote__c__255.a7b1c44f31", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Provide_Comparative_quote__c__255"], "alias": "source_length_check_curated_rs_b6bf0b2bb85d0b8be66fb863ad6b25c6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_b6bf0b2bb85d0b8be66fb863ad6b25c6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_b6bf0b2bb85d0b8be66fb863ad6b25c6"}, "created_at": 1688944882.479955, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_b6bf0b2bb85d0b8be66fb863ad6b25c6\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_b6bf0b2bb85d0b8be66fb863ad6b25c6.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Provide_Comparative_quote__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Provide_Comparative_quote__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Provide_Comparative_quote__c__String.80d3f9afe4": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Provide_Comparative_quote__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Provide_Comparative_quote__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_c81d630f98928ebdeaabfff422017b41.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Provide_Comparative_quote__c__String.80d3f9afe4", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Provide_Comparative_quote__c__String"], "alias": "dbt_expectations_source_expect_c81d630f98928ebdeaabfff422017b41", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_c81d630f98928ebdeaabfff422017b41", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_c81d630f98928ebdeaabfff422017b41"}, "created_at": 1688944882.4815402, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_c81d630f98928ebdeaabfff422017b41\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_c81d630f98928ebdeaabfff422017b41.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_PROVIDE_COMPARATIVE_QUOTE__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Provide_Comparative_quote__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Purpose__c__255.74a387a737": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Purpose__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Purpose__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_ab172acf18fca6fc27811d1b5b5e0673.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Purpose__c__255.74a387a737", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Purpose__c__255"], "alias": "source_length_check_curated_rs_ab172acf18fca6fc27811d1b5b5e0673", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_ab172acf18fca6fc27811d1b5b5e0673", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_ab172acf18fca6fc27811d1b5b5e0673"}, "created_at": 1688944882.483469, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_ab172acf18fca6fc27811d1b5b5e0673\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_ab172acf18fca6fc27811d1b5b5e0673.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Purpose__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Purpose__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Purpose__c__String.63090fa4b7": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Purpose__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Purpose__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_b1eb8e812dfe82447809756d0058943f.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Purpose__c__String.63090fa4b7", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Purpose__c__String"], "alias": "dbt_expectations_source_expect_b1eb8e812dfe82447809756d0058943f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_b1eb8e812dfe82447809756d0058943f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_b1eb8e812dfe82447809756d0058943f"}, "created_at": 1688944882.48519, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_b1eb8e812dfe82447809756d0058943f\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_b1eb8e812dfe82447809756d0058943f.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_PURPOSE__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Purpose__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Repayment_Frequency__c__255.f41061aab0": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Repayment_Frequency__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Repayment_Frequency__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_c78ba9edc49d1eaddbe3c2bc03f54017.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Repayment_Frequency__c__255.f41061aab0", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Repayment_Frequency__c__255"], "alias": "source_length_check_curated_rs_c78ba9edc49d1eaddbe3c2bc03f54017", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_c78ba9edc49d1eaddbe3c2bc03f54017", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_c78ba9edc49d1eaddbe3c2bc03f54017"}, "created_at": 1688944882.4869618, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_c78ba9edc49d1eaddbe3c2bc03f54017\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_c78ba9edc49d1eaddbe3c2bc03f54017.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Repayment_Frequency__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Repayment_Frequency__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Repayment_Frequency__c__String.ac28580a87": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Repayment_Frequency__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Repayment_Frequency__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_cd8c6006b8c7cf689fa7458e35c8898a.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Repayment_Frequency__c__String.ac28580a87", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Repayment_Frequency__c__String"], "alias": "dbt_expectations_source_expect_cd8c6006b8c7cf689fa7458e35c8898a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_cd8c6006b8c7cf689fa7458e35c8898a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_cd8c6006b8c7cf689fa7458e35c8898a"}, "created_at": 1688944882.488708, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_cd8c6006b8c7cf689fa7458e35c8898a\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_cd8c6006b8c7cf689fa7458e35c8898a.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_REPAYMENT_FREQUENCY__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Repayment_Frequency__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_RightOfWithdrawalConfirmed__c__255.705eb4d948": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_RightOfWithdrawalConfirmed__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_RightOfWithdrawalConfirmed__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_7219ea950b1e3bebba659b465ffb1aa7.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_RightOfWithdrawalConfirmed__c__255.705eb4d948", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_RightOfWithdrawalConfirmed__c__255"], "alias": "source_length_check_curated_rs_7219ea950b1e3bebba659b465ffb1aa7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_7219ea950b1e3bebba659b465ffb1aa7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_7219ea950b1e3bebba659b465ffb1aa7"}, "created_at": 1688944882.490614, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_7219ea950b1e3bebba659b465ffb1aa7\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_7219ea950b1e3bebba659b465ffb1aa7.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_RightOfWithdrawalConfirmed__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_RightOfWithdrawalConfirmed__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_RightOfWithdrawalConfirmed__c__String.647a9834f7": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_RightOfWithdrawalConfirmed__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_RightOfWithdrawalConfirmed__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_5ccf70076b7b7ce33c9558f537463c98.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_RightOfWithdrawalConfirmed__c__String.647a9834f7", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_RightOfWithdrawalConfirmed__c__String"], "alias": "dbt_expectations_source_expect_5ccf70076b7b7ce33c9558f537463c98", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_5ccf70076b7b7ce33c9558f537463c98", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_5ccf70076b7b7ce33c9558f537463c98"}, "created_at": 1688944882.49219, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_5ccf70076b7b7ce33c9558f537463c98\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_5ccf70076b7b7ce33c9558f537463c98.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_RIGHTOFWITHDRAWALCONFIRMED__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_RightOfWithdrawalConfirmed__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Sector__c__255.6d7005cdad": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Sector__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Sector__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_ce3907fdd0a53107b88cbd51d8f5dddb.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Sector__c__255.6d7005cdad", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Sector__c__255"], "alias": "source_length_check_curated_rs_ce3907fdd0a53107b88cbd51d8f5dddb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_ce3907fdd0a53107b88cbd51d8f5dddb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_ce3907fdd0a53107b88cbd51d8f5dddb"}, "created_at": 1688944882.494123, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_ce3907fdd0a53107b88cbd51d8f5dddb\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_ce3907fdd0a53107b88cbd51d8f5dddb.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Sector__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Sector__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Sector__c__String.de36ed3b94": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Sector__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Sector__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_447490a65a1bc238ec8d12c337eb70da.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Sector__c__String.de36ed3b94", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Sector__c__String"], "alias": "dbt_expectations_source_expect_447490a65a1bc238ec8d12c337eb70da", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_447490a65a1bc238ec8d12c337eb70da", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_447490a65a1bc238ec8d12c337eb70da"}, "created_at": 1688944882.495925, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_447490a65a1bc238ec8d12c337eb70da\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_447490a65a1bc238ec8d12c337eb70da.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_SECTOR__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Sector__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Security__c__255.03e9e9294d": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Security__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Security__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_d4199a7ad220c8d638d30e1089ac3a1b.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Security__c__255.03e9e9294d", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Security__c__255"], "alias": "source_length_check_curated_rs_d4199a7ad220c8d638d30e1089ac3a1b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_d4199a7ad220c8d638d30e1089ac3a1b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_d4199a7ad220c8d638d30e1089ac3a1b"}, "created_at": 1688944882.497725, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_d4199a7ad220c8d638d30e1089ac3a1b\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_d4199a7ad220c8d638d30e1089ac3a1b.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Security__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Security__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Security__c__String.907cfb2b60": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Security__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Security__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_1b97ee5ac590144baf38d012d47987d2.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Security__c__String.907cfb2b60", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Security__c__String"], "alias": "dbt_expectations_source_expect_1b97ee5ac590144baf38d012d47987d2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_1b97ee5ac590144baf38d012d47987d2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_1b97ee5ac590144baf38d012d47987d2"}, "created_at": 1688944882.499451, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_1b97ee5ac590144baf38d012d47987d2\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_1b97ee5ac590144baf38d012d47987d2.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_SECURITY__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Security__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Send_quote_to_client_before_sanction__c__255.deab12c9c4": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Send_quote_to_client_before_sanction__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Send_quote_to_client_before_sanction__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_1bec0b0404b362fec6de7a494eb51ef5.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Send_quote_to_client_before_sanction__c__255.deab12c9c4", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Send_quote_to_client_before_sanction__c__255"], "alias": "source_length_check_curated_rs_1bec0b0404b362fec6de7a494eb51ef5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_1bec0b0404b362fec6de7a494eb51ef5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_1bec0b0404b362fec6de7a494eb51ef5"}, "created_at": 1688944882.501395, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_1bec0b0404b362fec6de7a494eb51ef5\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_1bec0b0404b362fec6de7a494eb51ef5.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Send_quote_to_client_before_sanction__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Send_quote_to_client_before_sanction__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Send_quote_to_client_before_sanction__c__String.644b4d14a6": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Send_quote_to_client_before_sanction__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Send_quote_to_client_before_sanction__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_8a06abaa913a7ddfbdefe2d1a2f47ba1.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Send_quote_to_client_before_sanction__c__String.644b4d14a6", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Send_quote_to_client_before_sanction__c__String"], "alias": "dbt_expectations_source_expect_8a06abaa913a7ddfbdefe2d1a2f47ba1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_8a06abaa913a7ddfbdefe2d1a2f47ba1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_8a06abaa913a7ddfbdefe2d1a2f47ba1"}, "created_at": 1688944882.5029938, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_8a06abaa913a7ddfbdefe2d1a2f47ba1\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_8a06abaa913a7ddfbdefe2d1a2f47ba1.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_SEND_QUOTE_TO_CLIENT_BEFORE_SANCTION__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Send_quote_to_client_before_sanction__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Set_up_a_direct_debit_to_manage__c__255.bbfedc3b8d": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Set_up_a_direct_debit_to_manage__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Set_up_a_direct_debit_to_manage__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_c2a2ff7c49d086167bb6735f97dcfe40.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Set_up_a_direct_debit_to_manage__c__255.bbfedc3b8d", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Set_up_a_direct_debit_to_manage__c__255"], "alias": "source_length_check_curated_rs_c2a2ff7c49d086167bb6735f97dcfe40", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_c2a2ff7c49d086167bb6735f97dcfe40", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_c2a2ff7c49d086167bb6735f97dcfe40"}, "created_at": 1688944882.504906, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_c2a2ff7c49d086167bb6735f97dcfe40\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_c2a2ff7c49d086167bb6735f97dcfe40.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Set_up_a_direct_debit_to_manage__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Set_up_a_direct_debit_to_manage__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Set_up_a_direct_debit_to_manage__c__String.0df949dc9f": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Set_up_a_direct_debit_to_manage__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Set_up_a_direct_debit_to_manage__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_9e07d3c1b10d51a901b99f02926b3d4f.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Set_up_a_direct_debit_to_manage__c__String.0df949dc9f", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Set_up_a_direct_debit_to_manage__c__String"], "alias": "dbt_expectations_source_expect_9e07d3c1b10d51a901b99f02926b3d4f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_9e07d3c1b10d51a901b99f02926b3d4f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_9e07d3c1b10d51a901b99f02926b3d4f"}, "created_at": 1688944882.506508, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_9e07d3c1b10d51a901b99f02926b3d4f\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_9e07d3c1b10d51a901b99f02926b3d4f.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_SET_UP_A_DIRECT_DEBIT_TO_MANAGE__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Set_up_a_direct_debit_to_manage__c", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_SetUpDisplayRatesActionProfiles__c.f1cf2a0d68": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CCS_SetUpDisplayRatesActionProfiles__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_facility_curated_CCS_SetUpDisplayRatesActionProfiles__c", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_a8b19d607cb67b75b4bf7dcbe75c401c.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_SetUpDisplayRatesActionProfiles__c.f1cf2a0d68", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_facility_curated_CCS_SetUpDisplayRatesActionProfiles__c"], "alias": "source_not_null_curated_rskcsp_a8b19d607cb67b75b4bf7dcbe75c401c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_a8b19d607cb67b75b4bf7dcbe75c401c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_a8b19d607cb67b75b4bf7dcbe75c401c"}, "created_at": 1688944882.508436, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_a8b19d607cb67b75b4bf7dcbe75c401c\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_a8b19d607cb67b75b4bf7dcbe75c401c.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CCS_SetUpDisplayRatesActionProfiles__c\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nwhere CCS_SetUpDisplayRatesActionProfiles__c is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_SetUpDisplayRatesActionProfiles__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Signatory_1__c__18.20b7323cac": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "CCS_Signatory_1__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Signatory_1__c__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_2487eefcf49010a37dcbc81190728ee6.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Signatory_1__c__18.20b7323cac", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Signatory_1__c__18"], "alias": "source_length_check_curated_rs_2487eefcf49010a37dcbc81190728ee6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_2487eefcf49010a37dcbc81190728ee6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_2487eefcf49010a37dcbc81190728ee6"}, "created_at": 1688944882.509183, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_2487eefcf49010a37dcbc81190728ee6\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_2487eefcf49010a37dcbc81190728ee6.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Signatory_1__c) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Signatory_1__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Signatory_1__c__String.39525eea71": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Signatory_1__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Signatory_1__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_da6d34b6fa8152a0f868c9a2da5ef82e.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Signatory_1__c__String.39525eea71", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Signatory_1__c__String"], "alias": "dbt_expectations_source_expect_da6d34b6fa8152a0f868c9a2da5ef82e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_da6d34b6fa8152a0f868c9a2da5ef82e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_da6d34b6fa8152a0f868c9a2da5ef82e"}, "created_at": 1688944882.5111601, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_da6d34b6fa8152a0f868c9a2da5ef82e\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_da6d34b6fa8152a0f868c9a2da5ef82e.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_SIGNATORY_1__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Signatory_1__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Signatory_2__c__18.53dde1b5d6": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "CCS_Signatory_2__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Signatory_2__c__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_92b1e93eea6a662fa0d0c0aef55eea6e.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Signatory_2__c__18.53dde1b5d6", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Signatory_2__c__18"], "alias": "source_length_check_curated_rs_92b1e93eea6a662fa0d0c0aef55eea6e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_92b1e93eea6a662fa0d0c0aef55eea6e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_92b1e93eea6a662fa0d0c0aef55eea6e"}, "created_at": 1688944882.5130749, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_92b1e93eea6a662fa0d0c0aef55eea6e\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_92b1e93eea6a662fa0d0c0aef55eea6e.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Signatory_2__c) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Signatory_2__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Signatory_2__c__String.f89e683dbb": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Signatory_2__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Signatory_2__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_db4e3914d6f2cd295e80073c66ab4e1e.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Signatory_2__c__String.f89e683dbb", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Signatory_2__c__String"], "alias": "dbt_expectations_source_expect_db4e3914d6f2cd295e80073c66ab4e1e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_db4e3914d6f2cd295e80073c66ab4e1e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_db4e3914d6f2cd295e80073c66ab4e1e"}, "created_at": 1688944882.514687, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_db4e3914d6f2cd295e80073c66ab4e1e\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_db4e3914d6f2cd295e80073c66ab4e1e.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_SIGNATORY_2__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Signatory_2__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Signatory_3__c__18.a71aba3797": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "CCS_Signatory_3__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Signatory_3__c__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_974bab740f3a988a7db5a6daabfe9671.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Signatory_3__c__18.a71aba3797", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Signatory_3__c__18"], "alias": "source_length_check_curated_rs_974bab740f3a988a7db5a6daabfe9671", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_974bab740f3a988a7db5a6daabfe9671", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_974bab740f3a988a7db5a6daabfe9671"}, "created_at": 1688944882.5166268, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_974bab740f3a988a7db5a6daabfe9671\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_974bab740f3a988a7db5a6daabfe9671.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Signatory_3__c) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Signatory_3__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Signatory_3__c__String.bc80165b48": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Signatory_3__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Signatory_3__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_d67aec1cb2d5585d1fffbb911d3f9943.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Signatory_3__c__String.bc80165b48", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Signatory_3__c__String"], "alias": "dbt_expectations_source_expect_d67aec1cb2d5585d1fffbb911d3f9943", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_d67aec1cb2d5585d1fffbb911d3f9943", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_d67aec1cb2d5585d1fffbb911d3f9943"}, "created_at": 1688944882.5182452, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_d67aec1cb2d5585d1fffbb911d3f9943\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_d67aec1cb2d5585d1fffbb911d3f9943.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_SIGNATORY_3__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Signatory_3__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Signatory_4__c__18.7f02ba89a8": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "CCS_Signatory_4__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Signatory_4__c__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_2f60327ae16cff6a950ed5f54d847761.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Signatory_4__c__18.7f02ba89a8", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Signatory_4__c__18"], "alias": "source_length_check_curated_rs_2f60327ae16cff6a950ed5f54d847761", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_2f60327ae16cff6a950ed5f54d847761", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_2f60327ae16cff6a950ed5f54d847761"}, "created_at": 1688944882.520163, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_2f60327ae16cff6a950ed5f54d847761\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_2f60327ae16cff6a950ed5f54d847761.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Signatory_4__c) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Signatory_4__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Signatory_4__c__String.9757d31095": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Signatory_4__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Signatory_4__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_f1c70c28d7768a593ac2df4b48aff51d.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Signatory_4__c__String.9757d31095", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Signatory_4__c__String"], "alias": "dbt_expectations_source_expect_f1c70c28d7768a593ac2df4b48aff51d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_f1c70c28d7768a593ac2df4b48aff51d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_f1c70c28d7768a593ac2df4b48aff51d"}, "created_at": 1688944882.521903, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_f1c70c28d7768a593ac2df4b48aff51d\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_f1c70c28d7768a593ac2df4b48aff51d.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_SIGNATORY_4__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Signatory_4__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_SortCode__c__6.c79c2cb16b": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 6, "column_name": "CCS_SortCode__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_SortCode__c__6", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_466b3c810253352790d1f1f04f7e5a9c.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_SortCode__c__6.c79c2cb16b", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_SortCode__c__6"], "alias": "source_length_check_curated_rs_466b3c810253352790d1f1f04f7e5a9c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_466b3c810253352790d1f1f04f7e5a9c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_466b3c810253352790d1f1f04f7e5a9c"}, "created_at": 1688944882.523675, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_466b3c810253352790d1f1f04f7e5a9c\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_466b3c810253352790d1f1f04f7e5a9c.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_SortCode__c) > 6\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_SortCode__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_SortCode__c__String.f076ea01e1": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_SortCode__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_SortCode__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_f8c7edf8a6e78f8deb8ccb08e6987488.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_SortCode__c__String.f076ea01e1", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_SortCode__c__String"], "alias": "dbt_expectations_source_expect_f8c7edf8a6e78f8deb8ccb08e6987488", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_f8c7edf8a6e78f8deb8ccb08e6987488", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_f8c7edf8a6e78f8deb8ccb08e6987488"}, "created_at": 1688944882.52542, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_f8c7edf8a6e78f8deb8ccb08e6987488\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_f8c7edf8a6e78f8deb8ccb08e6987488.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_SORTCODE__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_SortCode__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Specific_1_Period_End__c__255.2b6907f373": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Specific_1_Period_End__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Specific_1_Period_End__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_b330dc2119483ddf008a9c017af5f41a.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Specific_1_Period_End__c__255.2b6907f373", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Specific_1_Period_End__c__255"], "alias": "source_length_check_curated_rs_b330dc2119483ddf008a9c017af5f41a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_b330dc2119483ddf008a9c017af5f41a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_b330dc2119483ddf008a9c017af5f41a"}, "created_at": 1688944882.527337, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_b330dc2119483ddf008a9c017af5f41a\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_b330dc2119483ddf008a9c017af5f41a.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Specific_1_Period_End__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Specific_1_Period_End__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Specific_1_Period_End__c__String.49a3c76451": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Specific_1_Period_End__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Specific_1_Period_End__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_c84ce8aaabe763ee7a9a2e38aa195791.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Specific_1_Period_End__c__String.49a3c76451", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Specific_1_Period_End__c__String"], "alias": "dbt_expectations_source_expect_c84ce8aaabe763ee7a9a2e38aa195791", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_c84ce8aaabe763ee7a9a2e38aa195791", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_c84ce8aaabe763ee7a9a2e38aa195791"}, "created_at": 1688944882.528938, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_c84ce8aaabe763ee7a9a2e38aa195791\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_c84ce8aaabe763ee7a9a2e38aa195791.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_SPECIFIC_1_PERIOD_END__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Specific_1_Period_End__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Specific_2_Period_End__c__255.c310b01cca": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Specific_2_Period_End__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Specific_2_Period_End__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_70590d7e0ab45c8a1f4aea20da05a1c0.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Specific_2_Period_End__c__255.c310b01cca", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Specific_2_Period_End__c__255"], "alias": "source_length_check_curated_rs_70590d7e0ab45c8a1f4aea20da05a1c0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_70590d7e0ab45c8a1f4aea20da05a1c0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_70590d7e0ab45c8a1f4aea20da05a1c0"}, "created_at": 1688944882.53086, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_70590d7e0ab45c8a1f4aea20da05a1c0\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_70590d7e0ab45c8a1f4aea20da05a1c0.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Specific_2_Period_End__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Specific_2_Period_End__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Specific_2_Period_End__c__String.60e529b83f": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Specific_2_Period_End__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Specific_2_Period_End__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_eaa0a28609e85b817d7c7dae50723e5f.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Specific_2_Period_End__c__String.60e529b83f", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Specific_2_Period_End__c__String"], "alias": "dbt_expectations_source_expect_eaa0a28609e85b817d7c7dae50723e5f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_eaa0a28609e85b817d7c7dae50723e5f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_eaa0a28609e85b817d7c7dae50723e5f"}, "created_at": 1688944882.532459, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_eaa0a28609e85b817d7c7dae50723e5f\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_eaa0a28609e85b817d7c7dae50723e5f.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_SPECIFIC_2_PERIOD_END__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Specific_2_Period_End__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Step_Frequency__c__255.71a4df4e63": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Step_Frequency__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Step_Frequency__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_519c7c7655e60eb42802ec5cf507edc0.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Step_Frequency__c__255.71a4df4e63", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Step_Frequency__c__255"], "alias": "source_length_check_curated_rs_519c7c7655e60eb42802ec5cf507edc0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_519c7c7655e60eb42802ec5cf507edc0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_519c7c7655e60eb42802ec5cf507edc0"}, "created_at": 1688944882.534393, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_519c7c7655e60eb42802ec5cf507edc0\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_519c7c7655e60eb42802ec5cf507edc0.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Step_Frequency__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Step_Frequency__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Step_Frequency__c__String.00e7830db5": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Step_Frequency__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Step_Frequency__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_5c67587b1946b4bbfccc038a96eec8da.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Step_Frequency__c__String.00e7830db5", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Step_Frequency__c__String"], "alias": "dbt_expectations_source_expect_5c67587b1946b4bbfccc038a96eec8da", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_5c67587b1946b4bbfccc038a96eec8da", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_5c67587b1946b4bbfccc038a96eec8da"}, "created_at": 1688944882.536112, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_5c67587b1946b4bbfccc038a96eec8da\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_5c67587b1946b4bbfccc038a96eec8da.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_STEP_FREQUENCY__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Step_Frequency__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Step_Option__c__255.4cc93a868d": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_Step_Option__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Step_Option__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_23b87dbeec1921174891301e515f7f5d.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Step_Option__c__255.4cc93a868d", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Step_Option__c__255"], "alias": "source_length_check_curated_rs_23b87dbeec1921174891301e515f7f5d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_23b87dbeec1921174891301e515f7f5d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_23b87dbeec1921174891301e515f7f5d"}, "created_at": 1688944882.5379179, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_23b87dbeec1921174891301e515f7f5d\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_23b87dbeec1921174891301e515f7f5d.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Step_Option__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Step_Option__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Step_Option__c__String.bc2cd87a7f": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Step_Option__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Step_Option__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_7929dcf1cbd88eba76b7ba385c423344.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Step_Option__c__String.bc2cd87a7f", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Step_Option__c__String"], "alias": "dbt_expectations_source_expect_7929dcf1cbd88eba76b7ba385c423344", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_7929dcf1cbd88eba76b7ba385c423344", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_7929dcf1cbd88eba76b7ba385c423344"}, "created_at": 1688944882.539648, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_7929dcf1cbd88eba76b7ba385c423344\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_7929dcf1cbd88eba76b7ba385c423344.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_STEP_OPTION__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Step_Option__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_SurroundServices__c__255.85d7771e79": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_SurroundServices__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_SurroundServices__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_edf3995d8f7cc233352a2a8287c44984.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_SurroundServices__c__255.85d7771e79", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_SurroundServices__c__255"], "alias": "source_length_check_curated_rs_edf3995d8f7cc233352a2a8287c44984", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_edf3995d8f7cc233352a2a8287c44984", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_edf3995d8f7cc233352a2a8287c44984"}, "created_at": 1688944882.541547, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_edf3995d8f7cc233352a2a8287c44984\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_edf3995d8f7cc233352a2a8287c44984.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_SurroundServices__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_SurroundServices__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_SurroundServices__c__String.1f0ec5d76b": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_SurroundServices__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_SurroundServices__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_d3f9c0755d5ebecbee5ec51f5e6823fd.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_SurroundServices__c__String.1f0ec5d76b", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_SurroundServices__c__String"], "alias": "dbt_expectations_source_expect_d3f9c0755d5ebecbee5ec51f5e6823fd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_d3f9c0755d5ebecbee5ec51f5e6823fd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_d3f9c0755d5ebecbee5ec51f5e6823fd"}, "created_at": 1688944882.543154, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_d3f9c0755d5ebecbee5ec51f5e6823fd\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_d3f9c0755d5ebecbee5ec51f5e6823fd.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_SURROUNDSERVICES__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_SurroundServices__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_TenorRestriction__c__255.e8ed77aae6": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_TenorRestriction__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_TenorRestriction__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_1ff1d56164f77711679f4452ada96b41.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_TenorRestriction__c__255.e8ed77aae6", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_TenorRestriction__c__255"], "alias": "source_length_check_curated_rs_1ff1d56164f77711679f4452ada96b41", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_1ff1d56164f77711679f4452ada96b41", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_1ff1d56164f77711679f4452ada96b41"}, "created_at": 1688944882.545332, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_1ff1d56164f77711679f4452ada96b41\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_1ff1d56164f77711679f4452ada96b41.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_TenorRestriction__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_TenorRestriction__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_TenorRestriction__c__String.3d88ba7f65": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_TenorRestriction__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_TenorRestriction__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_4085529e0944b4427ce88ba8d106748f.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_TenorRestriction__c__String.3d88ba7f65", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_TenorRestriction__c__String"], "alias": "dbt_expectations_source_expect_4085529e0944b4427ce88ba8d106748f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_4085529e0944b4427ce88ba8d106748f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_4085529e0944b4427ce88ba8d106748f"}, "created_at": 1688944882.5470688, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_4085529e0944b4427ce88ba8d106748f\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_4085529e0944b4427ce88ba8d106748f.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_TENORRESTRICTION__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_TenorRestriction__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Traded_Non_Traded__c__1300.b6f6f9221f": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 1300, "column_name": "CCS_Traded_Non_Traded__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Traded_Non_Traded__c__1300", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_6bcf4706b978ec520affe60826bf8ab1.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Traded_Non_Traded__c__1300.b6f6f9221f", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Traded_Non_Traded__c__1300"], "alias": "source_length_check_curated_rs_6bcf4706b978ec520affe60826bf8ab1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_6bcf4706b978ec520affe60826bf8ab1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_6bcf4706b978ec520affe60826bf8ab1"}, "created_at": 1688944882.548852, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_6bcf4706b978ec520affe60826bf8ab1\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_6bcf4706b978ec520affe60826bf8ab1.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Traded_Non_Traded__c) > 1300\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Traded_Non_Traded__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Traded_Non_Traded__c__String.65d5f7f55d": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Traded_Non_Traded__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Traded_Non_Traded__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_8bbc67bac97677d9ad4629d6724011ad.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Traded_Non_Traded__c__String.65d5f7f55d", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Traded_Non_Traded__c__String"], "alias": "dbt_expectations_source_expect_8bbc67bac97677d9ad4629d6724011ad", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_8bbc67bac97677d9ad4629d6724011ad", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_8bbc67bac97677d9ad4629d6724011ad"}, "created_at": 1688944882.5505621, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_8bbc67bac97677d9ad4629d6724011ad\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_8bbc67bac97677d9ad4629d6724011ad.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_TRADED_NON_TRADED__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Traded_Non_Traded__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_TrancheDrawdown__c__1300.ec6dda5adc": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 1300, "column_name": "CCS_TrancheDrawdown__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_TrancheDrawdown__c__1300", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_98290f7009839be5e5cb6e2960f26ca6.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_TrancheDrawdown__c__1300.ec6dda5adc", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_TrancheDrawdown__c__1300"], "alias": "source_length_check_curated_rs_98290f7009839be5e5cb6e2960f26ca6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_98290f7009839be5e5cb6e2960f26ca6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_98290f7009839be5e5cb6e2960f26ca6"}, "created_at": 1688944882.552507, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_98290f7009839be5e5cb6e2960f26ca6\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_98290f7009839be5e5cb6e2960f26ca6.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_TrancheDrawdown__c) > 1300\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_TrancheDrawdown__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_TrancheDrawdown__c__String.032d9292e8": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_TrancheDrawdown__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_TrancheDrawdown__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_a039911ec5909a0a6a2cee4c56c13d46.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_TrancheDrawdown__c__String.032d9292e8", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_TrancheDrawdown__c__String"], "alias": "dbt_expectations_source_expect_a039911ec5909a0a6a2cee4c56c13d46", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_a039911ec5909a0a6a2cee4c56c13d46", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_a039911ec5909a0a6a2cee4c56c13d46"}, "created_at": 1688944882.554107, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_a039911ec5909a0a6a2cee4c56c13d46\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_a039911ec5909a0a6a2cee4c56c13d46.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_TRANCHEDRAWDOWN__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_TrancheDrawdown__c", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_Utilisation_exceed_Current_Limit__c.3d9cf328ad": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CCS_Utilisation_exceed_Current_Limit__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_facility_curated_CCS_Utilisation_exceed_Current_Limit__c", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_cbd68b9a53dc072212d272a50798e0c9.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_Utilisation_exceed_Current_Limit__c.3d9cf328ad", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_facility_curated_CCS_Utilisation_exceed_Current_Limit__c"], "alias": "source_not_null_curated_rskcsp_cbd68b9a53dc072212d272a50798e0c9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_cbd68b9a53dc072212d272a50798e0c9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_cbd68b9a53dc072212d272a50798e0c9"}, "created_at": 1688944882.556041, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_cbd68b9a53dc072212d272a50798e0c9\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_cbd68b9a53dc072212d272a50798e0c9.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CCS_Utilisation_exceed_Current_Limit__c\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nwhere CCS_Utilisation_exceed_Current_Limit__c is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Utilisation_exceed_Current_Limit__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Which_limits_apply_to_the_facility__c__4099.d3a5f35ebf": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 4099, "column_name": "CCS_Which_limits_apply_to_the_facility__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Which_limits_apply_to_the_facility__c__4099", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_7bd57403a38113ad56604e5214a702c0.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Which_limits_apply_to_the_facility__c__4099.d3a5f35ebf", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CCS_Which_limits_apply_to_the_facility__c__4099"], "alias": "source_length_check_curated_rs_7bd57403a38113ad56604e5214a702c0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_7bd57403a38113ad56604e5214a702c0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_7bd57403a38113ad56604e5214a702c0"}, "created_at": 1688944882.5568068, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_7bd57403a38113ad56604e5214a702c0\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_7bd57403a38113ad56604e5214a702c0.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CCS_Which_limits_apply_to_the_facility__c) > 4099\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Which_limits_apply_to_the_facility__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Which_limits_apply_to_the_facility__c__String.867eb2fcd0": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_Which_limits_apply_to_the_facility__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Which_limits_apply_to_the_facility__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_a3db5585fd1e23c08988704beb73f04b.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Which_limits_apply_to_the_facility__c__String.867eb2fcd0", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Which_limits_apply_to_the_facility__c__String"], "alias": "dbt_expectations_source_expect_a3db5585fd1e23c08988704beb73f04b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_a3db5585fd1e23c08988704beb73f04b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_a3db5585fd1e23c08988704beb73f04b"}, "created_at": 1688944882.558547, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_a3db5585fd1e23c08988704beb73f04b\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_a3db5585fd1e23c08988704beb73f04b.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_WHICH_LIMITS_APPLY_TO_THE_FACILITY__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_Which_limits_apply_to_the_facility__c", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CreatedById.d11fb360c1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CreatedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_facility_curated_CreatedById", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_ds_facility_curated_CreatedById.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CreatedById.d11fb360c1", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_facility_curated_CreatedById"], "alias": "source_not_null_curated_rskcsp_ds_facility_curated_CreatedById", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688944882.560349, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_ds_facility_curated_CreatedById.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CreatedById\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nwhere CreatedById is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CreatedById", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CreatedById__18.d6cd217d9a": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "CreatedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CreatedById__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_5d3e84de1343ad4de1c8746b75d85c9d.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CreatedById__18.d6cd217d9a", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CreatedById__18"], "alias": "source_length_check_curated_rs_5d3e84de1343ad4de1c8746b75d85c9d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_5d3e84de1343ad4de1c8746b75d85c9d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_5d3e84de1343ad4de1c8746b75d85c9d"}, "created_at": 1688944882.561253, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_5d3e84de1343ad4de1c8746b75d85c9d\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_5d3e84de1343ad4de1c8746b75d85c9d.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CreatedById) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CreatedById", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CreatedById__String.6e3e906913": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CreatedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CreatedById__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_872ad1cb6b2408fde09577e1dc376ae0.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CreatedById__String.6e3e906913", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CreatedById__String"], "alias": "dbt_expectations_source_expect_872ad1cb6b2408fde09577e1dc376ae0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_872ad1cb6b2408fde09577e1dc376ae0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_872ad1cb6b2408fde09577e1dc376ae0"}, "created_at": 1688944882.562863, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_872ad1cb6b2408fde09577e1dc376ae0\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_872ad1cb6b2408fde09577e1dc376ae0.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CREATEDBYID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CreatedById", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CreatedDate.dbafec5b47": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CreatedDate", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_facility_curated_CreatedDate", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_ds_facility_curated_CreatedDate.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CreatedDate.dbafec5b47", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_facility_curated_CreatedDate"], "alias": "source_not_null_curated_rskcsp_ds_facility_curated_CreatedDate", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688944882.564779, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_ds_facility_curated_CreatedDate.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CreatedDate\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nwhere CreatedDate is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CreatedDate", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CurrencyIsoCode__3.514e1bdea2": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 3, "column_name": "CurrencyIsoCode", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_CurrencyIsoCode__3", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_9899be5994b1020842e468f54fe1a2a1.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CurrencyIsoCode__3.514e1bdea2", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_CurrencyIsoCode__3"], "alias": "source_length_check_curated_rs_9899be5994b1020842e468f54fe1a2a1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_9899be5994b1020842e468f54fe1a2a1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_9899be5994b1020842e468f54fe1a2a1"}, "created_at": 1688944882.565536, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_9899be5994b1020842e468f54fe1a2a1\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_9899be5994b1020842e468f54fe1a2a1.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(CurrencyIsoCode) > 3\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CurrencyIsoCode", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CurrencyIsoCode__String.c82a77d6e6": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CurrencyIsoCode", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CurrencyIsoCode__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_cc414c15207a552026edb49fcf758479.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CurrencyIsoCode__String.c82a77d6e6", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CurrencyIsoCode__String"], "alias": "dbt_expectations_source_expect_cc414c15207a552026edb49fcf758479", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_cc414c15207a552026edb49fcf758479", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_cc414c15207a552026edb49fcf758479"}, "created_at": 1688944882.5672598, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_cc414c15207a552026edb49fcf758479\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_cc414c15207a552026edb49fcf758479.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CURRENCYISOCODE'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CurrencyIsoCode", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_Id.700079c0d5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "Id", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_facility_curated_Id", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_ds_facility_curated_Id.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_Id.700079c0d5", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_facility_curated_Id"], "alias": "source_not_null_curated_rskcsp_ds_facility_curated_Id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688944882.569061, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_ds_facility_curated_Id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect Id\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nwhere Id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Id", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_Id__18.bd20263164": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "Id", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_Id__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rskcsp_ds_facility_curated_Id__18.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_Id__18.bd20263164", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_Id__18"], "alias": "source_length_check_curated_rskcsp_ds_facility_curated_Id__18", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688944882.5699809, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rskcsp_ds_facility_curated_Id__18.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(Id) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Id", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_Id__String.b862331699": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "Id", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_Id__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_80357fad04265130586f59a7b0ab72a4.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_Id__String.b862331699", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_Id__String"], "alias": "dbt_expectations_source_expect_80357fad04265130586f59a7b0ab72a4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_80357fad04265130586f59a7b0ab72a4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_80357fad04265130586f59a7b0ab72a4"}, "created_at": 1688944882.5714839, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_80357fad04265130586f59a7b0ab72a4\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_80357fad04265130586f59a7b0ab72a4.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Id", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_LastModifiedById.f6fe308e76": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LastModifiedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_facility_curated_LastModifiedById", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_5f17fb0a9566f166997bdd8e5a9ecbfc.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_LastModifiedById.f6fe308e76", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_facility_curated_LastModifiedById"], "alias": "source_not_null_curated_rskcsp_5f17fb0a9566f166997bdd8e5a9ecbfc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_5f17fb0a9566f166997bdd8e5a9ecbfc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_5f17fb0a9566f166997bdd8e5a9ecbfc"}, "created_at": 1688944882.573399, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_5f17fb0a9566f166997bdd8e5a9ecbfc\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_5f17fb0a9566f166997bdd8e5a9ecbfc.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect LastModifiedById\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nwhere LastModifiedById is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LastModifiedById", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LastModifiedById__18.73fe24e3e9": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "LastModifiedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_LastModifiedById__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_c0552a6c1acbaaa7009b0f91a5d10497.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LastModifiedById__18.73fe24e3e9", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_LastModifiedById__18"], "alias": "source_length_check_curated_rs_c0552a6c1acbaaa7009b0f91a5d10497", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_c0552a6c1acbaaa7009b0f91a5d10497", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_c0552a6c1acbaaa7009b0f91a5d10497"}, "created_at": 1688944882.5741508, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_c0552a6c1acbaaa7009b0f91a5d10497\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_c0552a6c1acbaaa7009b0f91a5d10497.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(LastModifiedById) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LastModifiedById", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LastModifiedById__String.ac1c8a8340": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LastModifiedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LastModifiedById__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_3bee87865a945510ea5272c884325ced.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LastModifiedById__String.ac1c8a8340", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LastModifiedById__String"], "alias": "dbt_expectations_source_expect_3bee87865a945510ea5272c884325ced", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_3bee87865a945510ea5272c884325ced", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_3bee87865a945510ea5272c884325ced"}, "created_at": 1688944882.5758982, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_3bee87865a945510ea5272c884325ced\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_3bee87865a945510ea5272c884325ced.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LASTMODIFIEDBYID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LastModifiedById", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_LastModifiedDate.015c63dad3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LastModifiedDate", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_facility_curated_LastModifiedDate", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_2a1bafca5ced4583ade95b850e5073a1.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_LastModifiedDate.015c63dad3", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_facility_curated_LastModifiedDate"], "alias": "source_not_null_curated_rskcsp_2a1bafca5ced4583ade95b850e5073a1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_2a1bafca5ced4583ade95b850e5073a1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_2a1bafca5ced4583ade95b850e5073a1"}, "created_at": 1688944882.577687, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_2a1bafca5ced4583ade95b850e5073a1\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_2a1bafca5ced4583ade95b850e5073a1.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect LastModifiedDate\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nwhere LastModifiedDate is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LastModifiedDate", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Account__c__18.f3523bdd8f": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "LLC_BI__Account__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Account__c__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_92b92acbcbbccd15425985a12dac4b99.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Account__c__18.f3523bdd8f", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Account__c__18"], "alias": "source_length_check_curated_rs_92b92acbcbbccd15425985a12dac4b99", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_92b92acbcbbccd15425985a12dac4b99", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_92b92acbcbbccd15425985a12dac4b99"}, "created_at": 1688944882.578816, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_92b92acbcbbccd15425985a12dac4b99\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_92b92acbcbbccd15425985a12dac4b99.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(LLC_BI__Account__c) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Account__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Account__c__String.f2008777d7": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LLC_BI__Account__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Account__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_5f1fca011ab2ebfe5b56b52608847a2e.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Account__c__String.f2008777d7", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Account__c__String"], "alias": "dbt_expectations_source_expect_5f1fca011ab2ebfe5b56b52608847a2e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_5f1fca011ab2ebfe5b56b52608847a2e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_5f1fca011ab2ebfe5b56b52608847a2e"}, "created_at": 1688944882.580437, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_5f1fca011ab2ebfe5b56b52608847a2e\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_5f1fca011ab2ebfe5b56b52608847a2e.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LLC_BI__ACCOUNT__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Account__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Credit_Memo__c__18.ae20738469": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "LLC_BI__Credit_Memo__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Credit_Memo__c__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_4708229aa02cac187f73f5ada160aae6.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Credit_Memo__c__18.ae20738469", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Credit_Memo__c__18"], "alias": "source_length_check_curated_rs_4708229aa02cac187f73f5ada160aae6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_4708229aa02cac187f73f5ada160aae6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_4708229aa02cac187f73f5ada160aae6"}, "created_at": 1688944882.582355, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_4708229aa02cac187f73f5ada160aae6\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_4708229aa02cac187f73f5ada160aae6.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(LLC_BI__Credit_Memo__c) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Credit_Memo__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Credit_Memo__c__String.11e11a2625": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LLC_BI__Credit_Memo__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Credit_Memo__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_066c925b0d648e2ff0545f99b7fb1bf7.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Credit_Memo__c__String.11e11a2625", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Credit_Memo__c__String"], "alias": "dbt_expectations_source_expect_066c925b0d648e2ff0545f99b7fb1bf7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_066c925b0d648e2ff0545f99b7fb1bf7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_066c925b0d648e2ff0545f99b7fb1bf7"}, "created_at": 1688944882.58394, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_066c925b0d648e2ff0545f99b7fb1bf7\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_066c925b0d648e2ff0545f99b7fb1bf7.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LLC_BI__CREDIT_MEMO__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Credit_Memo__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Financed_Fee_Calculations__c__255.a95d463fc1": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "LLC_BI__Financed_Fee_Calculations__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Financed_Fee_Calculations__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_99c7f7c00d984f679efcd921f21c2706.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Financed_Fee_Calculations__c__255.a95d463fc1", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Financed_Fee_Calculations__c__255"], "alias": "source_length_check_curated_rs_99c7f7c00d984f679efcd921f21c2706", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_99c7f7c00d984f679efcd921f21c2706", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_99c7f7c00d984f679efcd921f21c2706"}, "created_at": 1688944882.585875, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_99c7f7c00d984f679efcd921f21c2706\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_99c7f7c00d984f679efcd921f21c2706.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(LLC_BI__Financed_Fee_Calculations__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Financed_Fee_Calculations__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Financed_Fee_Calculations__c__String.3c0f62357c": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LLC_BI__Financed_Fee_Calculations__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Financed_Fee_Calculations__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_8c96f308d8128c5f524f0485475a1993.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Financed_Fee_Calculations__c__String.3c0f62357c", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Financed_Fee_Calculations__c__String"], "alias": "dbt_expectations_source_expect_8c96f308d8128c5f524f0485475a1993", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_8c96f308d8128c5f524f0485475a1993", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_8c96f308d8128c5f524f0485475a1993"}, "created_at": 1688944882.5876029, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_8c96f308d8128c5f524f0485475a1993\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_8c96f308d8128c5f524f0485475a1993.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LLC_BI__FINANCED_FEE_CALCULATIONS__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Financed_Fee_Calculations__c", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_LLC_BI__Is_In_Review__c.3b8ab1b998": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LLC_BI__Is_In_Review__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_facility_curated_LLC_BI__Is_In_Review__c", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_2c633acf7c430752204f60cf3a81d7c7.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_LLC_BI__Is_In_Review__c.3b8ab1b998", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_facility_curated_LLC_BI__Is_In_Review__c"], "alias": "source_not_null_curated_rskcsp_2c633acf7c430752204f60cf3a81d7c7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_2c633acf7c430752204f60cf3a81d7c7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_2c633acf7c430752204f60cf3a81d7c7"}, "created_at": 1688944882.589383, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_2c633acf7c430752204f60cf3a81d7c7\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_2c633acf7c430752204f60cf3a81d7c7.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect LLC_BI__Is_In_Review__c\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nwhere LLC_BI__Is_In_Review__c is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Is_In_Review__c", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_LLC_BI__isRenewal__c.5fc0febb34": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LLC_BI__isRenewal__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_facility_curated_LLC_BI__isRenewal__c", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_bb1e851e907865a0860e3b5dbe52b1b9.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_LLC_BI__isRenewal__c.5fc0febb34", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_facility_curated_LLC_BI__isRenewal__c"], "alias": "source_not_null_curated_rskcsp_bb1e851e907865a0860e3b5dbe52b1b9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_bb1e851e907865a0860e3b5dbe52b1b9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_bb1e851e907865a0860e3b5dbe52b1b9"}, "created_at": 1688944882.59027, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_bb1e851e907865a0860e3b5dbe52b1b9\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_bb1e851e907865a0860e3b5dbe52b1b9.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect LLC_BI__isRenewal__c\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nwhere LLC_BI__isRenewal__c is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__isRenewal__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__lookupKey__c__255.f8324809fb": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "LLC_BI__lookupKey__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__lookupKey__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_ba7760cbdd19886098ad6deda3b0525d.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__lookupKey__c__255.f8324809fb", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__lookupKey__c__255"], "alias": "source_length_check_curated_rs_ba7760cbdd19886098ad6deda3b0525d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_ba7760cbdd19886098ad6deda3b0525d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_ba7760cbdd19886098ad6deda3b0525d"}, "created_at": 1688944882.5910242, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_ba7760cbdd19886098ad6deda3b0525d\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_ba7760cbdd19886098ad6deda3b0525d.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(LLC_BI__lookupKey__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__lookupKey__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__lookupKey__c__String.9154cd0148": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LLC_BI__lookupKey__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__lookupKey__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_45622b13601358a44d737b0048f1b624.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__lookupKey__c__String.9154cd0148", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__lookupKey__c__String"], "alias": "dbt_expectations_source_expect_45622b13601358a44d737b0048f1b624", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_45622b13601358a44d737b0048f1b624", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_45622b13601358a44d737b0048f1b624"}, "created_at": 1688944882.592778, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_45622b13601358a44d737b0048f1b624\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_45622b13601358a44d737b0048f1b624.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LLC_BI__LOOKUPKEY__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__lookupKey__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Product__c__255.965e41e6e2": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "LLC_BI__Product__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Product__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_22bed4eb7cca3b47d7347010b919390c.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Product__c__255.965e41e6e2", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Product__c__255"], "alias": "source_length_check_curated_rs_22bed4eb7cca3b47d7347010b919390c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_22bed4eb7cca3b47d7347010b919390c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_22bed4eb7cca3b47d7347010b919390c"}, "created_at": 1688944882.594584, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_22bed4eb7cca3b47d7347010b919390c\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_22bed4eb7cca3b47d7347010b919390c.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(LLC_BI__Product__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Product__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Product__c__String.598545d00e": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LLC_BI__Product__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Product__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_cc35903cea6354989da6915da5888ab8.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Product__c__String.598545d00e", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Product__c__String"], "alias": "dbt_expectations_source_expect_cc35903cea6354989da6915da5888ab8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_cc35903cea6354989da6915da5888ab8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_cc35903cea6354989da6915da5888ab8"}, "created_at": 1688944882.5963268, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_cc35903cea6354989da6915da5888ab8\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_cc35903cea6354989da6915da5888ab8.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LLC_BI__PRODUCT__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Product__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Line__c__255.8b7a7cc45e": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "LLC_BI__Product_Line__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Line__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_8339e73f68f3aef533aa6411aeb603c6.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Line__c__255.8b7a7cc45e", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Line__c__255"], "alias": "source_length_check_curated_rs_8339e73f68f3aef533aa6411aeb603c6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_8339e73f68f3aef533aa6411aeb603c6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_8339e73f68f3aef533aa6411aeb603c6"}, "created_at": 1688944882.598254, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_8339e73f68f3aef533aa6411aeb603c6\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_8339e73f68f3aef533aa6411aeb603c6.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(LLC_BI__Product_Line__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Product_Line__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Line__c__String.e779fbae41": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LLC_BI__Product_Line__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Line__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_7c8ce99596e2e10eafdfa588ec9fbcb2.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Line__c__String.e779fbae41", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Line__c__String"], "alias": "dbt_expectations_source_expect_7c8ce99596e2e10eafdfa588ec9fbcb2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_7c8ce99596e2e10eafdfa588ec9fbcb2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_7c8ce99596e2e10eafdfa588ec9fbcb2"}, "created_at": 1688944882.599871, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_7c8ce99596e2e10eafdfa588ec9fbcb2\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_7c8ce99596e2e10eafdfa588ec9fbcb2.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LLC_BI__PRODUCT_LINE__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Product_Line__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Package__c__18.d1363648fe": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "LLC_BI__Product_Package__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Package__c__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_7d26b770164ff9a6ac066ce70a81e8d6.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Package__c__18.d1363648fe", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Package__c__18"], "alias": "source_length_check_curated_rs_7d26b770164ff9a6ac066ce70a81e8d6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_7d26b770164ff9a6ac066ce70a81e8d6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_7d26b770164ff9a6ac066ce70a81e8d6"}, "created_at": 1688944882.601803, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_7d26b770164ff9a6ac066ce70a81e8d6\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_7d26b770164ff9a6ac066ce70a81e8d6.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(LLC_BI__Product_Package__c) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Product_Package__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Package__c__String.0e521f7fbe": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LLC_BI__Product_Package__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Package__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_cd9809e1338c4e4f4611583ac5eb4884.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Package__c__String.0e521f7fbe", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Package__c__String"], "alias": "dbt_expectations_source_expect_cd9809e1338c4e4f4611583ac5eb4884", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_cd9809e1338c4e4f4611583ac5eb4884", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_cd9809e1338c4e4f4611583ac5eb4884"}, "created_at": 1688944882.6034071, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_cd9809e1338c4e4f4611583ac5eb4884\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_cd9809e1338c4e4f4611583ac5eb4884.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LLC_BI__PRODUCT_PACKAGE__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Product_Package__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Reference__c__18.efb9b19b47": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "LLC_BI__Product_Reference__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Reference__c__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_95453190f2b85f4fc5aba8837214b44f.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Reference__c__18.efb9b19b47", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Reference__c__18"], "alias": "source_length_check_curated_rs_95453190f2b85f4fc5aba8837214b44f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_95453190f2b85f4fc5aba8837214b44f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_95453190f2b85f4fc5aba8837214b44f"}, "created_at": 1688944882.605348, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_95453190f2b85f4fc5aba8837214b44f\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_95453190f2b85f4fc5aba8837214b44f.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(LLC_BI__Product_Reference__c) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Product_Reference__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Reference__c__String.a4bcd4415d": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LLC_BI__Product_Reference__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Reference__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_81982d77face05a7cb62ef1008fae3d9.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Reference__c__String.a4bcd4415d", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Reference__c__String"], "alias": "dbt_expectations_source_expect_81982d77face05a7cb62ef1008fae3d9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_81982d77face05a7cb62ef1008fae3d9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_81982d77face05a7cb62ef1008fae3d9"}, "created_at": 1688944882.6070669, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_81982d77face05a7cb62ef1008fae3d9\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_81982d77face05a7cb62ef1008fae3d9.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LLC_BI__PRODUCT_REFERENCE__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Product_Reference__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Type__c__255.6446244454": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "LLC_BI__Product_Type__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Type__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_30c485fd9762c981dcab557c53d36ddb.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Type__c__255.6446244454", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Type__c__255"], "alias": "source_length_check_curated_rs_30c485fd9762c981dcab557c53d36ddb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_30c485fd9762c981dcab557c53d36ddb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_30c485fd9762c981dcab557c53d36ddb"}, "created_at": 1688944882.6088629, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_30c485fd9762c981dcab557c53d36ddb\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_30c485fd9762c981dcab557c53d36ddb.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(LLC_BI__Product_Type__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Product_Type__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Type__c__String.d4da33d401": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LLC_BI__Product_Type__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Type__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_1f652cd59146e65a7b519edc59809904.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Type__c__String.d4da33d401", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Type__c__String"], "alias": "dbt_expectations_source_expect_1f652cd59146e65a7b519edc59809904", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_1f652cd59146e65a7b519edc59809904", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_1f652cd59146e65a7b519edc59809904"}, "created_at": 1688944882.610612, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_1f652cd59146e65a7b519edc59809904\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_1f652cd59146e65a7b519edc59809904.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LLC_BI__PRODUCT_TYPE__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Product_Type__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Stage__c__255.9750decb39": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "LLC_BI__Stage__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Stage__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_e48c4d9191c480b00641eafe41f63a21.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Stage__c__255.9750decb39", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Stage__c__255"], "alias": "source_length_check_curated_rs_e48c4d9191c480b00641eafe41f63a21", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_e48c4d9191c480b00641eafe41f63a21", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_e48c4d9191c480b00641eafe41f63a21"}, "created_at": 1688944882.612731, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_e48c4d9191c480b00641eafe41f63a21\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_e48c4d9191c480b00641eafe41f63a21.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(LLC_BI__Stage__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Stage__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Stage__c__String.ae027669f8": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LLC_BI__Stage__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Stage__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_160ea60fc77d80a91e65839ffdcf8e3f.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Stage__c__String.ae027669f8", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Stage__c__String"], "alias": "dbt_expectations_source_expect_160ea60fc77d80a91e65839ffdcf8e3f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_160ea60fc77d80a91e65839ffdcf8e3f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_160ea60fc77d80a91e65839ffdcf8e3f"}, "created_at": 1688944882.614379, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_160ea60fc77d80a91e65839ffdcf8e3f\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_160ea60fc77d80a91e65839ffdcf8e3f.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LLC_BI__STAGE__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Stage__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Status__c__255.4e04c2e33b": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "LLC_BI__Status__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Status__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_f240e088f9435bdff87f10d6013ad73f.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Status__c__255.4e04c2e33b", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Status__c__255"], "alias": "source_length_check_curated_rs_f240e088f9435bdff87f10d6013ad73f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_f240e088f9435bdff87f10d6013ad73f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_f240e088f9435bdff87f10d6013ad73f"}, "created_at": 1688944882.616361, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_f240e088f9435bdff87f10d6013ad73f\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_f240e088f9435bdff87f10d6013ad73f.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(LLC_BI__Status__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Status__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Status__c__String.258ae7caf6": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LLC_BI__Status__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Status__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_c5ad6be0011a5deaaa4bfb8213ee0471.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Status__c__String.258ae7caf6", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Status__c__String"], "alias": "dbt_expectations_source_expect_c5ad6be0011a5deaaa4bfb8213ee0471", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_c5ad6be0011a5deaaa4bfb8213ee0471", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_c5ad6be0011a5deaaa4bfb8213ee0471"}, "created_at": 1688944882.618005, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_c5ad6be0011a5deaaa4bfb8213ee0471\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_c5ad6be0011a5deaaa4bfb8213ee0471.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LLC_BI__STATUS__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Status__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_Migration_ID__c__18.c60a17c7c5": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "Migration_ID__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_Migration_ID__c__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_aa98266e7d92472fe5e8e72850921858.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_Migration_ID__c__18.c60a17c7c5", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_Migration_ID__c__18"], "alias": "source_length_check_curated_rs_aa98266e7d92472fe5e8e72850921858", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_aa98266e7d92472fe5e8e72850921858", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_aa98266e7d92472fe5e8e72850921858"}, "created_at": 1688944882.619988, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_aa98266e7d92472fe5e8e72850921858\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_aa98266e7d92472fe5e8e72850921858.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(Migration_ID__c) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Migration_ID__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_Migration_ID__c__String.3c9416a982": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "Migration_ID__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_Migration_ID__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_da31ab0d899a0f89576c183815033847.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_Migration_ID__c__String.3c9416a982", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_Migration_ID__c__String"], "alias": "dbt_expectations_source_expect_da31ab0d899a0f89576c183815033847", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_da31ab0d899a0f89576c183815033847", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_da31ab0d899a0f89576c183815033847"}, "created_at": 1688944882.62176, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_da31ab0d899a0f89576c183815033847\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_da31ab0d899a0f89576c183815033847.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MIGRATION_ID__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Migration_ID__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_Name__80.4bb2cc202f": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 80, "column_name": "Name", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_Name__80", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rskcsp_ds_facility_curated_Name__80.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_Name__80.4bb2cc202f", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_Name__80"], "alias": "source_length_check_curated_rskcsp_ds_facility_curated_Name__80", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688944882.623585, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rskcsp_ds_facility_curated_Name__80.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(Name) > 80\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Name", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_Name__String.1b162520b5": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "Name", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_Name__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_9dd86beb9a9fc4db541bf7696e5b04f3.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_Name__String.1b162520b5", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_Name__String"], "alias": "dbt_expectations_source_expect_9dd86beb9a9fc4db541bf7696e5b04f3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_9dd86beb9a9fc4db541bf7696e5b04f3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_9dd86beb9a9fc4db541bf7696e5b04f3"}, "created_at": 1688944882.625278, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_9dd86beb9a9fc4db541bf7696e5b04f3\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_9dd86beb9a9fc4db541bf7696e5b04f3.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'NAME'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Name", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_OwnerId.94132ff092": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "OwnerId", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_facility_curated_OwnerId", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_ds_facility_curated_OwnerId.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_OwnerId.94132ff092", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_facility_curated_OwnerId"], "alias": "source_not_null_curated_rskcsp_ds_facility_curated_OwnerId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688944882.62723, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_ds_facility_curated_OwnerId.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect OwnerId\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nwhere OwnerId is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "OwnerId", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_OwnerId__18.7853dc00ad": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "OwnerId", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_OwnerId__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_bdf54ad9e97667f1ac02950abbaa7443.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_OwnerId__18.7853dc00ad", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_OwnerId__18"], "alias": "source_length_check_curated_rs_bdf54ad9e97667f1ac02950abbaa7443", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_bdf54ad9e97667f1ac02950abbaa7443", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_bdf54ad9e97667f1ac02950abbaa7443"}, "created_at": 1688944882.628007, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_bdf54ad9e97667f1ac02950abbaa7443\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_bdf54ad9e97667f1ac02950abbaa7443.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(OwnerId) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "OwnerId", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_OwnerId__String.42fd83e386": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "OwnerId", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_OwnerId__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_36afbe49c97d7f83c51feabac9d86b78.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_OwnerId__String.42fd83e386", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_OwnerId__String"], "alias": "dbt_expectations_source_expect_36afbe49c97d7f83c51feabac9d86b78", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_36afbe49c97d7f83c51feabac9d86b78", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_36afbe49c97d7f83c51feabac9d86b78"}, "created_at": 1688944882.629817, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_36afbe49c97d7f83c51feabac9d86b78\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_36afbe49c97d7f83c51feabac9d86b78.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'OWNERID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "OwnerId", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_Primary_Source_of_Repayment__c__255.6b3a5ec25c": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "Primary_Source_of_Repayment__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_Primary_Source_of_Repayment__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_6289dfcfbd34b83a7ea04b644afaca4f.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_Primary_Source_of_Repayment__c__255.6b3a5ec25c", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_Primary_Source_of_Repayment__c__255"], "alias": "source_length_check_curated_rs_6289dfcfbd34b83a7ea04b644afaca4f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_6289dfcfbd34b83a7ea04b644afaca4f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_6289dfcfbd34b83a7ea04b644afaca4f"}, "created_at": 1688944882.63167, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_6289dfcfbd34b83a7ea04b644afaca4f\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_6289dfcfbd34b83a7ea04b644afaca4f.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(Primary_Source_of_Repayment__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Primary_Source_of_Repayment__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_Primary_Source_of_Repayment__c__String.00e0a856c0": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "Primary_Source_of_Repayment__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_Primary_Source_of_Repayment__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_c9172104d813e6faf7d0f1bc3a046e0e.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_Primary_Source_of_Repayment__c__String.00e0a856c0", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_Primary_Source_of_Repayment__c__String"], "alias": "dbt_expectations_source_expect_c9172104d813e6faf7d0f1bc3a046e0e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_c9172104d813e6faf7d0f1bc3a046e0e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_c9172104d813e6faf7d0f1bc3a046e0e"}, "created_at": 1688944882.6334689, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_c9172104d813e6faf7d0f1bc3a046e0e\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_c9172104d813e6faf7d0f1bc3a046e0e.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PRIMARY_SOURCE_OF_REPAYMENT__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Primary_Source_of_Repayment__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_RecordTypeId__18.e628cac861": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "RecordTypeId", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_RecordTypeId__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_99f2b763cf2eb0af27fd593e025eba72.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_RecordTypeId__18.e628cac861", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_RecordTypeId__18"], "alias": "source_length_check_curated_rs_99f2b763cf2eb0af27fd593e025eba72", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_99f2b763cf2eb0af27fd593e025eba72", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_99f2b763cf2eb0af27fd593e025eba72"}, "created_at": 1688944882.635447, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_99f2b763cf2eb0af27fd593e025eba72\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_99f2b763cf2eb0af27fd593e025eba72.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(RecordTypeId) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "RecordTypeId", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_RecordTypeId__String.2b08146613": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "RecordTypeId", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_RecordTypeId__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_b164f27d048f91119dc3837431f1675e.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_RecordTypeId__String.2b08146613", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_RecordTypeId__String"], "alias": "dbt_expectations_source_expect_b164f27d048f91119dc3837431f1675e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_b164f27d048f91119dc3837431f1675e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_b164f27d048f91119dc3837431f1675e"}, "created_at": 1688944882.637111, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_b164f27d048f91119dc3837431f1675e\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_b164f27d048f91119dc3837431f1675e.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'RECORDTYPEID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "RecordTypeId", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_Step_Frequency__c__255.04e4865a45": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "Step_Frequency__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_facility_curated_Step_Frequency__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_efdcef33937102af7067c09094ee4c06.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_Step_Frequency__c__255.04e4865a45", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_facility_curated_Step_Frequency__c__255"], "alias": "source_length_check_curated_rs_efdcef33937102af7067c09094ee4c06", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_efdcef33937102af7067c09094ee4c06", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_efdcef33937102af7067c09094ee4c06"}, "created_at": 1688944882.6390898, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_efdcef33937102af7067c09094ee4c06\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_efdcef33937102af7067c09094ee4c06.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`\nWHERE\n  LENGTH(Step_Frequency__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Step_Frequency__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_Step_Frequency__c__String.31dc91b0cd": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "Step_Frequency__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_facility_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_Step_Frequency__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_415862bd679f2d0d62aed293af7be291.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_Step_Frequency__c__String.31dc91b0cd", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_Step_Frequency__c__String"], "alias": "dbt_expectations_source_expect_415862bd679f2d0d62aed293af7be291", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_415862bd679f2d0d62aed293af7be291", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_415862bd679f2d0d62aed293af7be291"}, "created_at": 1688944882.6407208, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_415862bd679f2d0d62aed293af7be291\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_facility_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_facility_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_415862bd679f2d0d62aed293af7be291.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'STEP_FREQUENCY__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Step_Frequency__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_CCS_LBG_Entity__c__255.3d925965ae": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "CCS_LBG_Entity__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_policy_exception_curated_CCS_LBG_Entity__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_f3b055e99a19495da2ea313f27536c08.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_CCS_LBG_Entity__c__255.3d925965ae", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_policy_exception_curated_CCS_LBG_Entity__c__255"], "alias": "source_length_check_curated_rs_f3b055e99a19495da2ea313f27536c08", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_f3b055e99a19495da2ea313f27536c08", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_f3b055e99a19495da2ea313f27536c08"}, "created_at": 1688944882.6429162, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_f3b055e99a19495da2ea313f27536c08\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_f3b055e99a19495da2ea313f27536c08.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_curated`\nWHERE\n  LENGTH(CCS_LBG_Entity__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_LBG_Entity__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_CCS_LBG_Entity__c__String.3aafc7148d": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_LBG_Entity__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_CCS_LBG_Entity__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_67bce1ebb6c591d9a8257d50d0468255.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_CCS_LBG_Entity__c__String.3aafc7148d", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_CCS_LBG_Entity__c__String"], "alias": "dbt_expectations_source_expect_67bce1ebb6c591d9a8257d50d0468255", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_67bce1ebb6c591d9a8257d50d0468255", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_67bce1ebb6c591d9a8257d50d0468255"}, "created_at": 1688944882.644695, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_67bce1ebb6c591d9a8257d50d0468255\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_67bce1ebb6c591d9a8257d50d0468255.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('OWNERID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__CODE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COLLATERAL_MGMT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COVENANT_MGMT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__LOAN__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_1__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_2__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_3__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__RELATIONSHIP__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITY_VALUE__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__STATUS__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__TYPE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__AUTOMATICALLY_ADDED__C' as STRING) as relation_column,\n            cast('BOOLEAN' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LBG_ENTITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LBG_ENTITY_FACILITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_LBG_ENTITY__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_LBG_Entity__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_CCS_LBG_Entity_Facility__c__1300.2b1469b9e5": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 1300, "column_name": "CCS_LBG_Entity_Facility__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_policy_exception_curated_CCS_LBG_Entity_Facility__c__1300", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_0ed8ce3140c56ddfe81ae9439ee2db59.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_CCS_LBG_Entity_Facility__c__1300.2b1469b9e5", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_policy_exception_curated_CCS_LBG_Entity_Facility__c__1300"], "alias": "source_length_check_curated_rs_0ed8ce3140c56ddfe81ae9439ee2db59", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_0ed8ce3140c56ddfe81ae9439ee2db59", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_0ed8ce3140c56ddfe81ae9439ee2db59"}, "created_at": 1688944882.646927, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_0ed8ce3140c56ddfe81ae9439ee2db59\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_0ed8ce3140c56ddfe81ae9439ee2db59.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_curated`\nWHERE\n  LENGTH(CCS_LBG_Entity_Facility__c) > 1300\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_LBG_Entity_Facility__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_CCS_LBG_Entity_Facility__c__String.ba0687350e": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CCS_LBG_Entity_Facility__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_CCS_LBG_Entity_Facility__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_0bd3b654a4f98e8e7c23dfbb700b5387.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_CCS_LBG_Entity_Facility__c__String.ba0687350e", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_CCS_LBG_Entity_Facility__c__String"], "alias": "dbt_expectations_source_expect_0bd3b654a4f98e8e7c23dfbb700b5387", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_0bd3b654a4f98e8e7c23dfbb700b5387", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_0bd3b654a4f98e8e7c23dfbb700b5387"}, "created_at": 1688944882.648606, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_0bd3b654a4f98e8e7c23dfbb700b5387\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_0bd3b654a4f98e8e7c23dfbb700b5387.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('OWNERID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__CODE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COLLATERAL_MGMT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COVENANT_MGMT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__LOAN__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_1__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_2__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_3__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__RELATIONSHIP__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITY_VALUE__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__STATUS__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__TYPE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__AUTOMATICALLY_ADDED__C' as STRING) as relation_column,\n            cast('BOOLEAN' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LBG_ENTITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LBG_ENTITY_FACILITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CCS_LBG_ENTITY_FACILITY__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CCS_LBG_Entity_Facility__c", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_curated_CreatedById.2332c061a0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CreatedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_policy_exception_curated_CreatedById", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_0c0f5dcccb1554625bcdb2aa9e4fad43.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_curated_CreatedById.2332c061a0", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_policy_exception_curated_CreatedById"], "alias": "source_not_null_curated_rskcsp_0c0f5dcccb1554625bcdb2aa9e4fad43", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_0c0f5dcccb1554625bcdb2aa9e4fad43", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_0c0f5dcccb1554625bcdb2aa9e4fad43"}, "created_at": 1688944882.6508899, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_0c0f5dcccb1554625bcdb2aa9e4fad43\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_0c0f5dcccb1554625bcdb2aa9e4fad43.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CreatedById\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_curated`\nwhere CreatedById is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CreatedById", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_CreatedById__18.bc08cf1e7d": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "CreatedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_policy_exception_curated_CreatedById__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_18633be1befcdf9159c99491ac7ac70f.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_CreatedById__18.bc08cf1e7d", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_policy_exception_curated_CreatedById__18"], "alias": "source_length_check_curated_rs_18633be1befcdf9159c99491ac7ac70f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_18633be1befcdf9159c99491ac7ac70f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_18633be1befcdf9159c99491ac7ac70f"}, "created_at": 1688944882.651707, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_18633be1befcdf9159c99491ac7ac70f\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_18633be1befcdf9159c99491ac7ac70f.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_curated`\nWHERE\n  LENGTH(CreatedById) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CreatedById", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_CreatedById__String.4df44e4103": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CreatedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_CreatedById__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_e644d339d61b58e38388d3db428c8fd0.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_CreatedById__String.4df44e4103", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_CreatedById__String"], "alias": "dbt_expectations_source_expect_e644d339d61b58e38388d3db428c8fd0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_e644d339d61b58e38388d3db428c8fd0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_e644d339d61b58e38388d3db428c8fd0"}, "created_at": 1688944882.653672, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_e644d339d61b58e38388d3db428c8fd0\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_e644d339d61b58e38388d3db428c8fd0.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('OWNERID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__CODE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COLLATERAL_MGMT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COVENANT_MGMT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__LOAN__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_1__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_2__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_3__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__RELATIONSHIP__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITY_VALUE__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__STATUS__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__TYPE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__AUTOMATICALLY_ADDED__C' as STRING) as relation_column,\n            cast('BOOLEAN' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LBG_ENTITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LBG_ENTITY_FACILITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CREATEDBYID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CreatedById", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_curated_CreatedDate.1ba544bf94": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CreatedDate", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_policy_exception_curated_CreatedDate", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_bfe658bf43b4df62c27207119aff441c.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_curated_CreatedDate.1ba544bf94", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_policy_exception_curated_CreatedDate"], "alias": "source_not_null_curated_rskcsp_bfe658bf43b4df62c27207119aff441c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_bfe658bf43b4df62c27207119aff441c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_bfe658bf43b4df62c27207119aff441c"}, "created_at": 1688944882.655563, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_bfe658bf43b4df62c27207119aff441c\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_bfe658bf43b4df62c27207119aff441c.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CreatedDate\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_curated`\nwhere CreatedDate is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CreatedDate", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_CurrencyIsoCode__3.44912a9792": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 3, "column_name": "CurrencyIsoCode", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_policy_exception_curated_CurrencyIsoCode__3", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_b7be600bfa59d3266e5d1c343f59bd58.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_CurrencyIsoCode__3.44912a9792", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_policy_exception_curated_CurrencyIsoCode__3"], "alias": "source_length_check_curated_rs_b7be600bfa59d3266e5d1c343f59bd58", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_b7be600bfa59d3266e5d1c343f59bd58", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_b7be600bfa59d3266e5d1c343f59bd58"}, "created_at": 1688944882.6564832, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_b7be600bfa59d3266e5d1c343f59bd58\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_b7be600bfa59d3266e5d1c343f59bd58.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_curated`\nWHERE\n  LENGTH(CurrencyIsoCode) > 3\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CurrencyIsoCode", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_CurrencyIsoCode__String.6af246194a": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CurrencyIsoCode", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_CurrencyIsoCode__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_734ecd4fa03d61da180f5c3b9737737e.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_CurrencyIsoCode__String.6af246194a", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_CurrencyIsoCode__String"], "alias": "dbt_expectations_source_expect_734ecd4fa03d61da180f5c3b9737737e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_734ecd4fa03d61da180f5c3b9737737e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_734ecd4fa03d61da180f5c3b9737737e"}, "created_at": 1688944882.658134, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_734ecd4fa03d61da180f5c3b9737737e\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_734ecd4fa03d61da180f5c3b9737737e.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('OWNERID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__CODE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COLLATERAL_MGMT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COVENANT_MGMT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__LOAN__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_1__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_2__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_3__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__RELATIONSHIP__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITY_VALUE__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__STATUS__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__TYPE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__AUTOMATICALLY_ADDED__C' as STRING) as relation_column,\n            cast('BOOLEAN' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LBG_ENTITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LBG_ENTITY_FACILITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CURRENCYISOCODE'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CurrencyIsoCode", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_curated_Id.feaa9a4621": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "Id", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_policy_exception_curated_Id", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_ds_policy_exception_curated_Id.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_curated_Id.feaa9a4621", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_policy_exception_curated_Id"], "alias": "source_not_null_curated_rskcsp_ds_policy_exception_curated_Id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1688944882.6601028, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_ds_policy_exception_curated_Id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect Id\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_curated`\nwhere Id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Id", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_Id__18.db88c41c36": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "Id", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_policy_exception_curated_Id__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_07a66f29cc3e0a7488aa8932aa8b25b7.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_Id__18.db88c41c36", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_policy_exception_curated_Id__18"], "alias": "source_length_check_curated_rs_07a66f29cc3e0a7488aa8932aa8b25b7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_07a66f29cc3e0a7488aa8932aa8b25b7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_07a66f29cc3e0a7488aa8932aa8b25b7"}, "created_at": 1688944882.6608598, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_07a66f29cc3e0a7488aa8932aa8b25b7\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_07a66f29cc3e0a7488aa8932aa8b25b7.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_curated`\nWHERE\n  LENGTH(Id) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Id", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_Id__String.9a468868a0": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "Id", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_Id__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_498a5940b452c971b4a2f808323f821d.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_Id__String.9a468868a0", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_Id__String"], "alias": "dbt_expectations_source_expect_498a5940b452c971b4a2f808323f821d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_498a5940b452c971b4a2f808323f821d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_498a5940b452c971b4a2f808323f821d"}, "created_at": 1688944882.6626282, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_498a5940b452c971b4a2f808323f821d\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_498a5940b452c971b4a2f808323f821d.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('OWNERID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__CODE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COLLATERAL_MGMT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COVENANT_MGMT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__LOAN__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_1__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_2__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_3__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__RELATIONSHIP__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITY_VALUE__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__STATUS__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__TYPE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__AUTOMATICALLY_ADDED__C' as STRING) as relation_column,\n            cast('BOOLEAN' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LBG_ENTITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LBG_ENTITY_FACILITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Id", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_curated_LastModifiedById.3e4dc4fd66": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LastModifiedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_policy_exception_curated_LastModifiedById", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_2f284071bf19d0cbcb209b5f7e192c6b.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_curated_LastModifiedById.3e4dc4fd66", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_policy_exception_curated_LastModifiedById"], "alias": "source_not_null_curated_rskcsp_2f284071bf19d0cbcb209b5f7e192c6b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_2f284071bf19d0cbcb209b5f7e192c6b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_2f284071bf19d0cbcb209b5f7e192c6b"}, "created_at": 1688944882.664458, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_2f284071bf19d0cbcb209b5f7e192c6b\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_2f284071bf19d0cbcb209b5f7e192c6b.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect LastModifiedById\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_curated`\nwhere LastModifiedById is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LastModifiedById", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LastModifiedById__18.0312c02789": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "LastModifiedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_policy_exception_curated_LastModifiedById__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_7e97e55d677d9902843615d3ebba7737.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LastModifiedById__18.0312c02789", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_policy_exception_curated_LastModifiedById__18"], "alias": "source_length_check_curated_rs_7e97e55d677d9902843615d3ebba7737", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_7e97e55d677d9902843615d3ebba7737", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_7e97e55d677d9902843615d3ebba7737"}, "created_at": 1688944882.665368, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_7e97e55d677d9902843615d3ebba7737\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_7e97e55d677d9902843615d3ebba7737.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_curated`\nWHERE\n  LENGTH(LastModifiedById) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LastModifiedById", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LastModifiedById__String.87378c329c": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LastModifiedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LastModifiedById__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_fc78de8dc32eb8908568767603627251.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LastModifiedById__String.87378c329c", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LastModifiedById__String"], "alias": "dbt_expectations_source_expect_fc78de8dc32eb8908568767603627251", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_fc78de8dc32eb8908568767603627251", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_fc78de8dc32eb8908568767603627251"}, "created_at": 1688944882.666999, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_fc78de8dc32eb8908568767603627251\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_fc78de8dc32eb8908568767603627251.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('OWNERID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__CODE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COLLATERAL_MGMT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COVENANT_MGMT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__LOAN__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_1__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_2__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_3__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__RELATIONSHIP__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITY_VALUE__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__STATUS__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__TYPE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__AUTOMATICALLY_ADDED__C' as STRING) as relation_column,\n            cast('BOOLEAN' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LBG_ENTITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LBG_ENTITY_FACILITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LASTMODIFIEDBYID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LastModifiedById", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_curated_LastModifiedDate.7f3d0a8080": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LastModifiedDate", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_policy_exception_curated_LastModifiedDate", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_baaa3a60f7c7002c6e260cc30e5222e2.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_curated_LastModifiedDate.7f3d0a8080", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_policy_exception_curated_LastModifiedDate"], "alias": "source_not_null_curated_rskcsp_baaa3a60f7c7002c6e260cc30e5222e2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_baaa3a60f7c7002c6e260cc30e5222e2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_baaa3a60f7c7002c6e260cc30e5222e2"}, "created_at": 1688944882.668962, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_baaa3a60f7c7002c6e260cc30e5222e2\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_baaa3a60f7c7002c6e260cc30e5222e2.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect LastModifiedDate\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_curated`\nwhere LastModifiedDate is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LastModifiedDate", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Automatically_Added__c.6ad3cf64fc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LLC_BI__Automatically_Added__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Automatically_Added__c", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_5148c5c43a664693ac8d855a6450fd05.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Automatically_Added__c.6ad3cf64fc", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Automatically_Added__c"], "alias": "source_not_null_curated_rskcsp_5148c5c43a664693ac8d855a6450fd05", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_5148c5c43a664693ac8d855a6450fd05", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_5148c5c43a664693ac8d855a6450fd05"}, "created_at": 1688944882.669724, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_5148c5c43a664693ac8d855a6450fd05\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_5148c5c43a664693ac8d855a6450fd05.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect LLC_BI__Automatically_Added__c\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_curated`\nwhere LLC_BI__Automatically_Added__c is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Automatically_Added__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Code__c__50.740cd8700c": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 50, "column_name": "LLC_BI__Code__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Code__c__50", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_74b25a068d0014631013d989efc3b098.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Code__c__50.740cd8700c", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Code__c__50"], "alias": "source_length_check_curated_rs_74b25a068d0014631013d989efc3b098", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_74b25a068d0014631013d989efc3b098", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_74b25a068d0014631013d989efc3b098"}, "created_at": 1688944882.670472, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_74b25a068d0014631013d989efc3b098\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_74b25a068d0014631013d989efc3b098.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_curated`\nWHERE\n  LENGTH(LLC_BI__Code__c) > 50\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Code__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Code__c__String.39630dc1f3": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LLC_BI__Code__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Code__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_540155e3038407755a8387262456eb48.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Code__c__String.39630dc1f3", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Code__c__String"], "alias": "dbt_expectations_source_expect_540155e3038407755a8387262456eb48", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_540155e3038407755a8387262456eb48", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_540155e3038407755a8387262456eb48"}, "created_at": 1688944882.672259, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_540155e3038407755a8387262456eb48\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_540155e3038407755a8387262456eb48.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('OWNERID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__CODE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COLLATERAL_MGMT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COVENANT_MGMT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__LOAN__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_1__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_2__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_3__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__RELATIONSHIP__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITY_VALUE__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__STATUS__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__TYPE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__AUTOMATICALLY_ADDED__C' as STRING) as relation_column,\n            cast('BOOLEAN' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LBG_ENTITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LBG_ENTITY_FACILITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LLC_BI__CODE__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Code__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Collateral_Mgmt__c__18.75f2eb9782": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "LLC_BI__Collateral_Mgmt__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Collateral_Mgmt__c__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_5f5feaebe786990ea65d523ef929caaa.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Collateral_Mgmt__c__18.75f2eb9782", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Collateral_Mgmt__c__18"], "alias": "source_length_check_curated_rs_5f5feaebe786990ea65d523ef929caaa", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_5f5feaebe786990ea65d523ef929caaa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_5f5feaebe786990ea65d523ef929caaa"}, "created_at": 1688944882.674211, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_5f5feaebe786990ea65d523ef929caaa\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_5f5feaebe786990ea65d523ef929caaa.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_curated`\nWHERE\n  LENGTH(LLC_BI__Collateral_Mgmt__c) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Collateral_Mgmt__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Collateral_Mgmt__c__String.278d2cf884": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LLC_BI__Collateral_Mgmt__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Collateral_Mgmt__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_0e941ffc47f4b2a936693fd9ae02fac3.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Collateral_Mgmt__c__String.278d2cf884", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Collateral_Mgmt__c__String"], "alias": "dbt_expectations_source_expect_0e941ffc47f4b2a936693fd9ae02fac3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_0e941ffc47f4b2a936693fd9ae02fac3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_0e941ffc47f4b2a936693fd9ae02fac3"}, "created_at": 1688944882.6758468, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_0e941ffc47f4b2a936693fd9ae02fac3\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_0e941ffc47f4b2a936693fd9ae02fac3.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('OWNERID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__CODE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COLLATERAL_MGMT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COVENANT_MGMT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__LOAN__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_1__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_2__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_3__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__RELATIONSHIP__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITY_VALUE__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__STATUS__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__TYPE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__AUTOMATICALLY_ADDED__C' as STRING) as relation_column,\n            cast('BOOLEAN' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LBG_ENTITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LBG_ENTITY_FACILITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LLC_BI__COLLATERAL_MGMT__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Collateral_Mgmt__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Covenant_Mgmt__c__18.f86c7c9946": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "LLC_BI__Covenant_Mgmt__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Covenant_Mgmt__c__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_af48d26756708fb9af9f1bfe02b014ca.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Covenant_Mgmt__c__18.f86c7c9946", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Covenant_Mgmt__c__18"], "alias": "source_length_check_curated_rs_af48d26756708fb9af9f1bfe02b014ca", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_af48d26756708fb9af9f1bfe02b014ca", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_af48d26756708fb9af9f1bfe02b014ca"}, "created_at": 1688944882.677768, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_af48d26756708fb9af9f1bfe02b014ca\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_af48d26756708fb9af9f1bfe02b014ca.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_curated`\nWHERE\n  LENGTH(LLC_BI__Covenant_Mgmt__c) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Covenant_Mgmt__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Covenant_Mgmt__c__String.198e948801": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LLC_BI__Covenant_Mgmt__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Covenant_Mgmt__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_386e4f19710e5c6a208e046d7a259013.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Covenant_Mgmt__c__String.198e948801", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Covenant_Mgmt__c__String"], "alias": "dbt_expectations_source_expect_386e4f19710e5c6a208e046d7a259013", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_386e4f19710e5c6a208e046d7a259013", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_386e4f19710e5c6a208e046d7a259013"}, "created_at": 1688944882.679371, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_386e4f19710e5c6a208e046d7a259013\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_386e4f19710e5c6a208e046d7a259013.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('OWNERID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__CODE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COLLATERAL_MGMT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COVENANT_MGMT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__LOAN__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_1__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_2__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_3__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__RELATIONSHIP__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITY_VALUE__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__STATUS__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__TYPE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__AUTOMATICALLY_ADDED__C' as STRING) as relation_column,\n            cast('BOOLEAN' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LBG_ENTITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LBG_ENTITY_FACILITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LLC_BI__COVENANT_MGMT__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Covenant_Mgmt__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Loan__c__18.4a8bb1626a": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "LLC_BI__Loan__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Loan__c__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_9f3a98edae25f148a0ecb873b761f845.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Loan__c__18.4a8bb1626a", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Loan__c__18"], "alias": "source_length_check_curated_rs_9f3a98edae25f148a0ecb873b761f845", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_9f3a98edae25f148a0ecb873b761f845", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_9f3a98edae25f148a0ecb873b761f845"}, "created_at": 1688944882.681337, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_9f3a98edae25f148a0ecb873b761f845\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_9f3a98edae25f148a0ecb873b761f845.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_curated`\nWHERE\n  LENGTH(LLC_BI__Loan__c) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Loan__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Loan__c__String.5dceaf6594": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LLC_BI__Loan__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Loan__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_69cc05d8330d7b3f9f4463ddcddd54bf.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Loan__c__String.5dceaf6594", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Loan__c__String"], "alias": "dbt_expectations_source_expect_69cc05d8330d7b3f9f4463ddcddd54bf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_69cc05d8330d7b3f9f4463ddcddd54bf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_69cc05d8330d7b3f9f4463ddcddd54bf"}, "created_at": 1688944882.683372, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_69cc05d8330d7b3f9f4463ddcddd54bf\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_69cc05d8330d7b3f9f4463ddcddd54bf.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('OWNERID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__CODE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COLLATERAL_MGMT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COVENANT_MGMT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__LOAN__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_1__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_2__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_3__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__RELATIONSHIP__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITY_VALUE__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__STATUS__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__TYPE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__AUTOMATICALLY_ADDED__C' as STRING) as relation_column,\n            cast('BOOLEAN' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LBG_ENTITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LBG_ENTITY_FACILITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LLC_BI__LOAN__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Loan__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_1__c__100.789f96ba1c": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 100, "column_name": "LLC_BI__Mitigation_Reason_1__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_1__c__100", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_25f29bc74a1c624c4818afd0cf6515e3.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_1__c__100.789f96ba1c", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_1__c__100"], "alias": "source_length_check_curated_rs_25f29bc74a1c624c4818afd0cf6515e3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_25f29bc74a1c624c4818afd0cf6515e3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_25f29bc74a1c624c4818afd0cf6515e3"}, "created_at": 1688944882.685726, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_25f29bc74a1c624c4818afd0cf6515e3\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_25f29bc74a1c624c4818afd0cf6515e3.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_curated`\nWHERE\n  LENGTH(LLC_BI__Mitigation_Reason_1__c) > 100\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Mitigation_Reason_1__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_1__c__String.04e65b63e7": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LLC_BI__Mitigation_Reason_1__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_1__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_1ac1ac18d6c5507389c5856d9a3df843.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_1__c__String.04e65b63e7", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_1__c__String"], "alias": "dbt_expectations_source_expect_1ac1ac18d6c5507389c5856d9a3df843", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_1ac1ac18d6c5507389c5856d9a3df843", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_1ac1ac18d6c5507389c5856d9a3df843"}, "created_at": 1688944882.687629, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_1ac1ac18d6c5507389c5856d9a3df843\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_1ac1ac18d6c5507389c5856d9a3df843.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('OWNERID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__CODE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COLLATERAL_MGMT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COVENANT_MGMT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__LOAN__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_1__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_2__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_3__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__RELATIONSHIP__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITY_VALUE__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__STATUS__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__TYPE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__AUTOMATICALLY_ADDED__C' as STRING) as relation_column,\n            cast('BOOLEAN' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LBG_ENTITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LBG_ENTITY_FACILITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LLC_BI__MITIGATION_REASON_1__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Mitigation_Reason_1__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_2__c__100.d8b3330d6a": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 100, "column_name": "LLC_BI__Mitigation_Reason_2__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_2__c__100", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_b14e6091e3da837606eaeb5058f0a359.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_2__c__100.d8b3330d6a", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_2__c__100"], "alias": "source_length_check_curated_rs_b14e6091e3da837606eaeb5058f0a359", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_b14e6091e3da837606eaeb5058f0a359", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_b14e6091e3da837606eaeb5058f0a359"}, "created_at": 1688944882.68959, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_b14e6091e3da837606eaeb5058f0a359\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_b14e6091e3da837606eaeb5058f0a359.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_curated`\nWHERE\n  LENGTH(LLC_BI__Mitigation_Reason_2__c) > 100\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Mitigation_Reason_2__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_2__c__String.5b09e7f6bd": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LLC_BI__Mitigation_Reason_2__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_2__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_425618dfb03b445842da177ccf1bcd48.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_2__c__String.5b09e7f6bd", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_2__c__String"], "alias": "dbt_expectations_source_expect_425618dfb03b445842da177ccf1bcd48", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_425618dfb03b445842da177ccf1bcd48", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_425618dfb03b445842da177ccf1bcd48"}, "created_at": 1688944882.691267, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_425618dfb03b445842da177ccf1bcd48\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_425618dfb03b445842da177ccf1bcd48.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('OWNERID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__CODE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COLLATERAL_MGMT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COVENANT_MGMT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__LOAN__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_1__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_2__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_3__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__RELATIONSHIP__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITY_VALUE__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__STATUS__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__TYPE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__AUTOMATICALLY_ADDED__C' as STRING) as relation_column,\n            cast('BOOLEAN' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LBG_ENTITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LBG_ENTITY_FACILITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LLC_BI__MITIGATION_REASON_2__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Mitigation_Reason_2__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_3__c__100.37fd3a898d": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 100, "column_name": "LLC_BI__Mitigation_Reason_3__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_3__c__100", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_b9dfdcbb0a2c9244a16ddf485466237e.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_3__c__100.37fd3a898d", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_3__c__100"], "alias": "source_length_check_curated_rs_b9dfdcbb0a2c9244a16ddf485466237e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_b9dfdcbb0a2c9244a16ddf485466237e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_b9dfdcbb0a2c9244a16ddf485466237e"}, "created_at": 1688944882.6932359, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_b9dfdcbb0a2c9244a16ddf485466237e\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_b9dfdcbb0a2c9244a16ddf485466237e.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_curated`\nWHERE\n  LENGTH(LLC_BI__Mitigation_Reason_3__c) > 100\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Mitigation_Reason_3__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_3__c__String.42f80bbc5c": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LLC_BI__Mitigation_Reason_3__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_3__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_2a8ddb3750b175e0a33d9d2c980244fe.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_3__c__String.42f80bbc5c", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_3__c__String"], "alias": "dbt_expectations_source_expect_2a8ddb3750b175e0a33d9d2c980244fe", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_2a8ddb3750b175e0a33d9d2c980244fe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_2a8ddb3750b175e0a33d9d2c980244fe"}, "created_at": 1688944882.694836, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_2a8ddb3750b175e0a33d9d2c980244fe\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_2a8ddb3750b175e0a33d9d2c980244fe.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('OWNERID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__CODE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COLLATERAL_MGMT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COVENANT_MGMT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__LOAN__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_1__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_2__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_3__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__RELATIONSHIP__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITY_VALUE__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__STATUS__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__TYPE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__AUTOMATICALLY_ADDED__C' as STRING) as relation_column,\n            cast('BOOLEAN' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LBG_ENTITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LBG_ENTITY_FACILITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LLC_BI__MITIGATION_REASON_3__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Mitigation_Reason_3__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Relationship__c__18.5aed3da610": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "LLC_BI__Relationship__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Relationship__c__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_1f970b017de1f6cfa0f68e83552e9c98.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Relationship__c__18.5aed3da610", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Relationship__c__18"], "alias": "source_length_check_curated_rs_1f970b017de1f6cfa0f68e83552e9c98", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_1f970b017de1f6cfa0f68e83552e9c98", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_1f970b017de1f6cfa0f68e83552e9c98"}, "created_at": 1688944882.6967812, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_1f970b017de1f6cfa0f68e83552e9c98\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_1f970b017de1f6cfa0f68e83552e9c98.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_curated`\nWHERE\n  LENGTH(LLC_BI__Relationship__c) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Relationship__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Relationship__c__String.7de89ba5a7": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LLC_BI__Relationship__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Relationship__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_df8267d42107ba2bc443112b0678349c.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Relationship__c__String.7de89ba5a7", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Relationship__c__String"], "alias": "dbt_expectations_source_expect_df8267d42107ba2bc443112b0678349c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_df8267d42107ba2bc443112b0678349c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_df8267d42107ba2bc443112b0678349c"}, "created_at": 1688944882.69855, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_df8267d42107ba2bc443112b0678349c\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_df8267d42107ba2bc443112b0678349c.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('OWNERID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__CODE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COLLATERAL_MGMT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COVENANT_MGMT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__LOAN__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_1__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_2__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_3__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__RELATIONSHIP__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITY_VALUE__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__STATUS__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__TYPE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__AUTOMATICALLY_ADDED__C' as STRING) as relation_column,\n            cast('BOOLEAN' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LBG_ENTITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LBG_ENTITY_FACILITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LLC_BI__RELATIONSHIP__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Relationship__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Severity__c__50.d2ba020f91": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 50, "column_name": "LLC_BI__Severity__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Severity__c__50", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_bc7da5698db3fe8b1fe311b5051adf48.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Severity__c__50.d2ba020f91", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Severity__c__50"], "alias": "source_length_check_curated_rs_bc7da5698db3fe8b1fe311b5051adf48", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_bc7da5698db3fe8b1fe311b5051adf48", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_bc7da5698db3fe8b1fe311b5051adf48"}, "created_at": 1688944882.7003598, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_bc7da5698db3fe8b1fe311b5051adf48\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_bc7da5698db3fe8b1fe311b5051adf48.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_curated`\nWHERE\n  LENGTH(LLC_BI__Severity__c) > 50\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Severity__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Severity__c__String.de2fdb8e30": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LLC_BI__Severity__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Severity__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_ea73e81d4388a51cb1af730037ff5a3e.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Severity__c__String.de2fdb8e30", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Severity__c__String"], "alias": "dbt_expectations_source_expect_ea73e81d4388a51cb1af730037ff5a3e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_ea73e81d4388a51cb1af730037ff5a3e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_ea73e81d4388a51cb1af730037ff5a3e"}, "created_at": 1688944882.702137, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_ea73e81d4388a51cb1af730037ff5a3e\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_ea73e81d4388a51cb1af730037ff5a3e.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('OWNERID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__CODE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COLLATERAL_MGMT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COVENANT_MGMT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__LOAN__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_1__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_2__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_3__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__RELATIONSHIP__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITY_VALUE__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__STATUS__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__TYPE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__AUTOMATICALLY_ADDED__C' as STRING) as relation_column,\n            cast('BOOLEAN' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LBG_ENTITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LBG_ENTITY_FACILITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LLC_BI__SEVERITY__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Severity__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Status__c__255.1d2d623157": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "LLC_BI__Status__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Status__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_3bad4ddaa081cf1a7beb3f56467ddb6b.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Status__c__255.1d2d623157", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Status__c__255"], "alias": "source_length_check_curated_rs_3bad4ddaa081cf1a7beb3f56467ddb6b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_3bad4ddaa081cf1a7beb3f56467ddb6b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_3bad4ddaa081cf1a7beb3f56467ddb6b"}, "created_at": 1688944882.7040849, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_3bad4ddaa081cf1a7beb3f56467ddb6b\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_3bad4ddaa081cf1a7beb3f56467ddb6b.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_curated`\nWHERE\n  LENGTH(LLC_BI__Status__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Status__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Status__c__String.1b7e38f5b8": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LLC_BI__Status__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Status__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_d32f89d5c52da8143dd67ddcab252416.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Status__c__String.1b7e38f5b8", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Status__c__String"], "alias": "dbt_expectations_source_expect_d32f89d5c52da8143dd67ddcab252416", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_d32f89d5c52da8143dd67ddcab252416", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_d32f89d5c52da8143dd67ddcab252416"}, "created_at": 1688944882.705748, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_d32f89d5c52da8143dd67ddcab252416\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_d32f89d5c52da8143dd67ddcab252416.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('OWNERID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__CODE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COLLATERAL_MGMT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COVENANT_MGMT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__LOAN__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_1__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_2__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_3__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__RELATIONSHIP__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITY_VALUE__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__STATUS__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__TYPE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__AUTOMATICALLY_ADDED__C' as STRING) as relation_column,\n            cast('BOOLEAN' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LBG_ENTITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LBG_ENTITY_FACILITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LLC_BI__STATUS__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Status__c", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Type__c.ae836651fc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LLC_BI__Type__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Type__c", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_a9256a3a704bdc00b93ba5e050121471.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Type__c.ae836651fc", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Type__c"], "alias": "source_not_null_curated_rskcsp_a9256a3a704bdc00b93ba5e050121471", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_a9256a3a704bdc00b93ba5e050121471", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_a9256a3a704bdc00b93ba5e050121471"}, "created_at": 1688944882.707705, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_a9256a3a704bdc00b93ba5e050121471\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_a9256a3a704bdc00b93ba5e050121471.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect LLC_BI__Type__c\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_curated`\nwhere LLC_BI__Type__c is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Type__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Type__c__255.411cc41043": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "LLC_BI__Type__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Type__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_365f2a454acba0506c7a81a9dbdfc65d.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Type__c__255.411cc41043", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Type__c__255"], "alias": "source_length_check_curated_rs_365f2a454acba0506c7a81a9dbdfc65d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_365f2a454acba0506c7a81a9dbdfc65d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_365f2a454acba0506c7a81a9dbdfc65d"}, "created_at": 1688944882.7084641, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_365f2a454acba0506c7a81a9dbdfc65d\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_365f2a454acba0506c7a81a9dbdfc65d.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_curated`\nWHERE\n  LENGTH(LLC_BI__Type__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Type__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Type__c__String.b9dad0d8b9": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LLC_BI__Type__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Type__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_7ec60588caff93d5faf3a6800daafff5.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Type__c__String.b9dad0d8b9", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Type__c__String"], "alias": "dbt_expectations_source_expect_7ec60588caff93d5faf3a6800daafff5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_7ec60588caff93d5faf3a6800daafff5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_7ec60588caff93d5faf3a6800daafff5"}, "created_at": 1688944882.710206, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_7ec60588caff93d5faf3a6800daafff5\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_7ec60588caff93d5faf3a6800daafff5.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('OWNERID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__CODE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COLLATERAL_MGMT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COVENANT_MGMT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__LOAN__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_1__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_2__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_3__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__RELATIONSHIP__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITY_VALUE__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__STATUS__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__TYPE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__AUTOMATICALLY_ADDED__C' as STRING) as relation_column,\n            cast('BOOLEAN' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LBG_ENTITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LBG_ENTITY_FACILITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LLC_BI__TYPE__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Type__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_Name__80.a1682ca3cf": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 80, "column_name": "Name", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_policy_exception_curated_Name__80", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_1cfe21c6441acc41452347cd140cb0a1.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_Name__80.a1682ca3cf", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_policy_exception_curated_Name__80"], "alias": "source_length_check_curated_rs_1cfe21c6441acc41452347cd140cb0a1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_1cfe21c6441acc41452347cd140cb0a1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_1cfe21c6441acc41452347cd140cb0a1"}, "created_at": 1688944882.712012, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_1cfe21c6441acc41452347cd140cb0a1\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_1cfe21c6441acc41452347cd140cb0a1.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_curated`\nWHERE\n  LENGTH(Name) > 80\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Name", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_Name__String.d509861d46": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "Name", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_Name__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_315818f019cdf7e1439b6465cccb61d2.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_Name__String.d509861d46", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_Name__String"], "alias": "dbt_expectations_source_expect_315818f019cdf7e1439b6465cccb61d2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_315818f019cdf7e1439b6465cccb61d2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_315818f019cdf7e1439b6465cccb61d2"}, "created_at": 1688944882.713772, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_315818f019cdf7e1439b6465cccb61d2\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_315818f019cdf7e1439b6465cccb61d2.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('OWNERID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__CODE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COLLATERAL_MGMT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COVENANT_MGMT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__LOAN__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_1__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_2__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_3__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__RELATIONSHIP__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITY_VALUE__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__STATUS__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__TYPE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__AUTOMATICALLY_ADDED__C' as STRING) as relation_column,\n            cast('BOOLEAN' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LBG_ENTITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LBG_ENTITY_FACILITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'NAME'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Name", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_curated_OwnerId.90d12e8647": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "OwnerId", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_policy_exception_curated_OwnerId", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_80c6a99d83f2101e4c711810b3688ae0.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_curated_OwnerId.90d12e8647", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_policy_exception_curated_OwnerId"], "alias": "source_not_null_curated_rskcsp_80c6a99d83f2101e4c711810b3688ae0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_80c6a99d83f2101e4c711810b3688ae0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_80c6a99d83f2101e4c711810b3688ae0"}, "created_at": 1688944882.71575, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_80c6a99d83f2101e4c711810b3688ae0\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_80c6a99d83f2101e4c711810b3688ae0.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect OwnerId\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_curated`\nwhere OwnerId is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "OwnerId", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_OwnerId__18.3b9be4090b": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "OwnerId", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_policy_exception_curated_OwnerId__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_f42b1baf330bd09dfb037054da475b7a.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_OwnerId__18.3b9be4090b", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_policy_exception_curated_OwnerId__18"], "alias": "source_length_check_curated_rs_f42b1baf330bd09dfb037054da475b7a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_f42b1baf330bd09dfb037054da475b7a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_f42b1baf330bd09dfb037054da475b7a"}, "created_at": 1688944882.7165089, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_f42b1baf330bd09dfb037054da475b7a\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_f42b1baf330bd09dfb037054da475b7a.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_curated`\nWHERE\n  LENGTH(OwnerId) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "OwnerId", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_OwnerId__String.6242421658": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "OwnerId", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_OwnerId__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_2d83cfbc46bb0a0a2e2dac8776e4ac93.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_OwnerId__String.6242421658", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_OwnerId__String"], "alias": "dbt_expectations_source_expect_2d83cfbc46bb0a0a2e2dac8776e4ac93", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_2d83cfbc46bb0a0a2e2dac8776e4ac93", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_2d83cfbc46bb0a0a2e2dac8776e4ac93"}, "created_at": 1688944882.718157, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_2d83cfbc46bb0a0a2e2dac8776e4ac93\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_2d83cfbc46bb0a0a2e2dac8776e4ac93.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('OWNERID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__CODE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COLLATERAL_MGMT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COVENANT_MGMT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__LOAN__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_1__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_2__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_3__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__RELATIONSHIP__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITY_VALUE__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__STATUS__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__TYPE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__AUTOMATICALLY_ADDED__C' as STRING) as relation_column,\n            cast('BOOLEAN' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LBG_ENTITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LBG_ENTITY_FACILITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'OWNERID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "OwnerId", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_RM_Mitigation_Comments__c__32768.0888494490": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 32768, "column_name": "RM_Mitigation_Comments__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_policy_exception_curated_RM_Mitigation_Comments__c__32768", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_218918b171803be1cb26fe651ae53ee5.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_RM_Mitigation_Comments__c__32768.0888494490", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_policy_exception_curated_RM_Mitigation_Comments__c__32768"], "alias": "source_length_check_curated_rs_218918b171803be1cb26fe651ae53ee5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_218918b171803be1cb26fe651ae53ee5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_218918b171803be1cb26fe651ae53ee5"}, "created_at": 1688944882.7203681, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_218918b171803be1cb26fe651ae53ee5\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_218918b171803be1cb26fe651ae53ee5.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_curated`\nWHERE\n  LENGTH(RM_Mitigation_Comments__c) > 32768\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "RM_Mitigation_Comments__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_RM_Mitigation_Comments__c__String.f68bd3ff46": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "RM_Mitigation_Comments__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_RM_Mitigation_Comments__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_322ed50bb3aabc13febedc403ee6b14c.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_RM_Mitigation_Comments__c__String.f68bd3ff46", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_RM_Mitigation_Comments__c__String"], "alias": "dbt_expectations_source_expect_322ed50bb3aabc13febedc403ee6b14c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_322ed50bb3aabc13febedc403ee6b14c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_322ed50bb3aabc13febedc403ee6b14c"}, "created_at": 1688944882.72209, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_322ed50bb3aabc13febedc403ee6b14c\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_322ed50bb3aabc13febedc403ee6b14c.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('OWNERID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__CODE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COLLATERAL_MGMT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COVENANT_MGMT__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__LOAN__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_1__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_2__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__MITIGATION_REASON_3__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__RELATIONSHIP__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITY_VALUE__C' as STRING) as relation_column,\n            cast('NUMERIC' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__STATUS__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__TYPE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__AUTOMATICALLY_ADDED__C' as STRING) as relation_column,\n            cast('BOOLEAN' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LBG_ENTITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CCS_LBG_ENTITY_FACILITY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'RM_MITIGATION_COMMENTS__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "RM_Mitigation_Comments__c", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CreatedById.8f15c7a2b3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CreatedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_mitigation_reason_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CreatedById", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_54b2439a7d3f3c7fdaadbd6c075ccf90.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CreatedById.8f15c7a2b3", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CreatedById"], "alias": "source_not_null_curated_rskcsp_54b2439a7d3f3c7fdaadbd6c075ccf90", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_54b2439a7d3f3c7fdaadbd6c075ccf90", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_54b2439a7d3f3c7fdaadbd6c075ccf90"}, "created_at": 1688944882.7241511, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_54b2439a7d3f3c7fdaadbd6c075ccf90\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_mitigation_reason_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_54b2439a7d3f3c7fdaadbd6c075ccf90.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CreatedById\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_mitigation_reason_curated`\nwhere CreatedById is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CreatedById", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CreatedById__18.20fbf00cf6": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "CreatedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_mitigation_reason_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CreatedById__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_a9773a1c6ddb97f2d76cf28ce221c574.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CreatedById__18.20fbf00cf6", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CreatedById__18"], "alias": "source_length_check_curated_rs_a9773a1c6ddb97f2d76cf28ce221c574", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_a9773a1c6ddb97f2d76cf28ce221c574", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_a9773a1c6ddb97f2d76cf28ce221c574"}, "created_at": 1688944882.7249181, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_a9773a1c6ddb97f2d76cf28ce221c574\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_mitigation_reason_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_a9773a1c6ddb97f2d76cf28ce221c574.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_mitigation_reason_curated`\nWHERE\n  LENGTH(CreatedById) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CreatedById", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CreatedById__String.53f4c129f3": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CreatedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_mitigation_reason_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CreatedById__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_07d8242953286b35c46208e55ad44129.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CreatedById__String.53f4c129f3", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CreatedById__String"], "alias": "dbt_expectations_source_expect_07d8242953286b35c46208e55ad44129", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_07d8242953286b35c46208e55ad44129", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_07d8242953286b35c46208e55ad44129"}, "created_at": 1688944882.726516, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_07d8242953286b35c46208e55ad44129\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_mitigation_reason_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_07d8242953286b35c46208e55ad44129.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__POLICY_EXCEPTION_TEMPLATE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COMMENT_REQUIRED__C' as STRING) as relation_column,\n            cast('BOOLEAN' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__REASON__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__LOOKUPKEY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CREATEDBYID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CreatedById", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CreatedDate.f372cd98a2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CreatedDate", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_mitigation_reason_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CreatedDate", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_8920e0f01ed1500228f9af6e4824cf3d.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CreatedDate.f372cd98a2", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CreatedDate"], "alias": "source_not_null_curated_rskcsp_8920e0f01ed1500228f9af6e4824cf3d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_8920e0f01ed1500228f9af6e4824cf3d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_8920e0f01ed1500228f9af6e4824cf3d"}, "created_at": 1688944882.72845, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_8920e0f01ed1500228f9af6e4824cf3d\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_mitigation_reason_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_8920e0f01ed1500228f9af6e4824cf3d.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CreatedDate\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_mitigation_reason_curated`\nwhere CreatedDate is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CreatedDate", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CurrencyIsoCode__3.3f7c587be4": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 3, "column_name": "CurrencyIsoCode", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_mitigation_reason_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CurrencyIsoCode__3", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_072204ec1bbe15f40f346310f036d762.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CurrencyIsoCode__3.3f7c587be4", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CurrencyIsoCode__3"], "alias": "source_length_check_curated_rs_072204ec1bbe15f40f346310f036d762", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_072204ec1bbe15f40f346310f036d762", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_072204ec1bbe15f40f346310f036d762"}, "created_at": 1688944882.729204, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_072204ec1bbe15f40f346310f036d762\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_mitigation_reason_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_072204ec1bbe15f40f346310f036d762.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_mitigation_reason_curated`\nWHERE\n  LENGTH(CurrencyIsoCode) > 3\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CurrencyIsoCode", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CurrencyIsoCode__String.21a32da4b0": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CurrencyIsoCode", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_mitigation_reason_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CurrencyIsoCode__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_b022943c07f8fd9996c6a4c8d7345f9d.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CurrencyIsoCode__String.21a32da4b0", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CurrencyIsoCode__String"], "alias": "dbt_expectations_source_expect_b022943c07f8fd9996c6a4c8d7345f9d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_b022943c07f8fd9996c6a4c8d7345f9d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_b022943c07f8fd9996c6a4c8d7345f9d"}, "created_at": 1688944882.7309482, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_b022943c07f8fd9996c6a4c8d7345f9d\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_mitigation_reason_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_b022943c07f8fd9996c6a4c8d7345f9d.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__POLICY_EXCEPTION_TEMPLATE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COMMENT_REQUIRED__C' as STRING) as relation_column,\n            cast('BOOLEAN' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__REASON__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__LOOKUPKEY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CURRENCYISOCODE'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CurrencyIsoCode", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Id.aa1584fa03": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "Id", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_mitigation_reason_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Id", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_b19af9bd5b76639a684b5ea4232bcaed.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Id.aa1584fa03", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Id"], "alias": "source_not_null_curated_rskcsp_b19af9bd5b76639a684b5ea4232bcaed", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_b19af9bd5b76639a684b5ea4232bcaed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_b19af9bd5b76639a684b5ea4232bcaed"}, "created_at": 1688944882.732741, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_b19af9bd5b76639a684b5ea4232bcaed\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_mitigation_reason_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_b19af9bd5b76639a684b5ea4232bcaed.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect Id\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_mitigation_reason_curated`\nwhere Id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Id", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Id__18.c742ea923c": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "Id", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_mitigation_reason_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Id__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_b8fac68247b14cbb8287cc6ecb694123.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Id__18.c742ea923c", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Id__18"], "alias": "source_length_check_curated_rs_b8fac68247b14cbb8287cc6ecb694123", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_b8fac68247b14cbb8287cc6ecb694123", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_b8fac68247b14cbb8287cc6ecb694123"}, "created_at": 1688944882.733641, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_b8fac68247b14cbb8287cc6ecb694123\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_mitigation_reason_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_b8fac68247b14cbb8287cc6ecb694123.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_mitigation_reason_curated`\nWHERE\n  LENGTH(Id) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Id", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Id__String.f020306799": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "Id", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_mitigation_reason_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Id__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_72f12f4c6808aecc75b1c4b098bda57c.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Id__String.f020306799", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Id__String"], "alias": "dbt_expectations_source_expect_72f12f4c6808aecc75b1c4b098bda57c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_72f12f4c6808aecc75b1c4b098bda57c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_72f12f4c6808aecc75b1c4b098bda57c"}, "created_at": 1688944882.735271, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_72f12f4c6808aecc75b1c4b098bda57c\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_mitigation_reason_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_72f12f4c6808aecc75b1c4b098bda57c.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__POLICY_EXCEPTION_TEMPLATE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COMMENT_REQUIRED__C' as STRING) as relation_column,\n            cast('BOOLEAN' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__REASON__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__LOOKUPKEY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Id", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LastModifiedById.7a824f2775": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LastModifiedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_mitigation_reason_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LastModifiedById", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_05626174377f0b040012b8a2925ec184.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LastModifiedById.7a824f2775", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LastModifiedById"], "alias": "source_not_null_curated_rskcsp_05626174377f0b040012b8a2925ec184", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_05626174377f0b040012b8a2925ec184", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_05626174377f0b040012b8a2925ec184"}, "created_at": 1688944882.737223, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_05626174377f0b040012b8a2925ec184\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_mitigation_reason_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_05626174377f0b040012b8a2925ec184.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect LastModifiedById\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_mitigation_reason_curated`\nwhere LastModifiedById is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LastModifiedById", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LastModifiedById__18.c8e176bb90": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "LastModifiedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_mitigation_reason_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LastModifiedById__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_ef1c6fc00786bfc971137b1dede83b53.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LastModifiedById__18.c8e176bb90", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LastModifiedById__18"], "alias": "source_length_check_curated_rs_ef1c6fc00786bfc971137b1dede83b53", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_ef1c6fc00786bfc971137b1dede83b53", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_ef1c6fc00786bfc971137b1dede83b53"}, "created_at": 1688944882.737972, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_ef1c6fc00786bfc971137b1dede83b53\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_mitigation_reason_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_ef1c6fc00786bfc971137b1dede83b53.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_mitigation_reason_curated`\nWHERE\n  LENGTH(LastModifiedById) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LastModifiedById", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LastModifiedById__String.2469e45758": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LastModifiedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_mitigation_reason_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LastModifiedById__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_f4a34de711063167b55526700fed73ff.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LastModifiedById__String.2469e45758", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LastModifiedById__String"], "alias": "dbt_expectations_source_expect_f4a34de711063167b55526700fed73ff", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_f4a34de711063167b55526700fed73ff", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_f4a34de711063167b55526700fed73ff"}, "created_at": 1688944882.739709, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_f4a34de711063167b55526700fed73ff\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_mitigation_reason_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_f4a34de711063167b55526700fed73ff.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__POLICY_EXCEPTION_TEMPLATE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COMMENT_REQUIRED__C' as STRING) as relation_column,\n            cast('BOOLEAN' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__REASON__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__LOOKUPKEY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LASTMODIFIEDBYID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LastModifiedById", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LastModifiedDate.4cfd65193a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LastModifiedDate", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_mitigation_reason_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LastModifiedDate", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_fc88c92afc0e56cad08ae59229a99cfd.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LastModifiedDate.4cfd65193a", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LastModifiedDate"], "alias": "source_not_null_curated_rskcsp_fc88c92afc0e56cad08ae59229a99cfd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_fc88c92afc0e56cad08ae59229a99cfd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_fc88c92afc0e56cad08ae59229a99cfd"}, "created_at": 1688944882.741508, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_fc88c92afc0e56cad08ae59229a99cfd\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_mitigation_reason_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_fc88c92afc0e56cad08ae59229a99cfd.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect LastModifiedDate\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_mitigation_reason_curated`\nwhere LastModifiedDate is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LastModifiedDate", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Comment_Required__c.c5fc52a47d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LLC_BI__Comment_Required__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_mitigation_reason_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Comment_Required__c", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_9267fb4994d9b557e5cd3b215b1bee5e.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Comment_Required__c.c5fc52a47d", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Comment_Required__c"], "alias": "source_not_null_curated_rskcsp_9267fb4994d9b557e5cd3b215b1bee5e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_9267fb4994d9b557e5cd3b215b1bee5e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_9267fb4994d9b557e5cd3b215b1bee5e"}, "created_at": 1688944882.7424152, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_9267fb4994d9b557e5cd3b215b1bee5e\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_mitigation_reason_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_9267fb4994d9b557e5cd3b215b1bee5e.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect LLC_BI__Comment_Required__c\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_mitigation_reason_curated`\nwhere LLC_BI__Comment_Required__c is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Comment_Required__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__lookupKey__c__255.dfa56cf8ed": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "LLC_BI__lookupKey__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_mitigation_reason_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__lookupKey__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_10e3ce880f17fe9edb0f52f57370afaf.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__lookupKey__c__255.dfa56cf8ed", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__lookupKey__c__255"], "alias": "source_length_check_curated_rs_10e3ce880f17fe9edb0f52f57370afaf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_10e3ce880f17fe9edb0f52f57370afaf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_10e3ce880f17fe9edb0f52f57370afaf"}, "created_at": 1688944882.743158, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_10e3ce880f17fe9edb0f52f57370afaf\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_mitigation_reason_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_10e3ce880f17fe9edb0f52f57370afaf.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_mitigation_reason_curated`\nWHERE\n  LENGTH(LLC_BI__lookupKey__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__lookupKey__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__lookupKey__c__String.ddac3dce7e": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LLC_BI__lookupKey__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_mitigation_reason_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__lookupKey__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_2291dc336332c117042f6de70d609de2.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__lookupKey__c__String.ddac3dce7e", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__lookupKey__c__String"], "alias": "dbt_expectations_source_expect_2291dc336332c117042f6de70d609de2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_2291dc336332c117042f6de70d609de2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_2291dc336332c117042f6de70d609de2"}, "created_at": 1688944882.7447932, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_2291dc336332c117042f6de70d609de2\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_mitigation_reason_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_2291dc336332c117042f6de70d609de2.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__POLICY_EXCEPTION_TEMPLATE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COMMENT_REQUIRED__C' as STRING) as relation_column,\n            cast('BOOLEAN' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__REASON__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__LOOKUPKEY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LLC_BI__LOOKUPKEY__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__lookupKey__c", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Policy_Exception_Template__c.e02b2dcdda": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LLC_BI__Policy_Exception_Template__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_mitigation_reason_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Policy_Exception_Template__c", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_938a84eae6507b2a990d845f6d53091b.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Policy_Exception_Template__c.e02b2dcdda", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Policy_Exception_Template__c"], "alias": "source_not_null_curated_rskcsp_938a84eae6507b2a990d845f6d53091b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_938a84eae6507b2a990d845f6d53091b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_938a84eae6507b2a990d845f6d53091b"}, "created_at": 1688944882.746742, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_938a84eae6507b2a990d845f6d53091b\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_mitigation_reason_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_938a84eae6507b2a990d845f6d53091b.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect LLC_BI__Policy_Exception_Template__c\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_mitigation_reason_curated`\nwhere LLC_BI__Policy_Exception_Template__c is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Policy_Exception_Template__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Policy_Exception_Template__c__18.001f26bf21": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "LLC_BI__Policy_Exception_Template__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_mitigation_reason_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Policy_Exception_Template__c__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_1d02d8c96fdabe0a88f0e398293059cf.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Policy_Exception_Template__c__18.001f26bf21", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Policy_Exception_Template__c__18"], "alias": "source_length_check_curated_rs_1d02d8c96fdabe0a88f0e398293059cf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_1d02d8c96fdabe0a88f0e398293059cf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_1d02d8c96fdabe0a88f0e398293059cf"}, "created_at": 1688944882.747488, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_1d02d8c96fdabe0a88f0e398293059cf\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_mitigation_reason_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_1d02d8c96fdabe0a88f0e398293059cf.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_mitigation_reason_curated`\nWHERE\n  LENGTH(LLC_BI__Policy_Exception_Template__c) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Policy_Exception_Template__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Policy_Exception_Template__c__String.591efa3d29": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LLC_BI__Policy_Exception_Template__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_mitigation_reason_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Policy_Exception_Template__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_e89334e6d11dc0bc71fea1a6e3f6e0d1.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Policy_Exception_Template__c__String.591efa3d29", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Policy_Exception_Template__c__String"], "alias": "dbt_expectations_source_expect_e89334e6d11dc0bc71fea1a6e3f6e0d1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_e89334e6d11dc0bc71fea1a6e3f6e0d1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_e89334e6d11dc0bc71fea1a6e3f6e0d1"}, "created_at": 1688944882.7492402, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_e89334e6d11dc0bc71fea1a6e3f6e0d1\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_mitigation_reason_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_e89334e6d11dc0bc71fea1a6e3f6e0d1.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__POLICY_EXCEPTION_TEMPLATE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COMMENT_REQUIRED__C' as STRING) as relation_column,\n            cast('BOOLEAN' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__REASON__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__LOOKUPKEY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LLC_BI__POLICY_EXCEPTION_TEMPLATE__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Policy_Exception_Template__c", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Reason__c.bc18e88fb7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LLC_BI__Reason__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_mitigation_reason_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Reason__c", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_ef5c3fd96254d0dcc1987fb7da6f4f08.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Reason__c.bc18e88fb7", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Reason__c"], "alias": "source_not_null_curated_rskcsp_ef5c3fd96254d0dcc1987fb7da6f4f08", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_ef5c3fd96254d0dcc1987fb7da6f4f08", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_ef5c3fd96254d0dcc1987fb7da6f4f08"}, "created_at": 1688944882.751167, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_ef5c3fd96254d0dcc1987fb7da6f4f08\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_mitigation_reason_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_ef5c3fd96254d0dcc1987fb7da6f4f08.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect LLC_BI__Reason__c\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_mitigation_reason_curated`\nwhere LLC_BI__Reason__c is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Reason__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Reason__c__255.f960b015b9": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "LLC_BI__Reason__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_mitigation_reason_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Reason__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_997e2038b70a30aafa6c19ccf05eae2b.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Reason__c__255.f960b015b9", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Reason__c__255"], "alias": "source_length_check_curated_rs_997e2038b70a30aafa6c19ccf05eae2b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_997e2038b70a30aafa6c19ccf05eae2b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_997e2038b70a30aafa6c19ccf05eae2b"}, "created_at": 1688944882.751926, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_997e2038b70a30aafa6c19ccf05eae2b\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_mitigation_reason_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_997e2038b70a30aafa6c19ccf05eae2b.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_mitigation_reason_curated`\nWHERE\n  LENGTH(LLC_BI__Reason__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Reason__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Reason__c__String.57cf1cebad": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LLC_BI__Reason__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_mitigation_reason_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Reason__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_7b0639be22394c43ea57d58961ba67c4.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Reason__c__String.57cf1cebad", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Reason__c__String"], "alias": "dbt_expectations_source_expect_7b0639be22394c43ea57d58961ba67c4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_7b0639be22394c43ea57d58961ba67c4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_7b0639be22394c43ea57d58961ba67c4"}, "created_at": 1688944882.75352, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_7b0639be22394c43ea57d58961ba67c4\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_mitigation_reason_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_7b0639be22394c43ea57d58961ba67c4.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__POLICY_EXCEPTION_TEMPLATE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COMMENT_REQUIRED__C' as STRING) as relation_column,\n            cast('BOOLEAN' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__REASON__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__LOOKUPKEY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LLC_BI__REASON__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Reason__c", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Name.037ae570b3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "Name", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_mitigation_reason_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Name", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_e449e42f674487f98c2186eeae17ac97.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Name.037ae570b3", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Name"], "alias": "source_not_null_curated_rskcsp_e449e42f674487f98c2186eeae17ac97", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_e449e42f674487f98c2186eeae17ac97", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_e449e42f674487f98c2186eeae17ac97"}, "created_at": 1688944882.755662, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_e449e42f674487f98c2186eeae17ac97\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_mitigation_reason_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_e449e42f674487f98c2186eeae17ac97.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect Name\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_mitigation_reason_curated`\nwhere Name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Name", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Name__80.47a6832554": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 80, "column_name": "Name", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_mitigation_reason_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Name__80", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_1202112e00b3713905376b56b18da33b.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Name__80.47a6832554", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Name__80"], "alias": "source_length_check_curated_rs_1202112e00b3713905376b56b18da33b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_1202112e00b3713905376b56b18da33b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_1202112e00b3713905376b56b18da33b"}, "created_at": 1688944882.756408, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_1202112e00b3713905376b56b18da33b\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_mitigation_reason_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_1202112e00b3713905376b56b18da33b.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_mitigation_reason_curated`\nWHERE\n  LENGTH(Name) > 80\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Name", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Name__String.28877ebcc6": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "Name", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_mitigation_reason_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Name__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_af3e8175a23d8b53d033e5b748d81916.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Name__String.28877ebcc6", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Name__String"], "alias": "dbt_expectations_source_expect_af3e8175a23d8b53d033e5b748d81916", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_af3e8175a23d8b53d033e5b748d81916", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_af3e8175a23d8b53d033e5b748d81916"}, "created_at": 1688944882.758141, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_af3e8175a23d8b53d033e5b748d81916\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_mitigation_reason_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_af3e8175a23d8b53d033e5b748d81916.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__POLICY_EXCEPTION_TEMPLATE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__COMMENT_REQUIRED__C' as STRING) as relation_column,\n            cast('BOOLEAN' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__REASON__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__LOOKUPKEY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'NAME'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Name", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_template_curated_CreatedById.41f8048cdb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CreatedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_template_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_policy_exception_template_curated_CreatedById", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_b5e910c82c50b94febf6e71cbbc7f445.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_template_curated_CreatedById.41f8048cdb", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_policy_exception_template_curated_CreatedById"], "alias": "source_not_null_curated_rskcsp_b5e910c82c50b94febf6e71cbbc7f445", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_b5e910c82c50b94febf6e71cbbc7f445", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_b5e910c82c50b94febf6e71cbbc7f445"}, "created_at": 1688944882.7601779, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_b5e910c82c50b94febf6e71cbbc7f445\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_template_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_b5e910c82c50b94febf6e71cbbc7f445.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CreatedById\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_template_curated`\nwhere CreatedById is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CreatedById", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_CreatedById__18.065c8d94ea": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "CreatedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_template_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_policy_exception_template_curated_CreatedById__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_fb61b260d70861b11299448fc785f946.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_CreatedById__18.065c8d94ea", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_policy_exception_template_curated_CreatedById__18"], "alias": "source_length_check_curated_rs_fb61b260d70861b11299448fc785f946", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_fb61b260d70861b11299448fc785f946", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_fb61b260d70861b11299448fc785f946"}, "created_at": 1688944882.760938, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_fb61b260d70861b11299448fc785f946\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_template_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_fb61b260d70861b11299448fc785f946.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_template_curated`\nWHERE\n  LENGTH(CreatedById) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CreatedById", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_CreatedById__String.d7e215f31e": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CreatedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_template_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_CreatedById__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_fde87b501fe464185aea63ebe5e948b2.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_CreatedById__String.d7e215f31e", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_CreatedById__String"], "alias": "dbt_expectations_source_expect_fde87b501fe464185aea63ebe5e948b2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_fde87b501fe464185aea63ebe5e948b2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_fde87b501fe464185aea63ebe5e948b2"}, "created_at": 1688944882.762568, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_fde87b501fe464185aea63ebe5e948b2\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_template_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_fde87b501fe464185aea63ebe5e948b2.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('OWNERID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__ACTIVE__C' as STRING) as relation_column,\n            cast('BOOLEAN' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__CODE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__DESCRIPTION__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__END_DATE__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITIES__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__START_DATE__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__TYPE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__LOOKUPKEY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CREATEDBYID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CreatedById", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_template_curated_CreatedDate.d964e9e670": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CreatedDate", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_template_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_policy_exception_template_curated_CreatedDate", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_8d60bf5a55bab4e61299eb5b416d2274.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_template_curated_CreatedDate.d964e9e670", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_policy_exception_template_curated_CreatedDate"], "alias": "source_not_null_curated_rskcsp_8d60bf5a55bab4e61299eb5b416d2274", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_8d60bf5a55bab4e61299eb5b416d2274", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_8d60bf5a55bab4e61299eb5b416d2274"}, "created_at": 1688944882.7644968, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_8d60bf5a55bab4e61299eb5b416d2274\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_template_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_8d60bf5a55bab4e61299eb5b416d2274.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect CreatedDate\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_template_curated`\nwhere CreatedDate is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CreatedDate", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_CurrencyIsoCode__3.54267a49c6": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 3, "column_name": "CurrencyIsoCode", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_template_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_policy_exception_template_curated_CurrencyIsoCode__3", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_77204dd12d240e9e4c4a8ed7f177b39b.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_CurrencyIsoCode__3.54267a49c6", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_policy_exception_template_curated_CurrencyIsoCode__3"], "alias": "source_length_check_curated_rs_77204dd12d240e9e4c4a8ed7f177b39b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_77204dd12d240e9e4c4a8ed7f177b39b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_77204dd12d240e9e4c4a8ed7f177b39b"}, "created_at": 1688944882.765244, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_77204dd12d240e9e4c4a8ed7f177b39b\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_template_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_77204dd12d240e9e4c4a8ed7f177b39b.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_template_curated`\nWHERE\n  LENGTH(CurrencyIsoCode) > 3\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CurrencyIsoCode", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_CurrencyIsoCode__String.27ec77a5a6": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "CurrencyIsoCode", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_template_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_CurrencyIsoCode__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_f0fa653fa84a65e0ab65a694b2e0c3d5.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_CurrencyIsoCode__String.27ec77a5a6", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_CurrencyIsoCode__String"], "alias": "dbt_expectations_source_expect_f0fa653fa84a65e0ab65a694b2e0c3d5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_f0fa653fa84a65e0ab65a694b2e0c3d5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_f0fa653fa84a65e0ab65a694b2e0c3d5"}, "created_at": 1688944882.766997, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_f0fa653fa84a65e0ab65a694b2e0c3d5\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_template_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_f0fa653fa84a65e0ab65a694b2e0c3d5.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('OWNERID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__ACTIVE__C' as STRING) as relation_column,\n            cast('BOOLEAN' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__CODE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__DESCRIPTION__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__END_DATE__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITIES__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__START_DATE__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__TYPE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__LOOKUPKEY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CURRENCYISOCODE'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "CurrencyIsoCode", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_template_curated_Id.74cbfe3f85": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "Id", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_template_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_policy_exception_template_curated_Id", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_4864fc0da5bc4341614a673dde73acd5.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_template_curated_Id.74cbfe3f85", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_policy_exception_template_curated_Id"], "alias": "source_not_null_curated_rskcsp_4864fc0da5bc4341614a673dde73acd5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_4864fc0da5bc4341614a673dde73acd5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_4864fc0da5bc4341614a673dde73acd5"}, "created_at": 1688944882.768939, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_4864fc0da5bc4341614a673dde73acd5\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_template_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_4864fc0da5bc4341614a673dde73acd5.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect Id\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_template_curated`\nwhere Id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Id", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_Id__18.c89d06ce8f": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "Id", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_template_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_policy_exception_template_curated_Id__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_6f76d984957292dd075778fde677b18b.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_Id__18.c89d06ce8f", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_policy_exception_template_curated_Id__18"], "alias": "source_length_check_curated_rs_6f76d984957292dd075778fde677b18b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_6f76d984957292dd075778fde677b18b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_6f76d984957292dd075778fde677b18b"}, "created_at": 1688944882.769699, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_6f76d984957292dd075778fde677b18b\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_template_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_6f76d984957292dd075778fde677b18b.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_template_curated`\nWHERE\n  LENGTH(Id) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Id", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_Id__String.fd3aee3677": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "Id", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_template_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_Id__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_474aee16bfa6e9366a91439238d482de.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_Id__String.fd3aee3677", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_Id__String"], "alias": "dbt_expectations_source_expect_474aee16bfa6e9366a91439238d482de", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_474aee16bfa6e9366a91439238d482de", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_474aee16bfa6e9366a91439238d482de"}, "created_at": 1688944882.77132, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_474aee16bfa6e9366a91439238d482de\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_template_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_474aee16bfa6e9366a91439238d482de.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('OWNERID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__ACTIVE__C' as STRING) as relation_column,\n            cast('BOOLEAN' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__CODE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__DESCRIPTION__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__END_DATE__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITIES__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__START_DATE__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__TYPE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__LOOKUPKEY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Id", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_template_curated_LastModifiedById.78c3b1472e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LastModifiedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_template_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_policy_exception_template_curated_LastModifiedById", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_488cd8a6d303d426d2423ec73a89af4c.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_template_curated_LastModifiedById.78c3b1472e", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_policy_exception_template_curated_LastModifiedById"], "alias": "source_not_null_curated_rskcsp_488cd8a6d303d426d2423ec73a89af4c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_488cd8a6d303d426d2423ec73a89af4c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_488cd8a6d303d426d2423ec73a89af4c"}, "created_at": 1688944882.7732742, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_488cd8a6d303d426d2423ec73a89af4c\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_template_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_488cd8a6d303d426d2423ec73a89af4c.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect LastModifiedById\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_template_curated`\nwhere LastModifiedById is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LastModifiedById", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LastModifiedById__18.c0346145fc": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "LastModifiedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_template_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LastModifiedById__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_a32d34457a0455b302abb82d9a8108d0.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LastModifiedById__18.c0346145fc", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LastModifiedById__18"], "alias": "source_length_check_curated_rs_a32d34457a0455b302abb82d9a8108d0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_a32d34457a0455b302abb82d9a8108d0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_a32d34457a0455b302abb82d9a8108d0"}, "created_at": 1688944882.7740328, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_a32d34457a0455b302abb82d9a8108d0\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_template_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_a32d34457a0455b302abb82d9a8108d0.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_template_curated`\nWHERE\n  LENGTH(LastModifiedById) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LastModifiedById", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LastModifiedById__String.47ccc8d735": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LastModifiedById", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_template_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LastModifiedById__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_b49ac9443a489ad97b783b90e616ff37.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LastModifiedById__String.47ccc8d735", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LastModifiedById__String"], "alias": "dbt_expectations_source_expect_b49ac9443a489ad97b783b90e616ff37", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_b49ac9443a489ad97b783b90e616ff37", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_b49ac9443a489ad97b783b90e616ff37"}, "created_at": 1688944882.775811, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_b49ac9443a489ad97b783b90e616ff37\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_template_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_b49ac9443a489ad97b783b90e616ff37.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('OWNERID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__ACTIVE__C' as STRING) as relation_column,\n            cast('BOOLEAN' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__CODE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__DESCRIPTION__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__END_DATE__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITIES__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__START_DATE__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__TYPE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__LOOKUPKEY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LASTMODIFIEDBYID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LastModifiedById", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_template_curated_LastModifiedDate.accd8ea07a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LastModifiedDate", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_template_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_policy_exception_template_curated_LastModifiedDate", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_0772c81e1738284126e69947d1293fbd.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_template_curated_LastModifiedDate.accd8ea07a", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_policy_exception_template_curated_LastModifiedDate"], "alias": "source_not_null_curated_rskcsp_0772c81e1738284126e69947d1293fbd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_0772c81e1738284126e69947d1293fbd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_0772c81e1738284126e69947d1293fbd"}, "created_at": 1688944882.777621, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_0772c81e1738284126e69947d1293fbd\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_template_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_0772c81e1738284126e69947d1293fbd.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect LastModifiedDate\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_template_curated`\nwhere LastModifiedDate is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LastModifiedDate", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Active__c.efe1fead37": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LLC_BI__Active__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_template_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Active__c", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_2dccb16d66ddd0832e01963dcb6c2463.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Active__c.efe1fead37", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Active__c"], "alias": "source_not_null_curated_rskcsp_2dccb16d66ddd0832e01963dcb6c2463", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_2dccb16d66ddd0832e01963dcb6c2463", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_2dccb16d66ddd0832e01963dcb6c2463"}, "created_at": 1688944882.7785192, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_2dccb16d66ddd0832e01963dcb6c2463\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_template_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_2dccb16d66ddd0832e01963dcb6c2463.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect LLC_BI__Active__c\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_template_curated`\nwhere LLC_BI__Active__c is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Active__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Code__c__50.c7355d4831": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 50, "column_name": "LLC_BI__Code__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_template_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Code__c__50", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_8cd0d75a71d8a1890e12923c0cbff898.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Code__c__50.c7355d4831", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Code__c__50"], "alias": "source_length_check_curated_rs_8cd0d75a71d8a1890e12923c0cbff898", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_8cd0d75a71d8a1890e12923c0cbff898", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_8cd0d75a71d8a1890e12923c0cbff898"}, "created_at": 1688944882.779268, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_8cd0d75a71d8a1890e12923c0cbff898\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_template_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_8cd0d75a71d8a1890e12923c0cbff898.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_template_curated`\nWHERE\n  LENGTH(LLC_BI__Code__c) > 50\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Code__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Code__c__String.73cf5ccd9c": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LLC_BI__Code__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_template_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Code__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_9cf4d5143d033aee3a2fb8934758d637.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Code__c__String.73cf5ccd9c", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Code__c__String"], "alias": "dbt_expectations_source_expect_9cf4d5143d033aee3a2fb8934758d637", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_9cf4d5143d033aee3a2fb8934758d637", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_9cf4d5143d033aee3a2fb8934758d637"}, "created_at": 1688944882.78087, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_9cf4d5143d033aee3a2fb8934758d637\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_template_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_9cf4d5143d033aee3a2fb8934758d637.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('OWNERID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__ACTIVE__C' as STRING) as relation_column,\n            cast('BOOLEAN' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__CODE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__DESCRIPTION__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__END_DATE__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITIES__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__START_DATE__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__TYPE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__LOOKUPKEY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LLC_BI__CODE__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Code__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Description__c__32768.0852a06b86": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 32768, "column_name": "LLC_BI__Description__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_template_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Description__c__32768", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_58d19db5ee49b479dbb0668c83e42585.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Description__c__32768.0852a06b86", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Description__c__32768"], "alias": "source_length_check_curated_rs_58d19db5ee49b479dbb0668c83e42585", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_58d19db5ee49b479dbb0668c83e42585", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_58d19db5ee49b479dbb0668c83e42585"}, "created_at": 1688944882.7828171, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_58d19db5ee49b479dbb0668c83e42585\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_template_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_58d19db5ee49b479dbb0668c83e42585.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_template_curated`\nWHERE\n  LENGTH(LLC_BI__Description__c) > 32768\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Description__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Description__c__String.b042471eca": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LLC_BI__Description__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_template_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Description__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_d826b43159fc5be04772372f4a7cce2f.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Description__c__String.b042471eca", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Description__c__String"], "alias": "dbt_expectations_source_expect_d826b43159fc5be04772372f4a7cce2f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_d826b43159fc5be04772372f4a7cce2f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_d826b43159fc5be04772372f4a7cce2f"}, "created_at": 1688944882.784537, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_d826b43159fc5be04772372f4a7cce2f\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_template_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_d826b43159fc5be04772372f4a7cce2f.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('OWNERID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__ACTIVE__C' as STRING) as relation_column,\n            cast('BOOLEAN' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__CODE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__DESCRIPTION__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__END_DATE__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITIES__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__START_DATE__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__TYPE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__LOOKUPKEY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LLC_BI__DESCRIPTION__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Description__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__lookupKey__c__255.5c30194a88": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "LLC_BI__lookupKey__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_template_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__lookupKey__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_bd436770f5e463c8c4af150ac339129a.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__lookupKey__c__255.5c30194a88", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__lookupKey__c__255"], "alias": "source_length_check_curated_rs_bd436770f5e463c8c4af150ac339129a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_bd436770f5e463c8c4af150ac339129a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_bd436770f5e463c8c4af150ac339129a"}, "created_at": 1688944882.786315, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_bd436770f5e463c8c4af150ac339129a\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_template_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_bd436770f5e463c8c4af150ac339129a.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_template_curated`\nWHERE\n  LENGTH(LLC_BI__lookupKey__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__lookupKey__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__lookupKey__c__String.1a37284723": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LLC_BI__lookupKey__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_template_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__lookupKey__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_4ae5e5ee7f5cf1aa4ae3786e3894e7d1.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__lookupKey__c__String.1a37284723", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__lookupKey__c__String"], "alias": "dbt_expectations_source_expect_4ae5e5ee7f5cf1aa4ae3786e3894e7d1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_4ae5e5ee7f5cf1aa4ae3786e3894e7d1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_4ae5e5ee7f5cf1aa4ae3786e3894e7d1"}, "created_at": 1688944882.788054, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_4ae5e5ee7f5cf1aa4ae3786e3894e7d1\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_template_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_4ae5e5ee7f5cf1aa4ae3786e3894e7d1.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('OWNERID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__ACTIVE__C' as STRING) as relation_column,\n            cast('BOOLEAN' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__CODE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__DESCRIPTION__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__END_DATE__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITIES__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__START_DATE__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__TYPE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__LOOKUPKEY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LLC_BI__LOOKUPKEY__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__lookupKey__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Severities__c__4099.263d514eee": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 4099, "column_name": "LLC_BI__Severities__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_template_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Severities__c__4099", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_c14cbbbf3c86fba79d973972d325d8cd.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Severities__c__4099.263d514eee", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Severities__c__4099"], "alias": "source_length_check_curated_rs_c14cbbbf3c86fba79d973972d325d8cd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_c14cbbbf3c86fba79d973972d325d8cd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_c14cbbbf3c86fba79d973972d325d8cd"}, "created_at": 1688944882.790216, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_c14cbbbf3c86fba79d973972d325d8cd\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_template_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_c14cbbbf3c86fba79d973972d325d8cd.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_template_curated`\nWHERE\n  LENGTH(LLC_BI__Severities__c) > 4099\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Severities__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Severities__c__String.df61996836": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LLC_BI__Severities__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_template_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Severities__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_487b7f7738ef385be630022f3a21544b.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Severities__c__String.df61996836", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Severities__c__String"], "alias": "dbt_expectations_source_expect_487b7f7738ef385be630022f3a21544b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_487b7f7738ef385be630022f3a21544b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_487b7f7738ef385be630022f3a21544b"}, "created_at": 1688944882.7918358, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_487b7f7738ef385be630022f3a21544b\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_template_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_487b7f7738ef385be630022f3a21544b.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('OWNERID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__ACTIVE__C' as STRING) as relation_column,\n            cast('BOOLEAN' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__CODE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__DESCRIPTION__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__END_DATE__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITIES__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__START_DATE__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__TYPE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__LOOKUPKEY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LLC_BI__SEVERITIES__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Severities__c", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Start_Date__c.63b733438e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LLC_BI__Start_Date__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_template_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Start_Date__c", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_73c98d95cf539789a14cfc828a598dc3.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Start_Date__c.63b733438e", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Start_Date__c"], "alias": "source_not_null_curated_rskcsp_73c98d95cf539789a14cfc828a598dc3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_73c98d95cf539789a14cfc828a598dc3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_73c98d95cf539789a14cfc828a598dc3"}, "created_at": 1688944882.793767, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_73c98d95cf539789a14cfc828a598dc3\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_template_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_73c98d95cf539789a14cfc828a598dc3.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect LLC_BI__Start_Date__c\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_template_curated`\nwhere LLC_BI__Start_Date__c is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Start_Date__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Type__c__255.2f574ba958": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 255, "column_name": "LLC_BI__Type__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_template_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Type__c__255", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_968dc41c37bfbe1aacf1bd3f70d01a2f.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Type__c__255.2f574ba958", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Type__c__255"], "alias": "source_length_check_curated_rs_968dc41c37bfbe1aacf1bd3f70d01a2f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_968dc41c37bfbe1aacf1bd3f70d01a2f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_968dc41c37bfbe1aacf1bd3f70d01a2f"}, "created_at": 1688944882.794532, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_968dc41c37bfbe1aacf1bd3f70d01a2f\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_template_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_968dc41c37bfbe1aacf1bd3f70d01a2f.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_template_curated`\nWHERE\n  LENGTH(LLC_BI__Type__c) > 255\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Type__c", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Type__c__String.4ca4b2c1c2": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "LLC_BI__Type__c", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_template_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Type__c__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_2644930b3dc2806f7a3fb279f9a9f06d.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Type__c__String.4ca4b2c1c2", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Type__c__String"], "alias": "dbt_expectations_source_expect_2644930b3dc2806f7a3fb279f9a9f06d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_2644930b3dc2806f7a3fb279f9a9f06d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_2644930b3dc2806f7a3fb279f9a9f06d"}, "created_at": 1688944882.796363, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_2644930b3dc2806f7a3fb279f9a9f06d\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_template_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_2644930b3dc2806f7a3fb279f9a9f06d.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('OWNERID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__ACTIVE__C' as STRING) as relation_column,\n            cast('BOOLEAN' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__CODE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__DESCRIPTION__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__END_DATE__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITIES__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__START_DATE__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__TYPE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__LOOKUPKEY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LLC_BI__TYPE__C'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "LLC_BI__Type__c", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_Name__80.dac6344b3b": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 80, "column_name": "Name", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_template_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_policy_exception_template_curated_Name__80", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_760cabe02bea9c0172a274b61aa1b028.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_Name__80.dac6344b3b", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_policy_exception_template_curated_Name__80"], "alias": "source_length_check_curated_rs_760cabe02bea9c0172a274b61aa1b028", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_760cabe02bea9c0172a274b61aa1b028", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_760cabe02bea9c0172a274b61aa1b028"}, "created_at": 1688944882.798208, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_760cabe02bea9c0172a274b61aa1b028\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_template_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_760cabe02bea9c0172a274b61aa1b028.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_template_curated`\nWHERE\n  LENGTH(Name) > 80\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Name", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_Name__String.bea41dd9c9": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "Name", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_template_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_Name__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_5bdc1c277ece83169433bd2f2cdb0404.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_Name__String.bea41dd9c9", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_Name__String"], "alias": "dbt_expectations_source_expect_5bdc1c277ece83169433bd2f2cdb0404", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_5bdc1c277ece83169433bd2f2cdb0404", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_5bdc1c277ece83169433bd2f2cdb0404"}, "created_at": 1688944882.7999842, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_5bdc1c277ece83169433bd2f2cdb0404\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_template_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_5bdc1c277ece83169433bd2f2cdb0404.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('OWNERID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__ACTIVE__C' as STRING) as relation_column,\n            cast('BOOLEAN' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__CODE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__DESCRIPTION__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__END_DATE__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITIES__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__START_DATE__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__TYPE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__LOOKUPKEY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'NAME'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "Name", "file_key_name": "sources.curated"}, "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_template_curated_OwnerId.2e740b69e1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "OwnerId", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_template_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_not_null_curated_rskcsp_ds_policy_exception_template_curated_OwnerId", "resource_type": "test", "package_name": "csp", "path": "source_not_null_curated_rskcsp_62cc94ec66995e909387cfb32ef6cc54.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_template_curated_OwnerId.2e740b69e1", "fqn": ["csp", "Limits", "source_not_null_curated_rskcsp_ds_policy_exception_template_curated_OwnerId"], "alias": "source_not_null_curated_rskcsp_62cc94ec66995e909387cfb32ef6cc54", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_curated_rskcsp_62cc94ec66995e909387cfb32ef6cc54", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_not_null_curated_rskcsp_62cc94ec66995e909387cfb32ef6cc54"}, "created_at": 1688944882.801913, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_curated_rskcsp_62cc94ec66995e909387cfb32ef6cc54\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_template_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_not_null_curated_rskcsp_62cc94ec66995e909387cfb32ef6cc54.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect OwnerId\nfrom `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_template_curated`\nwhere OwnerId is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "OwnerId", "file_key_name": "sources.curated"}, "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_OwnerId__18.87d00d5ff0": {"test_metadata": {"name": "length_check", "kwargs": {"max_length": 18, "column_name": "OwnerId", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_template_curated')) }}"}, "namespace": null}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "source_length_check_curated_rskcsp_ds_policy_exception_template_curated_OwnerId__18", "resource_type": "test", "package_name": "csp", "path": "source_length_check_curated_rs_77299744f016124dffebbdf905ca8370.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_OwnerId__18.87d00d5ff0", "fqn": ["csp", "Limits", "source_length_check_curated_rskcsp_ds_policy_exception_template_curated_OwnerId__18"], "alias": "source_length_check_curated_rs_77299744f016124dffebbdf905ca8370", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_length_check_curated_rs_77299744f016124dffebbdf905ca8370", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "source_length_check_curated_rs_77299744f016124dffebbdf905ca8370"}, "created_at": 1688944882.802675, "relation_name": null, "raw_code": "{{ test_length_check(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_length_check_curated_rs_77299744f016124dffebbdf905ca8370\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_template_curated"]], "metrics": [], "depends_on": {"macros": ["macro.csp.test_length_check", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/source_length_check_curated_rs_77299744f016124dffebbdf905ca8370.sql", "compiled": true, "compiled_code": "\nSELECT\n  1\nFROM\n  `dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_template_curated`\nWHERE\n  LENGTH(OwnerId) > 18\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "OwnerId", "file_key_name": "sources.curated"}, "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_OwnerId__String.b60839b6ad": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "String", "column_name": "OwnerId", "model": "{{ get_where_subquery(source('curated', 'rskcsp_ds_policy_exception_template_curated')) }}"}, "namespace": "dbt_expectations"}, "database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_curated_dbt_test__audit", "name": "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_OwnerId__String", "resource_type": "test", "package_name": "csp", "path": "dbt_expectations_source_expect_be2ff9597ae9e578e1f7cf2ad202800f.sql", "original_file_path": "models/Limits/Limits.yml", "unique_id": "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_OwnerId__String.b60839b6ad", "fqn": ["csp", "Limits", "dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_OwnerId__String"], "alias": "dbt_expectations_source_expect_be2ff9597ae9e578e1f7cf2ad202800f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_source_expect_be2ff9597ae9e578e1f7cf2ad202800f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_source_expect_be2ff9597ae9e578e1f7cf2ad202800f"}, "created_at": 1688944882.80428, "relation_name": null, "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_source_expect_be2ff9597ae9e578e1f7cf2ad202800f\") }}", "language": "sql", "refs": [], "sources": [["curated", "rskcsp_ds_policy_exception_template_curated"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"]}, "compiled_path": "target/compiled/csp/models/Limits/Limits.yml/dbt_expectations_source_expect_be2ff9597ae9e578e1f7cf2ad202800f.sql", "compiled": true, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('ID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('OWNERID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCYISOCODE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('CREATEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDDATE' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LASTMODIFIEDBYID' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__ACTIVE__C' as STRING) as relation_column,\n            cast('BOOLEAN' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__CODE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__DESCRIPTION__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__END_DATE__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__SEVERITIES__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__START_DATE__C' as STRING) as relation_column,\n            cast('DATE' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__TYPE__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LLC_BI__LOOKUPKEY__C' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_CHANGETYPE' as STRING) as relation_column,\n            cast('STRING' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('_COMMITTIMESTAMP' as STRING) as relation_column,\n            cast('INT64' as STRING) as relation_column_type\n        union all\n        \n        select\n            cast('LOAD_TIMESTAMP' as STRING) as relation_column,\n            cast('DATETIME' as STRING) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'OWNERID'\n            and\n            relation_column_type not in ('STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "OwnerId", "file_key_name": "sources.curated"}}, "sources": {"source.csp.curated.rskcsp_ds_cardholder_curated": {"database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_ds_curation", "name": "rskcsp_ds_cardholder_curated", "resource_type": "source", "package_name": "csp", "path": "models/Limits/Limits.yml", "original_file_path": "models/Limits/Limits.yml", "unique_id": "source.csp.curated.rskcsp_ds_cardholder_curated", "fqn": ["csp", "Limits", "curated", "rskcsp_ds_cardholder_curated"], "source_name": "curated", "source_description": "", "loader": "", "identifier": "rskcsp_ds_cardholder_curated", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"CCS_Email__c": {"name": "CCS_Email__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Facility_ID__c": {"name": "CCS_Facility_ID__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_First_Name__c": {"name": "CCS_First_Name__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Is_Card_Needed__c": {"name": "CCS_Is_Card_Needed__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Last_Name__c": {"name": "CCS_Last_Name__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Level_of_Control__c": {"name": "CCS_Level_of_Control__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Mobile_Number__c": {"name": "CCS_Mobile_Number__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Title__c": {"name": "CCS_Title__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CreatedById": {"name": "CreatedById", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CreatedDate": {"name": "CreatedDate", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CurrencyIsoCode": {"name": "CurrencyIsoCode", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Id": {"name": "Id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LastModifiedById": {"name": "LastModifiedById", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LastModifiedDate": {"name": "LastModifiedDate", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Name": {"name": "Name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_cardholder_curated`", "created_at": 1688944882.213536}, "source.csp.curated.rskcsp_ds_limit_curated": {"database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_ds_curation", "name": "rskcsp_ds_limit_curated", "resource_type": "source", "package_name": "csp", "path": "models/Limits/Limits.yml", "original_file_path": "models/Limits/Limits.yml", "unique_id": "source.csp.curated.rskcsp_ds_limit_curated", "fqn": ["csp", "Limits", "curated", "rskcsp_ds_limit_curated"], "source_name": "curated", "source_description": "", "loader": "", "identifier": "rskcsp_ds_limit_curated", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"CCS_Facility__c": {"name": "CCS_Facility__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Is_this_a_Temporary_Amendment__c": {"name": "CCS_Is_this_a_Temporary_Amendment__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Tenor__c": {"name": "CCS_Tenor__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CreatedById": {"name": "CreatedById", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CreatedDate": {"name": "CreatedDate", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CurrencyIsoCode": {"name": "CurrencyIsoCode", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Id": {"name": "Id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LastModifiedById": {"name": "LastModifiedById", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LastModifiedDate": {"name": "LastModifiedDate", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Name": {"name": "Name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_limit_curated`", "created_at": 1688944882.2481642}, "source.csp.curated.rskcsp_ds_entity_involvement_curated": {"database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_ds_curation", "name": "rskcsp_ds_entity_involvement_curated", "resource_type": "source", "package_name": "csp", "path": "models/Limits/Limits.yml", "original_file_path": "models/Limits/Limits.yml", "unique_id": "source.csp.curated.rskcsp_ds_entity_involvement_curated", "fqn": ["csp", "Limits", "curated", "rskcsp_ds_entity_involvement_curated"], "source_name": "curated", "source_description": "", "loader": "", "identifier": "rskcsp_ds_entity_involvement_curated", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"CreatedById": {"name": "CreatedById", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CreatedDate": {"name": "CreatedDate", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CurrencyIsoCode": {"name": "CurrencyIsoCode", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Id": {"name": "Id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LastModifiedById": {"name": "LastModifiedById", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LastModifiedDate": {"name": "LastModifiedDate", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__Account__c": {"name": "LLC_BI__Account__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__Borrower_Type__c": {"name": "LLC_BI__Borrower_Type__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__Contingent_Type__c": {"name": "LLC_BI__Contingent_Type__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__Loan__c": {"name": "LLC_BI__Loan__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__Product_Package__c": {"name": "LLC_BI__Product_Package__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Migration_ID__c": {"name": "Migration_ID__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Name": {"name": "Name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RecordTypeId": {"name": "RecordTypeId", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_entity_involvement_curated`", "created_at": 1688944882.2967439}, "source.csp.curated.rskcsp_ds_facility_curated": {"database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_ds_curation", "name": "rskcsp_ds_facility_curated", "resource_type": "source", "package_name": "csp", "path": "models/Limits/Limits.yml", "original_file_path": "models/Limits/Limits.yml", "unique_id": "source.csp.curated.rskcsp_ds_facility_curated", "fqn": ["csp", "Limits", "curated", "rskcsp_ds_facility_curated"], "source_name": "curated", "source_description": "", "loader": "", "identifier": "rskcsp_ds_facility_curated", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"CCS_50_of_Security_LV_from_Land_Property__c": {"name": "CCS_50_of_Security_LV_from_Land_Property__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Account_a_Discounted_Account__c": {"name": "CCS_Account_a_Discounted_Account__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_AccountNumber__c": {"name": "CCS_AccountNumber__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Amend_Margin__c": {"name": "CCS_Amend_Margin__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Amend_Returned_Margin__c": {"name": "CCS_Amend_Returned_Margin__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Apply_CRH__c": {"name": "CCS_Apply_CRH__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Apply_Tranche_Drawdown__c": {"name": "CCS_Apply_Tranche_Drawdown__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Approval_Status__c": {"name": "CCS_Approval_Status__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Borrowing_Structure_Route__c": {"name": "CCS_Borrowing_Structure_Route__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_CardScheme__c": {"name": "CCS_CardScheme__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_CCA__c": {"name": "CCS_CCA__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_CFGICleanGrowthFinanceInitiative__c": {"name": "CCS_CFGICleanGrowthFinanceInitiative__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Change_Fixed_Rate_Duration__c": {"name": "CCS_Change_Fixed_Rate_Duration__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Chosen_Rate__c": {"name": "CCS_Chosen_Rate__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Client_Choice_Rationale__c": {"name": "CCS_Client_Choice_Rationale__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Commentary_on_Pricing__c": {"name": "CCS_Commentary_on_Pricing__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_CRH_Monthly_or_Quarterly__c": {"name": "CCS_CRH_Monthly_or_Quarterly__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Customer_documentation_preference__c": {"name": "CCS_Customer_documentation_preference__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_DateOfMarketLinksAgreementKnown__c": {"name": "CCS_DateOfMarketLinksAgreementKnown__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_DateOfTravelLinkAgreementKnown__c": {"name": "CCS_DateOfTravelLinkAgreementKnown__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_DoNotTrade__c": {"name": "CCS_DoNotTrade__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Duration__c": {"name": "CCS_Duration__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_e_Loan_Product_Selection__c": {"name": "CCS_e_Loan_Product_Selection__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Eligible_for_CRH__c": {"name": "CCS_Eligible_for_CRH__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Exception_Pricing_Request__c": {"name": "CCS_Exception_Pricing_Request__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Exclude_from_Change__c": {"name": "CCS_Exclude_from_Change__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Exclude_from_Exposure_Value__c": {"name": "CCS_Exclude_from_Exposure_Value__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Exposure_Value__c": {"name": "CCS_Exposure_Value__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Final_Limit_or_Change_per_Step__c": {"name": "CCS_Final_Limit_or_Change_per_Step__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_FormFactor__c": {"name": "CCS_FormFactor__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Frequency__c": {"name": "CCS_Frequency__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Front_Book_Back_Book__c": {"name": "CCS_Front_Book_Back_Book__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Hard_Soft__c": {"name": "CCS_Hard_Soft__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Heritage__c": {"name": "CCS_Heritage__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_How_much_to_pay_off_each_month__c": {"name": "CCS_How_much_to_pay_off_each_month__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Informed_Choice_Facility_Record__c": {"name": "CCS_Informed_Choice_Facility_Record__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Interest_Rate_Type__c": {"name": "CCS_Interest_Rate_Type__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Interest_Rate_Type_Greater50NonSplit__c": {"name": "CCS_Interest_Rate_Type_Greater50NonSplit__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Interest_Rate_Type_Greater50Split__c": {"name": "CCS_Interest_Rate_Type_Greater50Split__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Interest_Rate_Type_split__c": {"name": "CCS_Interest_Rate_Type_split__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Is_this_a_Temporary_Amendment__c": {"name": "CCS_Is_this_a_Temporary_Amendment__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Is_this_Facility_LBCM__c": {"name": "CCS_Is_this_Facility_LBCM__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Journey__c": {"name": "CCS_Journey__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_LBCM_Facility_Validation__c": {"name": "CCS_LBCM_Facility_Validation__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Limit_Indicator__c": {"name": "CCS_Limit_Indicator__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Limit_Type__c": {"name": "CCS_Limit_Type__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Link__c": {"name": "CCS_Link__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Loan_Repayment_Profile__c": {"name": "CCS_Loan_Repayment_Profile__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Max_period_for_each_FX_contract__c": {"name": "CCS_Max_period_for_each_FX_contract__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_MoneyOutExtractionIntended__c": {"name": "CCS_MoneyOutExtractionIntended__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_ODType__c": {"name": "CCS_ODType__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Overdraft_Limit_Type__c": {"name": "CCS_Overdraft_Limit_Type__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Overdraft_Request_Type__c": {"name": "CCS_Overdraft_Request_Type__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Partially_Amortising_Loan_Type__c": {"name": "CCS_Partially_Amortising_Loan_Type__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Pricing_Product__c": {"name": "CCS_Pricing_Product__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Product_Approval_Rendering__c": {"name": "CCS_Product_Approval_Rendering__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Product_Rationale__c": {"name": "CCS_Product_Rationale__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Provide_Comparative_quote__c": {"name": "CCS_Provide_Comparative_quote__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Purpose__c": {"name": "CCS_Purpose__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Repayment_Frequency__c": {"name": "CCS_Repayment_Frequency__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_RightOfWithdrawalConfirmed__c": {"name": "CCS_RightOfWithdrawalConfirmed__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Sector__c": {"name": "CCS_Sector__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Security__c": {"name": "CCS_Security__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Send_quote_to_client_before_sanction__c": {"name": "CCS_Send_quote_to_client_before_sanction__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Set_up_a_direct_debit_to_manage__c": {"name": "CCS_Set_up_a_direct_debit_to_manage__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_SetUpDisplayRatesActionProfiles__c": {"name": "CCS_SetUpDisplayRatesActionProfiles__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Signatory_1__c": {"name": "CCS_Signatory_1__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Signatory_2__c": {"name": "CCS_Signatory_2__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Signatory_3__c": {"name": "CCS_Signatory_3__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Signatory_4__c": {"name": "CCS_Signatory_4__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_SortCode__c": {"name": "CCS_SortCode__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Specific_1_Period_End__c": {"name": "CCS_Specific_1_Period_End__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Specific_2_Period_End__c": {"name": "CCS_Specific_2_Period_End__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Step_Frequency__c": {"name": "CCS_Step_Frequency__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Step_Option__c": {"name": "CCS_Step_Option__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_SurroundServices__c": {"name": "CCS_SurroundServices__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_TenorRestriction__c": {"name": "CCS_TenorRestriction__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Traded_Non_Traded__c": {"name": "CCS_Traded_Non_Traded__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_TrancheDrawdown__c": {"name": "CCS_TrancheDrawdown__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Utilisation_exceed_Current_Limit__c": {"name": "CCS_Utilisation_exceed_Current_Limit__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_Which_limits_apply_to_the_facility__c": {"name": "CCS_Which_limits_apply_to_the_facility__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CreatedById": {"name": "CreatedById", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CreatedDate": {"name": "CreatedDate", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CurrencyIsoCode": {"name": "CurrencyIsoCode", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Id": {"name": "Id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LastModifiedById": {"name": "LastModifiedById", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LastModifiedDate": {"name": "LastModifiedDate", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__Account__c": {"name": "LLC_BI__Account__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__Credit_Memo__c": {"name": "LLC_BI__Credit_Memo__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__Financed_Fee_Calculations__c": {"name": "LLC_BI__Financed_Fee_Calculations__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__Is_In_Review__c": {"name": "LLC_BI__Is_In_Review__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__isRenewal__c": {"name": "LLC_BI__isRenewal__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__lookupKey__c": {"name": "LLC_BI__lookupKey__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__Product__c": {"name": "LLC_BI__Product__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__Product_Line__c": {"name": "LLC_BI__Product_Line__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__Product_Package__c": {"name": "LLC_BI__Product_Package__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__Product_Reference__c": {"name": "LLC_BI__Product_Reference__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__Product_Type__c": {"name": "LLC_BI__Product_Type__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__Stage__c": {"name": "LLC_BI__Stage__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__Status__c": {"name": "LLC_BI__Status__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Migration_ID__c": {"name": "Migration_ID__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Name": {"name": "Name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OwnerId": {"name": "OwnerId", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Primary_Source_of_Repayment__c": {"name": "Primary_Source_of_Repayment__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RecordTypeId": {"name": "RecordTypeId", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Step_Frequency__c": {"name": "Step_Frequency__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_facility_curated`", "created_at": 1688944882.642443}, "source.csp.curated.rskcsp_ds_policy_exception_curated": {"database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_ds_curation", "name": "rskcsp_ds_policy_exception_curated", "resource_type": "source", "package_name": "csp", "path": "models/Limits/Limits.yml", "original_file_path": "models/Limits/Limits.yml", "unique_id": "source.csp.curated.rskcsp_ds_policy_exception_curated", "fqn": ["csp", "Limits", "curated", "rskcsp_ds_policy_exception_curated"], "source_name": "curated", "source_description": "", "loader": "", "identifier": "rskcsp_ds_policy_exception_curated", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"CCS_LBG_Entity__c": {"name": "CCS_LBG_Entity__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CCS_LBG_Entity_Facility__c": {"name": "CCS_LBG_Entity_Facility__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CreatedById": {"name": "CreatedById", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CreatedDate": {"name": "CreatedDate", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CurrencyIsoCode": {"name": "CurrencyIsoCode", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Id": {"name": "Id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LastModifiedById": {"name": "LastModifiedById", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LastModifiedDate": {"name": "LastModifiedDate", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__Automatically_Added__c": {"name": "LLC_BI__Automatically_Added__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__Code__c": {"name": "LLC_BI__Code__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__Collateral_Mgmt__c": {"name": "LLC_BI__Collateral_Mgmt__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__Covenant_Mgmt__c": {"name": "LLC_BI__Covenant_Mgmt__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__Loan__c": {"name": "LLC_BI__Loan__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__Mitigation_Reason_1__c": {"name": "LLC_BI__Mitigation_Reason_1__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__Mitigation_Reason_2__c": {"name": "LLC_BI__Mitigation_Reason_2__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__Mitigation_Reason_3__c": {"name": "LLC_BI__Mitigation_Reason_3__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__Relationship__c": {"name": "LLC_BI__Relationship__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__Severity__c": {"name": "LLC_BI__Severity__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__Status__c": {"name": "LLC_BI__Status__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__Type__c": {"name": "LLC_BI__Type__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Name": {"name": "Name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OwnerId": {"name": "OwnerId", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RM_Mitigation_Comments__c": {"name": "RM_Mitigation_Comments__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_curated`", "created_at": 1688944882.723569}, "source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated": {"database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_ds_curation", "name": "rskcsp_ds_policy_exception_mitigation_reason_curated", "resource_type": "source", "package_name": "csp", "path": "models/Limits/Limits.yml", "original_file_path": "models/Limits/Limits.yml", "unique_id": "source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated", "fqn": ["csp", "Limits", "curated", "rskcsp_ds_policy_exception_mitigation_reason_curated"], "source_name": "curated", "source_description": "", "loader": "", "identifier": "rskcsp_ds_policy_exception_mitigation_reason_curated", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"CreatedById": {"name": "CreatedById", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CreatedDate": {"name": "CreatedDate", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CurrencyIsoCode": {"name": "CurrencyIsoCode", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Id": {"name": "Id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LastModifiedById": {"name": "LastModifiedById", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LastModifiedDate": {"name": "LastModifiedDate", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__Comment_Required__c": {"name": "LLC_BI__Comment_Required__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__lookupKey__c": {"name": "LLC_BI__lookupKey__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__Policy_Exception_Template__c": {"name": "LLC_BI__Policy_Exception_Template__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__Reason__c": {"name": "LLC_BI__Reason__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Name": {"name": "Name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_mitigation_reason_curated`", "created_at": 1688944882.759595}, "source.csp.curated.rskcsp_ds_policy_exception_template_curated": {"database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_ds_curation", "name": "rskcsp_ds_policy_exception_template_curated", "resource_type": "source", "package_name": "csp", "path": "models/Limits/Limits.yml", "original_file_path": "models/Limits/Limits.yml", "unique_id": "source.csp.curated.rskcsp_ds_policy_exception_template_curated", "fqn": ["csp", "Limits", "curated", "rskcsp_ds_policy_exception_template_curated"], "source_name": "curated", "source_description": "", "loader": "", "identifier": "rskcsp_ds_policy_exception_template_curated", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"CreatedById": {"name": "CreatedById", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CreatedDate": {"name": "CreatedDate", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CurrencyIsoCode": {"name": "CurrencyIsoCode", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Id": {"name": "Id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LastModifiedById": {"name": "LastModifiedById", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LastModifiedDate": {"name": "LastModifiedDate", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__Active__c": {"name": "LLC_BI__Active__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__Code__c": {"name": "LLC_BI__Code__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__Description__c": {"name": "LLC_BI__Description__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__lookupKey__c": {"name": "LLC_BI__lookupKey__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__Severities__c": {"name": "LLC_BI__Severities__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__Start_Date__c": {"name": "LLC_BI__Start_Date__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LLC_BI__Type__c": {"name": "LLC_BI__Type__c", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Name": {"name": "Name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OwnerId": {"name": "OwnerId", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_policy_exception_template_curated`", "created_at": 1688944882.805894}, "source.csp.raw.rskcsp_ds_cardholder": {"database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_downstream_raw", "name": "rskcsp_ds_cardholder", "resource_type": "source", "package_name": "csp", "path": "models/Limits/SourceAll.yml", "original_file_path": "models/Limits/SourceAll.yml", "unique_id": "source.csp.raw.rskcsp_ds_cardholder", "fqn": ["csp", "Limits", "raw", "rskcsp_ds_cardholder"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "rskcsp_ds_cardholder", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_downstream_raw`.`rskcsp_ds_cardholder`", "created_at": 1688944882.80598}, "source.csp.raw.rskcsp_ds_limit": {"database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_downstream_raw", "name": "rskcsp_ds_limit", "resource_type": "source", "package_name": "csp", "path": "models/Limits/SourceAll.yml", "original_file_path": "models/Limits/SourceAll.yml", "unique_id": "source.csp.raw.rskcsp_ds_limit", "fqn": ["csp", "Limits", "raw", "rskcsp_ds_limit"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "rskcsp_ds_limit", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_downstream_raw`.`rskcsp_ds_limit`", "created_at": 1688944882.806046}, "source.csp.raw.rskcsp_ds_legal_entities": {"database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_downstream_raw", "name": "rskcsp_ds_legal_entities", "resource_type": "source", "package_name": "csp", "path": "models/Limits/SourceAll.yml", "original_file_path": "models/Limits/SourceAll.yml", "unique_id": "source.csp.raw.rskcsp_ds_legal_entities", "fqn": ["csp", "Limits", "raw", "rskcsp_ds_legal_entities"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "rskcsp_ds_legal_entities", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_downstream_raw`.`rskcsp_ds_legal_entities`", "created_at": 1688944882.806109}, "source.csp.raw.rskcsp_ds_loan": {"database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_downstream_raw", "name": "rskcsp_ds_loan", "resource_type": "source", "package_name": "csp", "path": "models/Limits/SourceAll.yml", "original_file_path": "models/Limits/SourceAll.yml", "unique_id": "source.csp.raw.rskcsp_ds_loan", "fqn": ["csp", "Limits", "raw", "rskcsp_ds_loan"], "source_name": "raw", "source_description": "", "loader": "", "identifier": "rskcsp_ds_loan", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_downstream_raw`.`rskcsp_ds_loan`", "created_at": 1688944882.8061702}, "source.csp.staging.rskcsp_ds_cardholder_staging": {"database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_ds_staging", "name": "rskcsp_ds_cardholder_staging", "resource_type": "source", "package_name": "csp", "path": "models/Limits/SourceAll.yml", "original_file_path": "models/Limits/SourceAll.yml", "unique_id": "source.csp.staging.rskcsp_ds_cardholder_staging", "fqn": ["csp", "Limits", "staging", "rskcsp_ds_cardholder_staging"], "source_name": "staging", "source_description": "", "loader": "", "identifier": "rskcsp_ds_cardholder_staging", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_staging`.`rskcsp_ds_cardholder_staging`", "created_at": 1688944882.80623}, "source.csp.staging.rskcsp_ds_limit_staging": {"database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_ds_staging", "name": "rskcsp_ds_limit_staging", "resource_type": "source", "package_name": "csp", "path": "models/Limits/SourceAll.yml", "original_file_path": "models/Limits/SourceAll.yml", "unique_id": "source.csp.staging.rskcsp_ds_limit_staging", "fqn": ["csp", "Limits", "staging", "rskcsp_ds_limit_staging"], "source_name": "staging", "source_description": "", "loader": "", "identifier": "rskcsp_ds_limit_staging", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_staging`.`rskcsp_ds_limit_staging`", "created_at": 1688944882.80629}, "source.csp.staging.rskcsp_ds_legal_entities_staging": {"database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_ds_staging", "name": "rskcsp_ds_legal_entities_staging", "resource_type": "source", "package_name": "csp", "path": "models/Limits/SourceAll.yml", "original_file_path": "models/Limits/SourceAll.yml", "unique_id": "source.csp.staging.rskcsp_ds_legal_entities_staging", "fqn": ["csp", "Limits", "staging", "rskcsp_ds_legal_entities_staging"], "source_name": "staging", "source_description": "", "loader": "", "identifier": "rskcsp_ds_legal_entities_staging", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_staging`.`rskcsp_ds_legal_entities_staging`", "created_at": 1688944882.80635}, "source.csp.staging.rskcsp_ds_loan_staging": {"database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_ds_staging", "name": "rskcsp_ds_loan_staging", "resource_type": "source", "package_name": "csp", "path": "models/Limits/SourceAll.yml", "original_file_path": "models/Limits/SourceAll.yml", "unique_id": "source.csp.staging.rskcsp_ds_loan_staging", "fqn": ["csp", "Limits", "staging", "rskcsp_ds_loan_staging"], "source_name": "staging", "source_description": "", "loader": "", "identifier": "rskcsp_ds_loan_staging", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_staging`.`rskcsp_ds_loan_staging`", "created_at": 1688944882.806407}, "source.csp.curation.rskcsp_ds_cardholder_curated": {"database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_ds_curation", "name": "rskcsp_ds_cardholder_curated", "resource_type": "source", "package_name": "csp", "path": "models/Limits/SourceAll.yml", "original_file_path": "models/Limits/SourceAll.yml", "unique_id": "source.csp.curation.rskcsp_ds_cardholder_curated", "fqn": ["csp", "Limits", "curation", "rskcsp_ds_cardholder_curated"], "source_name": "curation", "source_description": "", "loader": "", "identifier": "rskcsp_ds_cardholder_curated", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_cardholder_curated`", "created_at": 1688944882.806465}, "source.csp.curation.rskcsp_ds_limit_curated": {"database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_ds_curation", "name": "rskcsp_ds_limit_curated", "resource_type": "source", "package_name": "csp", "path": "models/Limits/SourceAll.yml", "original_file_path": "models/Limits/SourceAll.yml", "unique_id": "source.csp.curation.rskcsp_ds_limit_curated", "fqn": ["csp", "Limits", "curation", "rskcsp_ds_limit_curated"], "source_name": "curation", "source_description": "", "loader": "", "identifier": "rskcsp_ds_limit_curated", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_limit_curated`", "created_at": 1688944882.806529}, "source.csp.curation.rskcsp_ds_legal_curated": {"database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_ds_curation", "name": "rskcsp_ds_legal_curated", "resource_type": "source", "package_name": "csp", "path": "models/Limits/SourceAll.yml", "original_file_path": "models/Limits/SourceAll.yml", "unique_id": "source.csp.curation.rskcsp_ds_legal_curated", "fqn": ["csp", "Limits", "curation", "rskcsp_ds_legal_curated"], "source_name": "curation", "source_description": "", "loader": "", "identifier": "rskcsp_ds_legal_curated", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_legal_curated`", "created_at": 1688944882.806589}, "source.csp.curation.rskcsp_ds_loan_curated": {"database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_ds_curation", "name": "rskcsp_ds_loan_curated", "resource_type": "source", "package_name": "csp", "path": "models/Limits/SourceAll.yml", "original_file_path": "models/Limits/SourceAll.yml", "unique_id": "source.csp.curation.rskcsp_ds_loan_curated", "fqn": ["csp", "Limits", "curation", "rskcsp_ds_loan_curated"], "source_name": "curation", "source_description": "", "loader": "", "identifier": "rskcsp_ds_loan_curated", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_curation`.`rskcsp_ds_loan_curated`", "created_at": 1688944882.8067358}, "source.csp.consumption.cardholder": {"database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_ds_consumption", "name": "cardholder", "resource_type": "source", "package_name": "csp", "path": "models/Limits/SourceAll.yml", "original_file_path": "models/Limits/SourceAll.yml", "unique_id": "source.csp.consumption.cardholder", "fqn": ["csp", "Limits", "consumption", "cardholder"], "source_name": "consumption", "source_description": "", "loader": "", "identifier": "cardholder", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_consumption`.`cardholder`", "created_at": 1688944882.806802}, "source.csp.consumption.loan": {"database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_ds_consumption", "name": "loan", "resource_type": "source", "package_name": "csp", "path": "models/Limits/SourceAll.yml", "original_file_path": "models/Limits/SourceAll.yml", "unique_id": "source.csp.consumption.loan", "fqn": ["csp", "Limits", "consumption", "loan"], "source_name": "consumption", "source_description": "", "loader": "", "identifier": "loan", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_consumption`.`loan`", "created_at": 1688944882.806865}, "source.csp.consumption.legal_entities": {"database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_ds_consumption", "name": "legal_entities", "resource_type": "source", "package_name": "csp", "path": "models/Limits/SourceAll.yml", "original_file_path": "models/Limits/SourceAll.yml", "unique_id": "source.csp.consumption.legal_entities", "fqn": ["csp", "Limits", "consumption", "legal_entities"], "source_name": "consumption", "source_description": "", "loader": "", "identifier": "legal_entities", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_consumption`.`legal_entities`", "created_at": 1688944882.806925}, "source.csp.consumption.limit": {"database": "dmn01-rsksoi-bld-01-2017", "schema": "dmn01_rsksoi_euwe2_rsk_csp_ds_consumption", "name": "limit", "resource_type": "source", "package_name": "csp", "path": "models/Limits/SourceAll.yml", "original_file_path": "models/Limits/SourceAll.yml", "unique_id": "source.csp.consumption.limit", "fqn": ["csp", "Limits", "consumption", "limit"], "source_name": "consumption", "source_description": "", "loader": "", "identifier": "limit", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dmn01-rsksoi-bld-01-2017`.`dmn01_rsksoi_euwe2_rsk_csp_ds_consumption`.`limit`", "created_at": 1688944882.806986}}, "macros": {"macro.csp.test_length_check": {"name": "test_length_check", "resource_type": "macro", "package_name": "csp", "path": "macros/length_check.sql", "original_file_path": "macros/length_check.sql", "unique_id": "macro.csp.test_length_check", "macro_sql": "{% test length_check(model, column_name, max_length) %}\nSELECT\n  1\nFROM\n  {{ model }}\nWHERE\n  LENGTH({{ column_name }}) > {{ max_length }}\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.500808, "supported_languages": null}, "macro.dbt_bigquery.date_sharded_table": {"name": "date_sharded_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.501128, "supported_languages": null}, "macro.dbt_bigquery.grant_access_to": {"name": "grant_access_to", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.501324, "supported_languages": null}, "macro.dbt_bigquery.get_partitions_metadata": {"name": "get_partitions_metadata", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.501548, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog": {"name": "bigquery__get_catalog", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    table_options as (\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            JSON_VALUE(option_value) as table_comment\n\n        from {{ information_schema.replace(information_schema_view='TABLE_OPTIONS') }}\n        where option_name = 'description'\n    ),\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n        table_options.table_comment,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join table_options using (relation_id)\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt_unit_testing.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.504621, "supported_languages": null}, "macro.dbt_bigquery.partition_by": {"name": "partition_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5078669, "supported_languages": null}, "macro.dbt_bigquery.cluster_by": {"name": "cluster_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.50814, "supported_languages": null}, "macro.dbt_bigquery.bigquery_options": {"name": "bigquery_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5084128, "supported_languages": null}, "macro.dbt_bigquery.bigquery_table_options": {"name": "bigquery_table_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.508605, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_table_as": {"name": "bigquery__create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n    {{ partition_by(partition_config) }}\n    {{ cluster_by(raw_cluster_by) }}\n    {{ bigquery_table_options(config, model, temporary) }}\n    as (\n      {{ compiled_code }}\n    );\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n  {%- else -%}\n    {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options", "macro.dbt_bigquery.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.509299, "supported_languages": null}, "macro.dbt_bigquery.bigquery_view_options": {"name": "bigquery_view_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.50948, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_view_as": {"name": "bigquery__create_view_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  as {{ sql }};\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.509708, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_schema": {"name": "bigquery__drop_schema", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.509803, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_relation": {"name": "bigquery__drop_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.509938, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"name": "bigquery__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.510041, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"name": "bigquery__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.510145, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_schemas": {"name": "bigquery__list_schemas", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.510249, "supported_languages": null}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"name": "bigquery__check_schema_exists", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.510379, "supported_languages": null}, "macro.dbt_bigquery.bigquery__persist_docs": {"name": "bigquery__persist_docs", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5105898, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"name": "bigquery__alter_column_comment", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5107079, "supported_languages": null}, "macro.dbt_bigquery.bigquery__rename_relation": {"name": "bigquery__rename_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.510821, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"name": "bigquery__alter_relation_add_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.511109, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"name": "bigquery__alter_relation_drop_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.511383, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_type": {"name": "bigquery__alter_column_type", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.511928, "supported_languages": null}, "macro.dbt_bigquery.bigquery__test_unique": {"name": "bigquery__test_unique", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.512052, "supported_languages": null}, "macro.dbt_bigquery.bigquery__upload_file": {"name": "bigquery__upload_file", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__upload_file", "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.512248, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_csv_table": {"name": "bigquery__create_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.512534, "supported_languages": null}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"name": "bigquery__reset_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.51265, "supported_languages": null}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"name": "bigquery__load_csv_rows", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n\n  {% call statement() %}\n    alter table {{ this.render() }} set {{ bigquery_table_options(config, model) }}\n  {% endcall %}\n\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.51318, "supported_languages": null}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"name": "bigquery__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.513599, "supported_languages": null}, "macro.dbt_bigquery.materialization_view_bigquery": {"name": "materialization_view_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.51415, "supported_languages": ["sql"]}, "macro.dbt_bigquery.materialization_table_bigquery": {"name": "materialization_table_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery', supported_languages=['sql', 'python']-%}\n\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5166988, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\nfrom pyspark.sql import SparkSession\n\nspark = SparkSession.builder.appName('smallTest').getOrCreate()\n\nspark.conf.set(\"viewsEnabled\",\"true\")\nspark.conf.set(\"temporaryGcsBucket\",\"{{target.gcs_bucket}}\")\n\n{{ compiled_code }}\ndbt = dbtObj(spark.read.format(\"bigquery\").load)\ndf = model(dbt, spark)\n\n# COMMAND ----------\n# this is materialization code dbt generated, please do not modify\n\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\ndf.write \\\n  .mode(\"overwrite\") \\\n  .format(\"bigquery\") \\\n  .option(\"writeMethod\", \"direct\").option(\"writeDisposition\", 'WRITE_TRUNCATE') \\\n  .save(\"{{target_relation}}\")\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.516949, "supported_languages": null}, "macro.dbt_bigquery.materialization_copy_bigquery": {"name": "materialization_copy_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(*ref_table)) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5178082, "supported_languages": ["sql"]}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"name": "dbt_bigquery_validate_get_incremental_strategy", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\") or 'merge' -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.519443, "supported_languages": null}, "macro.dbt_bigquery.source_sql_with_partition": {"name": "source_sql_with_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.source_sql_with_partition", "macro_sql": "{% macro source_sql_with_partition(partition_by, source_sql) %}\n\n  {%- if partition_by.time_ingestion_partitioning %}\n    {{ return(wrap_with_time_ingestion_partitioning_sql(build_partition_time_exp(partition_by.field), source_sql, False))  }}\n  {% else %}\n    {{ return(source_sql)  }}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.build_partition_time_exp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.51967, "supported_languages": null}, "macro.dbt_bigquery.bq_create_table_as": {"name": "bq_create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_create_table_as", "macro_sql": "{% macro bq_create_table_as(is_time_ingestion_partitioning, temporary, relation, compiled_code, language='sql') %}\n  {% if is_time_ingestion_partitioning and language == 'python' %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models do not support ingestion time partitioning\"\n    ) %}\n  {% endif %}\n  {% if is_time_ingestion_partitioning and language == 'sql' %}\n    {#-- Create the table before inserting data as ingestion time partitioned tables can't be created with the transformed data --#}\n    {% do run_query(create_ingestion_time_partitioned_table_as_sql(temporary, relation, compiled_code)) %}\n    {{ return(bq_insert_into_ingestion_time_partitioned_table_sql(relation, compiled_code)) }}\n  {% else %}\n    {{ return(create_table_as(temporary, relation, compiled_code, language)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.run_query", "macro.dbt_bigquery.create_ingestion_time_partitioned_table_as_sql", "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.520115, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"name": "bq_generate_incremental_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions, incremental_predicates\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set build_sql = bq_generate_incremental_insert_overwrite_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n\n    {% set build_sql = bq_generate_incremental_merge_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n    ) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.520561, "supported_languages": null}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"name": "materialization_incremental_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery', supported_languages=['sql', 'python'] -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] %}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n  {% set incremental_predicates = config.get('predicates', default=none) or config.get('incremental_predicates', default=none) %}\n\n   -- grab current tables grants config for comparison later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if partition_by.copy_partitions is true and strategy != 'insert_overwrite' %} {#-- We can't copy partitions with merge strategy --#}\n        {% set wrong_strategy_msg -%}\n        The 'copy_partitions' option requires the 'incremental_strategy' option to be set to 'insert_overwrite'.\n        {%- endset %}\n        {% do exceptions.raise_compiler_error(wrong_strategy_msg) %}\n\n  {% elif existing_relation is none %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by.time_ingestion_partitioning, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by.time_ingestion_partitioning, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by.time_ingestion_partitioning, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% else %}\n    {%- if language == 'python' and strategy == 'insert_overwrite' -%}\n      {#-- This lets us move forward assuming no python will be directly templated into a query --#}\n      {%- set python_unsupported_msg -%}\n        The 'insert_overwrite' strategy is not yet supported for python models.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(python_unsupported_msg) %}\n    {%- endif -%}\n\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' or language == 'python' %}\n      {#-- Check first, since otherwise we may not build a temp table --#}\n      {#-- Python always needs to create a temp table --#}\n      {%- call statement('create_tmp_relation', language=language) -%}\n        {{ declare_dbt_max_partition(this, partition_by, compiled_code, language) +\n           bq_create_table_as(partition_by.time_ingestion_partitioning, True, tmp_relation, compiled_code, language)\n        }}\n      {%- endcall -%}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% if partition_by.time_ingestion_partitioning %}\n      {% set dest_columns = adapter.add_time_ingestion_partition_column(dest_columns) %}\n    {% endif %}\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, compiled_code, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, partition_by.copy_partitions, incremental_predicates\n    ) %}\n\n    {%- call statement('main') -%}\n      {{ build_sql }}\n    {% endcall %}\n\n    {%- if language == 'python' and tmp_relation -%}\n      {{ adapter.drop_relation(tmp_relation) }}\n    {%- endif -%}\n\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.523548, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"name": "bigquery__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.523875, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_columns": {"name": "bigquery__create_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.523995, "supported_languages": null}, "macro.dbt_bigquery.bigquery__post_snapshot": {"name": "bigquery__post_snapshot", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.524092, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql": {"name": "bq_generate_incremental_merge_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/merge.sql", "original_file_path": "macros/materializations/incremental_strategy/merge.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql", "macro_sql": "{% macro bq_generate_incremental_merge_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n) %}\n    {%- set source_sql -%}\n        {%- if tmp_relation_exists -%}\n        (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        _PARTITIONTIME,\n        {%- endif -%}\n        * from {{ tmp_relation }}\n        )\n        {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n            {%- if partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(build_partition_time_exp(partition_by), sql, True) }}\n            {%- else -%}\n            {{sql}}\n            {%- endif %}\n        )\n        {%- endif -%}\n    {%- endset -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns, incremental_predicates) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.build_partition_time_exp", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.524742, "supported_languages": null}, "macro.dbt_bigquery.build_partition_time_exp": {"name": "build_partition_time_exp", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.build_partition_time_exp", "macro_sql": "{% macro build_partition_time_exp(partition_by) %}\n  {% if partition_by.data_type == 'timestamp' %}\n    {% set partition_value = partition_by.field %}\n  {% else %}\n    {% set partition_value = 'timestamp(' + partition_by.field + ')' %}\n  {% endif %}\n  {{ return({'value': partition_value, 'field': partition_by.field}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.525207, "supported_languages": null}, "macro.dbt_bigquery.declare_dbt_max_partition": {"name": "declare_dbt_max_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, compiled_code, language='sql') %}\n\n  {#-- TODO: revisit partitioning with python models --#}\n  {%- if '_dbt_max_partition' in compiled_code and language == 'sql' -%}\n\n    declare _dbt_max_partition {{ partition_by.data_type_for_partition() }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.525461, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql": {"name": "bq_generate_incremental_insert_overwrite_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro_sql": "{% macro bq_generate_incremental_insert_overwrite_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, on_schema_change, copy_partitions\n) %}\n    {% if partition_by is none %}\n      {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, on_schema_change, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.52728, "supported_languages": null}, "macro.dbt_bigquery.bq_copy_partitions": {"name": "bq_copy_partitions", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_copy_partitions", "macro_sql": "{% macro bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n\n  {% for partition in partitions %}\n    {% if partition_by.granularity == 'hour' %}\n      {% set partition = partition.strftime(\"%Y%m%d%H\") %}\n    {% elif partition_by.granularity == 'day' %}\n      {% set partition = partition.strftime(\"%Y%m%d\") %}\n    {% elif partition_by.granularity == 'month' %}\n      {% set partition = partition.strftime(\"%Y%m\") %}\n    {% elif partition_by.granularity == 'year' %}\n      {% set partition = partition.strftime(\"%Y\") %}\n    {% endif %}\n    {% set tmp_relation_partitioned = api.Relation.create(database=tmp_relation.database, schema=tmp_relation.schema, identifier=tmp_relation.table ~ '$' ~ partition, type=tmp_relation.type) %}\n    {% set target_relation_partitioned = api.Relation.create(database=target_relation.database, schema=target_relation.schema, identifier=target_relation.table ~ '$' ~ partition, type=target_relation.type) %}\n    {% do adapter.copy_table(tmp_relation_partitioned, target_relation_partitioned, \"table\") %}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5281, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_overwrite_sql": {"name": "bq_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_insert_overwrite_sql", "macro_sql": "{% macro bq_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n  {% if partitions is not none and partitions != [] %} {# static #}\n      {{ bq_static_insert_overwrite_sql(tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, copy_partitions) }}\n  {% else %} {# dynamic #}\n      {{ bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.528503, "supported_languages": null}, "macro.dbt_bigquery.bq_static_insert_overwrite_sql": {"name": "bq_static_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro_sql": "{% macro bq_static_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, copy_partitions\n) %}\n\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {%- if partition_by.time_ingestion_partitioning -%}\n          {{ wrap_with_time_ingestion_partitioning_sql(build_partition_time_exp(partition_by), sql, True) }}\n          {%- else -%}\n          {{sql}}\n          {%- endif -%}\n        )\n      {%- endset -%}\n\n      {% if copy_partitions %}\n          {% do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n      {% else %}\n\n      {#-- Because we're putting the model SQL _directly_ into the MERGE statement,\n         we need to prepend the MERGE statement with the user-configured sql_header,\n         which may be needed to resolve that model SQL (e.g. referencing a variable or UDF in the header)\n         in the \"dynamic\" case, we save the model SQL result as a temp table first, wherein the\n         sql_header is included by the create_table_as macro.\n      #}\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=true) }}\n\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.build_partition_time_exp", "macro.dbt_bigquery.bq_copy_partitions", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.529056, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql": {"name": "bq_dynamic_copy_partitions_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_copy_partitions_insert_overwrite_sql(\n  tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions\n  ) %}\n  {# We run temp table creation in a separated script to move to partitions copy #}\n  {%- call statement('create_tmp_relation_for_copy', language='sql') -%}\n    {{ declare_dbt_max_partition(this, partition_by, sql, 'sql') +\n     bq_create_table_as(partition_by.time_ingestion_partitioning, True, tmp_relation, sql, 'sql')\n  }}\n  {%- endcall %}\n  {%- set partitions_sql -%}\n    select distinct {{ partition_by.render_wrapped() }}\n    from {{ tmp_relation }}\n  {%- endset -%}\n  {%- set partitions = run_query(partitions_sql).columns[0].values() -%}\n  {# We copy the partitions #}\n  {%- do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) -%}\n  -- Clean up the temp table\n  drop table if exists {{ tmp_relation }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt_unit_testing.run_query", "macro.dbt_bigquery.bq_copy_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.529571, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql": {"name": "bq_dynamic_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) %}\n  {%- if copy_partitions is true %}\n     {{ bq_dynamic_copy_partitions_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else -%}\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        _PARTITIONTIME,\n        {%- endif -%}\n        * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type_for_partition() }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n        {{ declare_dbt_max_partition(this, partition_by, sql) }}\n\n       -- 1. create a temp table with model data\n        {{ bq_create_table_as(partition_by.time_ingestion_partitioning, True, tmp_relation, sql, 'sql') }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              array_agg(distinct {{ partition_by.render_wrapped() }})\n          from {{ tmp_relation }}\n      );\n\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate]) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.530315, "supported_languages": null}, "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql": {"name": "wrap_with_time_ingestion_partitioning_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro_sql": "{% macro wrap_with_time_ingestion_partitioning_sql(partition_time_exp, sql, is_nested) %}\n\n  select {{ partition_time_exp['value'] }} as _partitiontime, * EXCEPT({{ partition_time_exp['field'] }}) from (\n    {{ sql }}\n  ){%- if not is_nested -%};{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.531778, "supported_languages": null}, "macro.dbt_bigquery.create_ingestion_time_partitioned_table_as_sql": {"name": "create_ingestion_time_partitioned_table_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.create_ingestion_time_partitioned_table_as_sql", "macro_sql": "{% macro create_ingestion_time_partitioned_table_as_sql(temporary, relation, sql) -%}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n\n  {%- set columns = get_columns_with_types_in_query_sql(sql) -%}\n  {%- set table_dest_columns_csv = columns_without_partition_fields_csv(partition_config, columns) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  {% set ingestion_time_partition_config_raw = fromjson(tojson(raw_partition_by)) %}\n  {% do ingestion_time_partition_config_raw.update({'field':'_PARTITIONTIME'}) %}\n\n  {%- set ingestion_time_partition_config = adapter.parse_partition_by(ingestion_time_partition_config_raw) -%}\n\n  create or replace table {{ relation }} ({{table_dest_columns_csv}})\n  {{ partition_by(ingestion_time_partition_config) }}\n  {{ cluster_by(raw_cluster_by) }}\n  {{ bigquery_table_options(config, model, temporary) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5324538, "supported_languages": null}, "macro.dbt_bigquery.get_quoted_with_types_csv": {"name": "get_quoted_with_types_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_quoted_with_types_csv", "macro_sql": "{% macro get_quoted_with_types_csv(columns) %}\n    {% set quoted = [] %}\n    {% for col in columns -%}\n        {%- do quoted.append(adapter.quote(col.name) ~ \" \" ~ col.data_type) -%}\n    {%- endfor %}\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5327501, "supported_languages": null}, "macro.dbt_bigquery.columns_without_partition_fields_csv": {"name": "columns_without_partition_fields_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro_sql": "{% macro columns_without_partition_fields_csv(partition_config, columns) -%}\n  {%- set columns_no_partition = partition_config.reject_partition_field_column(columns) -%}\n  {% set columns_names = get_quoted_with_types_csv(columns_no_partition) %}\n  {{ return(columns_names) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_quoted_with_types_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5329301, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql": {"name": "bq_insert_into_ingestion_time_partitioned_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql", "macro_sql": "{% macro bq_insert_into_ingestion_time_partitioned_table_sql(target_relation, sql) -%}\n  {%- set partition_by = config.get('partition_by', none) -%}\n  {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set dest_columns_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n  insert into {{ target_relation }} (_partitiontime, {{ dest_columns_csv }})\n    {{ wrap_with_time_ingestion_partitioning_sql(build_partition_time_exp(partition_by), sql, False) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.build_partition_time_exp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5332391, "supported_languages": null}, "macro.dbt_bigquery.get_columns_with_types_in_query_sql": {"name": "get_columns_with_types_in_query_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro_sql": "{% macro get_columns_with_types_in_query_sql(select_sql) %}\n  {% set sql %}\n    select * from (\n      {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n  {% endset %}\n  {{ return(adapter.get_columns_in_select_sql(sql)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5334048, "supported_languages": null}, "macro.dbt_bigquery.bigquery__except": {"name": "bigquery__except", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt_bigquery.bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.533481, "supported_languages": null}, "macro.dbt_bigquery.bigquery__dateadd": {"name": "bigquery__dateadd", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_bigquery.bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.53364, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp": {"name": "bigquery__current_timestamp", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.533765, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"name": "bigquery__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5338938, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp_backcompat": {"name": "bigquery__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp_backcompat", "macro_sql": "{% macro bigquery__current_timestamp_backcompat() -%}\n  current_timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5339541, "supported_languages": null}, "macro.dbt_bigquery.bigquery__intersect": {"name": "bigquery__intersect", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt_bigquery.bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5340302, "supported_languages": null}, "macro.dbt_bigquery.bigquery__escape_single_quotes": {"name": "bigquery__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.534165, "supported_languages": null}, "macro.dbt_bigquery.bigquery__right": {"name": "bigquery__right", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_bigquery.bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.534328, "supported_languages": null}, "macro.dbt_bigquery.bigquery__listagg": {"name": "bigquery__listagg", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_bigquery.bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5346072, "supported_languages": null}, "macro.dbt_bigquery.bigquery__datediff": {"name": "bigquery__datediff", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_bigquery.bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.53516, "supported_languages": null}, "macro.dbt_bigquery.bigquery__safe_cast": {"name": "bigquery__safe_cast", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_bigquery.bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.535281, "supported_languages": null}, "macro.dbt_bigquery.bigquery__hash": {"name": "bigquery__hash", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt_bigquery.bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.535394, "supported_languages": null}, "macro.dbt_bigquery.bigquery__position": {"name": "bigquery__position", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt_bigquery.bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.53552, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_concat": {"name": "bigquery__array_concat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.535639, "supported_languages": null}, "macro.dbt_bigquery.bigquery__bool_or": {"name": "bigquery__bool_or", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_bigquery.bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5357351, "supported_languages": null}, "macro.dbt_bigquery.bigquery__split_part": {"name": "bigquery__split_part", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_bigquery.bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.536139, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date_trunc": {"name": "bigquery__date_trunc", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt_bigquery.bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.536267, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_construct": {"name": "bigquery__array_construct", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    ARRAY<{{data_type}}>[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.536482, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_append": {"name": "bigquery__array_append", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.53663, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_show_grant_sql": {"name": "bigquery__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql", "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5370948, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_grant_sql": {"name": "bigquery__get_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql", "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5372689, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_revoke_sql": {"name": "bigquery__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql", "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.537437, "supported_languages": null}, "macro.dbt_bigquery.bigquery__resolve_model_name": {"name": "bigquery__resolve_model_name", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt_bigquery.bigquery__resolve_model_name", "macro_sql": "{% macro bigquery__resolve_model_name(input_model_name) -%}\n    {{ input_model_name | string | replace('`', '') | replace('\"', '\\\"') }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.537611, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5384, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5385401, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5386398, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.538738, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.53884, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.539111, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.539335, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.539548, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.539859, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.540054, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.542679, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.542801, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5429618, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.543475, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.543591, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.543713, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.544703, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.545616, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.548594, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.548793, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5489101, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.548974, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.549075, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.549152, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.549299, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.549964, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.550106, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.550297, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5506098, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.555091, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.556561, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.556881, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5571032, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.557368, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.557632, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5587971, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.559187, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.559659, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5598311, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.560339, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.564919, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.566047, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.56623, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.566933, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.567125, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.567589, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.568044, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.568691, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.568852, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.568989, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.569197, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.569332, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.569537, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.569667, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5698502, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.569982, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.570163, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5703611, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.573885, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.57796, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.578811, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.579654, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.580255, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.582102, "supported_languages": ["sql"]}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.582468, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.582596, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.582895, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.583189, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5850549, "supported_languages": ["sql"]}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5852711, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.585431, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.58652, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5867798, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.586904, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.587029, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5872152, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.58963, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5934012, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.594039, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.594203, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.594545, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5946748, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.594767, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.594861, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5949461, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5950599, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.595144, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.595485, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.595619, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5965052, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.596784, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5969548, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.597342, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.597533, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5977411, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5980191, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.598198, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.598469, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.598678, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5988579, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.5992599, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6003761, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6008031, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.601017, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.602375, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.60321, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.603744, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.603914, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.604081, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6041338, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.604368, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.604482, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.604652, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.604738, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.604914, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6049972, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6052392, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6053529, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.605506, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.605557, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.605741, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.605849, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6060622, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6061592, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6066182, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.606915, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.607161, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.607287, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.607498, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6076071, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.607798, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6079922, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.608165, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6082728, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.608445, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6085172, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6087239, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6088161, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.608989, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.60906, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.609766, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.609879, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.609997, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.610108, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.61022, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.610324, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6104372, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.610564, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6106791, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6107829, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.610894, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.610995, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6111019, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6112, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6113942, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.611486, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6116621, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.611733, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.611973, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.612226, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6123352, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6127071, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6128268, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.61298, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.613178, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.613274, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.613536, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.613705, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.613905, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.614005, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6142762, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.614409, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.614521, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6146529, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.615007, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.615117, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.615217, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6152909, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.615403, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6154659, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.615579, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.615693, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6160178, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.616118, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.616229, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.616514, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.619045, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.619236, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6193879, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.619615, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.619791, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.620021, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.620152, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.62031, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6204438, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6205618, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6207, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.620896, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.621075, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.621462, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.621623, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6217222, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.621859, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.622159, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6224508, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.62369, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.62377, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.623887, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.623969, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.624205, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6243389, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6244102, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.624565, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.624695, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.624853, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6250591, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.625221, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.625692, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.625824, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6260018, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6261601, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.62697, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6274931, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6276128, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.627758, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.627876, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6280599, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.628395, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.629519, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6297002, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6298292, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.62994, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6300669, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.630233, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.630371, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.630581, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.630711, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.630823, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.632056, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.632169, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.632388, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.632517, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.632756, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.632991, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.633404, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.633585, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.634136, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.635154, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.635259, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.635542, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6358268, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.636236, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6365702, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6366231, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6369972, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6371672, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.637367, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.637562, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.637821, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6381881, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.63854, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.639007, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6392379, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.63947, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6402738, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6410072, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.641634, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.642381, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.642848, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6430879, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6436212, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.644314, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.644632, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.64496, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.645396, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.645738, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.646121, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6463969, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.646864, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.647423, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.647873, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.648323, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6487129, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6489558, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.649239, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.649488, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.649952, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.650516, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.651159, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6517901, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.652338, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.652971, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6533298, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6535401, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6560378, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.657296, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6574879, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.657604, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.657913, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6581068, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.658242, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.658418, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6585338, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6589608, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.659555, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.660058, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.660467, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.660629, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.660886, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.661162, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.661547, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.661771, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.662007, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.662488, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.663075, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.663695, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.663987, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.664116, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.664486, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.66502, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.665728, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.666133, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.666355, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6672509, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.668253, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.669295, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.670437, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.670645, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.670738, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.673093, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6757529, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6759942, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.676191, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6767821, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6769521, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6771011, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.677242, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.67737, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6774971, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6778061, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6779861, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.678283, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.678696, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6789591, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6792052, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.680505, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6807811, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6813362, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.68173, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.682637, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.683848, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.684672, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.685334, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.685704, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.686254, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.686852, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6872802, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.68743, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6877298, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.688187, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.68854, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.68903, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.689433, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.689539, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6896482, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.68975, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.690141, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.690696, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.691544, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.691755, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.692184, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6927722, "supported_languages": null}, "macro.dbt_unit_testing.print_table": {"name": "print_table", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/output.sql", "original_file_path": "macros/output.sql", "unique_id": "macro.dbt_unit_testing.print_table", "macro_sql": "{% macro print_table(agate_table) %}\n  {% set columns_start_index = 2 %}\n  {% set columns_info = [] %}\n  {% for col_name in agate_table.column_names %}\n    {% set col_index = loop.index0 %}\n    {% set column_info = {\"max_length\": col_name | length, \"is_string\": false, \"has_differences\": false} %}\n    {% for row in agate_table.rows %}\n      {% set cell_value = row[col_name] %}\n      {% set l = cell_value | string | length %}\n      {% if l > column_info.max_length %}\n        {% do column_info.update({\"max_length\": l}) %}\n      {% endif %}\n      {% do column_info.update({\"is_string\": column_info.is_string or cell_value is string}) %}\n\n      {% if col_index >= columns_start_index %}\n        {% if column_info.previous_value is defined and column_info.previous_value != cell_value %}\n          {% do column_info.update({\"has_differences\": true}) %}\n        {% endif %}\n        {% do column_info.update({\"previous_value\": cell_value}) %}\n      {% endif %}\n\n    {% endfor %}  \n    {% set columns_info = columns_info.append(column_info) %}\n  {% endfor %}\n\n  {% set cells = [] %}\n  {% for col_name in agate_table.column_names %}\n    {% set col_index = loop.index0 %}\n    {% set padded = dbt_unit_testing.pad(col_name, columns_info[col_index].max_length, pad_right=columns_info[col_index].is_string) %}\n    {% if columns_info[col_index].has_differences %}\n      {% do cells.append(\"{RED}\" ~ padded ~ \"{RESET}\") %}\n    {% else %}\n      {% do cells.append(padded) %}\n    {% endif %}\n  {% endfor %}\n  {{ dbt_unit_testing.println(\"| \" ~ cells | join(\" | \") ~ \" |\")}}\n\n  {% set cells = [] %}\n  {% for col_name in agate_table.column_names %}\n    {% set col_index = loop.index0 %}\n    {% set line = dbt_unit_testing.pad(\"\", columns_info[col_index].max_length, c=\"-\") %}\n    {% if columns_info[col_index].has_differences %}\n      {% do cells.append(\"{RED}\" ~ line ~ \"{RESET}\") %}\n    {% else %}\n      {% do cells.append(line) %}\n    {% endif %}\n  {% endfor %}\n  {{ dbt_unit_testing.println(\"| \" ~ cells | join(\" | \") ~ \" |\")}}\n\n  {% for row in agate_table.rows %}\n    {% set cells = [] %}\n    {% for cell_value in row %}\n      {% set col_index = loop.index0 %}\n        {% set padded = dbt_unit_testing.pad(cell_value, columns_info[col_index].max_length, pad_right=cell_value is string) %}\n        {% if columns_info[col_index].has_differences %}\n          {% do cells.append(\"{RED}\" ~ padded ~ \"{RESET}\") %}\n        {% else %}\n          {% do cells.append(padded) %}\n        {% endif %}\n    {% endfor %}\n    {{ dbt_unit_testing.println(\"| \" ~ cells | join(\" | \") ~ \" |\")}}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.pad", "macro.dbt_unit_testing.println"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.697474, "supported_languages": null}, "macro.dbt_unit_testing.pad": {"name": "pad", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/output.sql", "original_file_path": "macros/output.sql", "unique_id": "macro.dbt_unit_testing.pad", "macro_sql": "{% macro pad(v, pad, pad_right=false, c=\" \") %}\n  {% set padding = c * (pad - v | string | length) %}\n  {% if pad_right %}\n    {{ return (v ~ padding) }}\n  {% else %}\n    {{ return (padding ~ v) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.697802, "supported_languages": null}, "macro.dbt_unit_testing.parse_colors": {"name": "parse_colors", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/output.sql", "original_file_path": "macros/output.sql", "unique_id": "macro.dbt_unit_testing.parse_colors", "macro_sql": "{% macro parse_colors(s) %}\n  {{ return (s\n      .replace(\"{RED}\", \"\\x1b[0m\\x1b[31m\")\n      .replace(\"{GREEN}\", \"\\x1b[0m\\x1b[32m\")\n      .replace(\"{YELLOW}\", \"\\x1b[0m\\x1b[33m\")\n      .replace(\"{RESET}\", \"\\x1b[0m\")) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6980228, "supported_languages": null}, "macro.dbt_unit_testing.println": {"name": "println", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/output.sql", "original_file_path": "macros/output.sql", "unique_id": "macro.dbt_unit_testing.println", "macro_sql": "{% macro println(s) %}\n  {% do log(dbt_unit_testing.parse_colors(s ~ \"{RESET}\"), info=true) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.parse_colors"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.6981661, "supported_languages": null}, "macro.dbt_unit_testing.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.run_query", "macro_sql": "{% macro run_query(query) %}\n  {% set start_time = modules.datetime.datetime.now() %}\n  {{ dbt_unit_testing.verbose('Running query => ' ~ dbt_unit_testing.sanitize(query)) }}\n  {% set results = run_query(query) %}\n  {% set end_time = modules.datetime.datetime.now() - start_time %}\n  {{ dbt_unit_testing.verbose('Execution time => ' ~ end_time) }}\n  {{ dbt_unit_testing.verbose('==============================================================') }}\n  {{ return (results) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.verbose", "macro.dbt_unit_testing.sanitize"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7054121, "supported_languages": null}, "macro.dbt_unit_testing.sanitize": {"name": "sanitize", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.sanitize", "macro_sql": "{% macro sanitize(s) %}\n  {{ return (\" \".join(s.split())) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7055428, "supported_languages": null}, "macro.dbt_unit_testing.render_node": {"name": "render_node", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.render_node", "macro_sql": "{% macro render_node(node) %}\n  {% set sql = node.raw_sql if node.raw_sql is defined else node.raw_code %}\n  {{ return (render(sql)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.705722, "supported_languages": null}, "macro.dbt_unit_testing.extract_columns_list": {"name": "extract_columns_list", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.extract_columns_list", "macro_sql": "{% macro extract_columns_list(query) %}\n  {% set results = dbt_unit_testing.run_query(query) %}\n  {% set columns = results.columns | map(attribute='name') | list %}\n  {{ return (columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.705929, "supported_languages": null}, "macro.dbt_unit_testing.extract_columns_difference": {"name": "extract_columns_difference", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.extract_columns_difference", "macro_sql": "{% macro extract_columns_difference(cl1, cl2) %}\n  {% set columns = cl1 | map('lower') | list | reject('in', cl2 | map('lower') | list) | list %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7061498, "supported_languages": null}, "macro.dbt_unit_testing.quote_and_join_columns": {"name": "quote_and_join_columns", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.quote_and_join_columns", "macro_sql": "{% macro quote_and_join_columns(columns) %}\n  {% set columns = dbt_unit_testing.map(columns, dbt_unit_testing.quote_identifier) | join(\",\") %}\n  {{ return (columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.map"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7063308, "supported_languages": null}, "macro.dbt_unit_testing.sql_encode": {"name": "sql_encode", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.sql_encode", "macro_sql": "{% macro sql_encode(s) %}\n  {{ return (s.replace('\"', '####_quote_####').replace('\\n', '####_cr_####').replace('\\t', '####_tab_####')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.706516, "supported_languages": null}, "macro.dbt_unit_testing.sql_decode": {"name": "sql_decode", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.sql_decode", "macro_sql": "{% macro sql_decode(s) %}\n  {{ return (s.replace('####_quote_####', '\"').replace('####_cr_####', '\\n').replace('####_tab_####', '\\t')) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7066948, "supported_languages": null}, "macro.dbt_unit_testing.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.log_info", "macro_sql": "{% macro log_info(s, only_on_execute=false) %}\n  {% if not only_on_execute or execute %}\n    {% do log (s, info=true) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.706869, "supported_languages": null}, "macro.dbt_unit_testing.debug": {"name": "debug", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.debug", "macro_sql": "{% macro debug(s) %}\n  {{ dbt_unit_testing.log_info (s, only_on_execute=true) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.706979, "supported_languages": null}, "macro.dbt_unit_testing.verbose": {"name": "verbose", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.verbose", "macro_sql": "{% macro verbose(s) %}\n  {% if var('verbose', dbt_unit_testing.config_is_true('verbose')) %}\n    {{ dbt_unit_testing.log_info (s, only_on_execute=true) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.config_is_true", "macro.dbt_unit_testing.log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.707169, "supported_languages": null}, "macro.dbt_unit_testing.map": {"name": "map", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.map", "macro_sql": "{% macro map(items, f) %}\n  {% set mapped_items=[] %}\n  {% for item in items %}\n    {% do mapped_items.append(f(item)) %}\n  {% endfor %}\n  {{ return (mapped_items) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.707399, "supported_languages": null}, "macro.dbt_unit_testing.node_by_id": {"name": "node_by_id", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.node_by_id", "macro_sql": "{% macro node_by_id (node_id) %}]\n  {{ return (graph.nodes[node_id] if node_id in graph.nodes else graph.sources[node_id]) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.707564, "supported_languages": null}, "macro.dbt_unit_testing.graph_node_by_prefix": {"name": "graph_node_by_prefix", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.graph_node_by_prefix", "macro_sql": "{% macro graph_node_by_prefix (prefix, name) %}\n  {{ return (graph.nodes[prefix ~ \".\" ~ model.package_name ~ \".\" ~ name])}}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.707722, "supported_languages": null}, "macro.dbt_unit_testing.model_node": {"name": "model_node", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.model_node", "macro_sql": "{% macro model_node (model_name) %}\n  {% set node = nil\n      | default(dbt_unit_testing.graph_node_by_prefix(\"model\", model_name))\n      | default(dbt_unit_testing.graph_node_by_prefix(\"snapshot\", model_name)) \n      | default(dbt_unit_testing.graph_node_by_prefix(\"seed\", model_name)) %}\n  {% if not node %}\n    {{ dbt_unit_testing.raise_error(\"Node \" ~ model.package_name ~ \".\" ~ model_name ~ \" not found.\") }}\n  {% endif %}\n  {{ return (node) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.graph_node_by_prefix", "macro.dbt_unit_testing.raise_error"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.708107, "supported_languages": null}, "macro.dbt_unit_testing.source_node": {"name": "source_node", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.source_node", "macro_sql": "{% macro source_node(source_name, model_name) %}\n  {{ return (graph.sources[\"source.\" ~ model.package_name ~ \".\" ~ source_name ~ \".\" ~ model_name]) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.708283, "supported_languages": null}, "macro.dbt_unit_testing.graph_node": {"name": "graph_node", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.graph_node", "macro_sql": "{% macro graph_node(source_name, model_name) %}\n  {% if source_name %}\n    {{ return (dbt_unit_testing.source_node(source_name, model_name)) }}\n  {% else %}\n    {{ return (dbt_unit_testing.model_node(model_name)) }}\n  {% endif  %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.source_node", "macro.dbt_unit_testing.model_node"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.708506, "supported_languages": null}, "macro.dbt_unit_testing.merge_jsons": {"name": "merge_jsons", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.merge_jsons", "macro_sql": "{% macro merge_jsons(jsons) %}\n  {% set json = {} %}\n  {% for j in jsons %}\n    {% for k,v in j.items() %}\n      {% do json.update({k: v}) %}\n    {% endfor %}\n  {% endfor %}\n  {{ return (json) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7088032, "supported_languages": null}, "macro.dbt_unit_testing.get_config": {"name": "get_config", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.get_config", "macro_sql": "{% macro get_config(config_name, default_value) %}\n  {% set unit_tests_config = var(\"unit_tests_config\", {}) %}\n  {% set unit_tests_config = {} if unit_tests_config is none else unit_tests_config %}\n  {{ return (unit_tests_config.get(config_name, default_value))}}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7090502, "supported_languages": null}, "macro.dbt_unit_testing.config_is_true": {"name": "config_is_true", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.config_is_true", "macro_sql": "{% macro config_is_true(config_name) %}\n  {{ return (dbt_unit_testing.get_config(config_name, default_value=false))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.get_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7091782, "supported_languages": null}, "macro.dbt_unit_testing.merge_configs": {"name": "merge_configs", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.merge_configs", "macro_sql": "{% macro merge_configs(configs) %}\n  {% set unit_tests_config = var(\"unit_tests_config\", {}) %}\n  {% set unit_tests_config = {} if unit_tests_config is none else unit_tests_config %}\n  {{ return (dbt_unit_testing.merge_jsons([unit_tests_config] + configs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.merge_jsons"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7094212, "supported_languages": null}, "macro.dbt_unit_testing.quote_identifier": {"name": "quote_identifier", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.quote_identifier", "macro_sql": "{% macro quote_identifier(identifier) %}\n    {{ return(adapter.dispatch('quote_identifier','dbt_unit_testing')(identifier)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.bigquery__quote_identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.709568, "supported_languages": null}, "macro.dbt_unit_testing.default__quote_identifier": {"name": "default__quote_identifier", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.default__quote_identifier", "macro_sql": "{% macro default__quote_identifier(identifier) -%}\n    {% if identifier.startswith('\"') %}\n      {{ return(identifier) }}\n    {% else %}\n      {{ return('\"' ~ identifier ~ '\"') }}\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.709779, "supported_languages": null}, "macro.dbt_unit_testing.bigquery__quote_identifier": {"name": "bigquery__quote_identifier", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.bigquery__quote_identifier", "macro_sql": "{% macro bigquery__quote_identifier(identifier) %}\n    {% if identifier.startswith('`') %}\n      {{ return(identifier) }}\n    {% else %}\n      {{ return('`' ~ identifier ~ '`') }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7100139, "supported_languages": null}, "macro.dbt_unit_testing.snowflake__quote_identifier": {"name": "snowflake__quote_identifier", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.snowflake__quote_identifier", "macro_sql": "{% macro snowflake__quote_identifier(identifier) %}\n    {% if identifier.startswith('\"') %}\n      {{ return(identifier) }}\n    {% else %}\n      {{ return('\"' ~ identifier | upper ~ '\"') }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.710316, "supported_languages": null}, "macro.dbt_unit_testing.cache": {"name": "cache", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.cache", "macro_sql": "{% macro cache(scope_key, key, value) %}\n  {% if dbt_unit_testing.config_is_true('disable_cache') %}\n    {{ return (nil) }}\n  {% else %}\n    {% set cache = graph.get(\"__DUT_CACHE__\", {}) %}\n    {% set scope = cache.get(scope_key, {}) %}\n    {% do scope.update({key: value}) %}\n    {% do cache.update({scope_key: scope}) %}\n    {% do graph.update({\"__DUT_CACHE__\": cache}) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.config_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.710837, "supported_languages": null}, "macro.dbt_unit_testing.get_from_cache": {"name": "get_from_cache", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.get_from_cache", "macro_sql": "{% macro get_from_cache(scope, key) %}\n  {% set cache = graph.get(\"__DUT_CACHE__\", {}).get(scope, {}) %}\n  {{ return (cache[key]) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.711066, "supported_languages": null}, "macro.dbt_unit_testing.raise_error": {"name": "raise_error", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "unique_id": "macro.dbt_unit_testing.raise_error", "macro_sql": "{% macro raise_error(error_message) %}\n  {{ exceptions.raise_compiler_error('\\x1b[31m' ~ error_message ~ '\\x1b[0m') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.711186, "supported_languages": null}, "macro.dbt_unit_testing.build_input_values_sql": {"name": "build_input_values_sql", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/input_parsing.sql", "original_file_path": "macros/input_parsing.sql", "unique_id": "macro.dbt_unit_testing.build_input_values_sql", "macro_sql": "{% macro build_input_values_sql(input_values, options) %}\n    {% set input_values_sql = input_values %}\n\n    {% if options.input_format | lower == \"csv\" %}\n      {% set input_values_sql = dbt_unit_testing.sql_from_csv_input(input_values, options) %}\n    {%- endif -%}\n\n    {{ return (input_values_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.sql_from_csv_input"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.712388, "supported_languages": null}, "macro.dbt_unit_testing.sql_from_csv": {"name": "sql_from_csv", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/input_parsing.sql", "original_file_path": "macros/input_parsing.sql", "unique_id": "macro.dbt_unit_testing.sql_from_csv", "macro_sql": "{% macro sql_from_csv(options={}) %}\n  {{ return (sql_from_csv_input(caller(), options)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.sql_from_csv_input"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7125351, "supported_languages": null}, "macro.dbt_unit_testing.sql_from_csv_input": {"name": "sql_from_csv_input", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/input_parsing.sql", "original_file_path": "macros/input_parsing.sql", "unique_id": "macro.dbt_unit_testing.sql_from_csv_input", "macro_sql": "{% macro sql_from_csv_input(csv_table, options) %}\n  {% set column_separator = options.column_separator | default(\",\") %}\n  {% set line_separator = options.line_separator | default(\"\\n\") %}\n  {% set type_separator = options.type_separator | default(\"::\") %}\n  {% set ns = namespace(col_names=[], col_types = [], col_values = [], row_values=[]) %}\n\n  {% set rows = csv_table.split(line_separator) | map('trim') | reject('==', '') | list %}\n  {% set cols = rows[0].split(column_separator) | map('trim') %}\n  {% for col in cols %}\n    {% set c = col.split(type_separator) | list %}\n    {% set col_name = c[0] %}\n    {% set col_type = c[1] %}\n    {% set ns.col_names = ns.col_names + [col_name] %}\n    {% set ns.col_types = ns.col_types + [col_type] %}\n  {% endfor %}\n\n  {% for row in rows[1:] %}\n    {% set cols = row.split(column_separator) | map('trim') | list %}\n    {% set ns.col_values = [] %}\n    {% for col in cols %}\n      {% set col_value = col %}\n      {% set col_type = ns.col_types[loop.index-1] %}\n      {% if col_type is defined %}\n        {% set col_value = \"CAST(\" ~ col_value ~ \" as \" ~ col_type ~ \")\" %}\n      {% endif %}\n      {% set col_value = col_value ~ \" as \" ~ ns.col_names[loop.index-1] %}\n      {% set ns.col_values = ns.col_values + [col_value] %}\n    {% endfor %}\n\n    {% set col_values = ns.col_values | join(\",\") %}\n    {% set sql_row = \"select \" ~ col_values %}\n    {% set ns.row_values = ns.row_values + [sql_row] %}\n  {% endfor %}\n\n  {% set sql = ns.row_values | join(\"\\n union all\\n\") %}\n\n  {{ return (sql) }}\n\n {% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7142122, "supported_languages": null}, "macro.dbt_unit_testing.build_model_complete_sql": {"name": "build_model_complete_sql", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/sql_builders.sql", "original_file_path": "macros/sql_builders.sql", "unique_id": "macro.dbt_unit_testing.build_model_complete_sql", "macro_sql": "{% macro build_model_complete_sql(model_node, mocks=[], options={}) %}\n  {% set models_to_exclude = mocks | rejectattr(\"options.include_missing_columns\", \"==\", true) | map(attribute=\"unique_id\") | list %}\n\n  {# when using the database models, there is no need to build full lineage #}\n  {% set build_full_lineage = not options.use_database_models %}\n\n  {% set model_dependencies = dbt_unit_testing.build_model_dependencies(model_node, models_to_exclude, build_full_lineage) %}\n\n  {% set cte_dependencies = [] %}\n  {% for node_id in model_dependencies %}\n    {% set node = dbt_unit_testing.node_by_id(node_id) %}\n    {% set mock = mocks | selectattr(\"unique_id\", \"==\", node_id) | first %}\n    {% set cte_name = dbt_unit_testing.cte_name(mock if mock else node) %}\n    {% set cte_sql = mock.input_values if mock else dbt_unit_testing.build_node_sql(node, use_database_models=options.use_database_models) %}\n    {% set cte = dbt_unit_testing.quote_identifier(cte_name) ~ \" as (\" ~ cte_sql ~ \")\" %}\n    {% set cte_dependencies = cte_dependencies.append(cte) %}\n  {%- endfor -%}\n\n  {%- set model_complete_sql -%}\n    {% if cte_dependencies %}\n      with\n      {{ cte_dependencies | join(\",\\n\") }}\n    {%- endif -%}\n    {{ \"\\n\" }}\n    select * from ({{ dbt_unit_testing.render_node(model_node) }} {{ \"\\n\" }} ) as t\n  {%- endset -%}\n\n  {% do return(model_complete_sql) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.build_model_dependencies", "macro.dbt_unit_testing.node_by_id", "macro.dbt_unit_testing.cte_name", "macro.dbt_unit_testing.build_node_sql", "macro.dbt_unit_testing.quote_identifier", "macro.dbt_unit_testing.render_node"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.717984, "supported_languages": null}, "macro.dbt_unit_testing.cte_name": {"name": "cte_name", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/sql_builders.sql", "original_file_path": "macros/sql_builders.sql", "unique_id": "macro.dbt_unit_testing.cte_name", "macro_sql": "{% macro cte_name(node) %}\n  {% if node.resource_type in ('source') %}\n    {{ return (dbt_unit_testing.source_cte_name(node.source_name, node.name)) }}\n  {% else %}\n    {{ return (dbt_unit_testing.ref_cte_name(node.name)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.source_cte_name", "macro.dbt_unit_testing.ref_cte_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7182899, "supported_languages": null}, "macro.dbt_unit_testing.ref_cte_name": {"name": "ref_cte_name", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/sql_builders.sql", "original_file_path": "macros/sql_builders.sql", "unique_id": "macro.dbt_unit_testing.ref_cte_name", "macro_sql": "{% macro ref_cte_name(model_name) %}\n  {{ return (dbt_unit_testing.quote_identifier(model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.quote_identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.718409, "supported_languages": null}, "macro.dbt_unit_testing.source_cte_name": {"name": "source_cte_name", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/sql_builders.sql", "original_file_path": "macros/sql_builders.sql", "unique_id": "macro.dbt_unit_testing.source_cte_name", "macro_sql": "{% macro source_cte_name(source, table_name) %}\n  {%- set cte_name -%}\n    {%- if dbt_unit_testing.config_is_true(\"use_qualified_sources\") -%}\n      {%- set source_node = dbt_unit_testing.source_node(source, table_name) -%}\n      {{ [source, table_name] | join(\"__\") }}\n    {%- else -%}\n      {{ table_name }}\n    {%- endif -%}\n  {%- endset -%}\n  {{ return (dbt_unit_testing.quote_identifier(cte_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.config_is_true", "macro.dbt_unit_testing.source_node", "macro.dbt_unit_testing.quote_identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.71876, "supported_languages": null}, "macro.dbt_unit_testing.build_model_dependencies": {"name": "build_model_dependencies", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/sql_builders.sql", "original_file_path": "macros/sql_builders.sql", "unique_id": "macro.dbt_unit_testing.build_model_dependencies", "macro_sql": "{% macro build_model_dependencies(node, models_to_exclude, build_full_lineage=True) %}\n\n  {% set model_dependencies = [] %}\n  {% for node_id in node.depends_on.nodes %}\n    {% set node = dbt_unit_testing.node_by_id(node_id) %}\n    {% if node.unique_id not in models_to_exclude %}\n      {% if node.resource_type in ('model','snapshot') and build_full_lineage %}\n        {% set child_model_dependencies = dbt_unit_testing.build_model_dependencies(node) %}\n        {% for dependency_node_id in child_model_dependencies %}\n          {{ model_dependencies.append(dependency_node_id) }}\n        {% endfor %}\n      {% endif %}\n    {% endif %}\n    {{ model_dependencies.append(node_id) }}\n  {% endfor %}\n\n  {{ return (model_dependencies | unique | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.node_by_id", "macro.dbt_unit_testing.build_model_dependencies"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.719357, "supported_languages": null}, "macro.dbt_unit_testing.build_node_sql": {"name": "build_node_sql", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/sql_builders.sql", "original_file_path": "macros/sql_builders.sql", "unique_id": "macro.dbt_unit_testing.build_node_sql", "macro_sql": "{% macro build_node_sql(node, complete=false, use_database_models=false) %}\n  {%- if use_database_models or node.resource_type in ('source', 'seed') -%}\n    {%- if node.resource_type == \"source\" %}\n      {% set name = node.identifier %}\n    {%- elif node.resource_type == \"snapshot\" %}\n      {%- if node.config.alias is not none %}\n        {% set name = node.config.alias %}\n      {%- else %}\n        {% set name = node.name %}\n      {%- endif %}\n    {%- else %}\n      {% set name = node.name %}\n    {%- endif %}\n\n    select * from {{ dbt_unit_testing.quote_identifier(node.database) ~ '.' ~ dbt_unit_testing.quote_identifier(node.schema) ~ '.' ~ dbt_unit_testing.quote_identifier(name) }} where false\n  {%- else -%}\n    {% if complete %}\n      {{ dbt_unit_testing.build_model_complete_sql(node) }}\n    {%- else -%}\n      {{ dbt_unit_testing.render_node(node) ~ \"\\n\"}}\n    {%- endif -%}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.quote_identifier", "macro.dbt_unit_testing.build_model_complete_sql", "macro.dbt_unit_testing.render_node"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.720094, "supported_languages": null}, "macro.dbt_unit_testing.mock_ref": {"name": "mock_ref", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/mock_builders.sql", "original_file_path": "macros/mock_builders.sql", "unique_id": "macro.dbt_unit_testing.mock_ref", "macro_sql": "{% macro mock_ref(model_name, options={}) %}\n  {% set mock = {\n     \"type\": 'mock',\n     \"resource_type\": 'model',\n     \"name\": model_name,\n     \"options\": options,\n     \"input_values\": caller(),\n    }\n  %} \n  {{ return (dbt_unit_testing.append_json(mock)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.append_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.72165, "supported_languages": null}, "macro.dbt_unit_testing.mock_source": {"name": "mock_source", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/mock_builders.sql", "original_file_path": "macros/mock_builders.sql", "unique_id": "macro.dbt_unit_testing.mock_source", "macro_sql": "{% macro mock_source(source_name, table_name, options={}) %}\n  {% if not table_name %}\n    {{ dbt_unit_testing.raise_error('Table name must be provided for source') }}\n  {% endif %}\n  {% set mock = {\n     \"type\": 'mock',\n     \"resource_type\": 'source',\n     \"name\": table_name,\n     \"source_name\": source_name,\n     \"options\": options,\n     \"input_values\": caller(),\n    }\n  %} \n  {{ return (dbt_unit_testing.append_json(mock)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.raise_error", "macro.dbt_unit_testing.append_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7220259, "supported_languages": null}, "macro.dbt_unit_testing.expect": {"name": "expect", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/mock_builders.sql", "original_file_path": "macros/mock_builders.sql", "unique_id": "macro.dbt_unit_testing.expect", "macro_sql": "{% macro expect(options={}) %}\n  {% set expectations = {\n      \"type\": \"expectations\",\n      \"options\": options,\n      \"input_values\": caller(),\n    }\n  %} \n  {{ return (dbt_unit_testing.append_json(expectations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.append_json"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.722254, "supported_languages": null}, "macro.dbt_unit_testing.append_json": {"name": "append_json", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/mock_builders.sql", "original_file_path": "macros/mock_builders.sql", "unique_id": "macro.dbt_unit_testing.append_json", "macro_sql": "{% macro append_json(json) %}\n  {{ return (json | tojson() ~ '####_JSON_LINE_DELIMITER_####') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7223701, "supported_languages": null}, "macro.dbt_unit_testing.split_json_str": {"name": "split_json_str", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/mock_builders.sql", "original_file_path": "macros/mock_builders.sql", "unique_id": "macro.dbt_unit_testing.split_json_str", "macro_sql": "{% macro split_json_str(json_str) %}\n  {% set lines = json_str.split('####_JSON_LINE_DELIMITER_####') | map('trim') | reject('==', '') | list %}\n  {{ return (dbt_unit_testing.map(lines, fromjson)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.map"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.722594, "supported_languages": null}, "macro.dbt_unit_testing.enrich_mock_sql_with_missing_columns": {"name": "enrich_mock_sql_with_missing_columns", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/mock_builders.sql", "original_file_path": "macros/mock_builders.sql", "unique_id": "macro.dbt_unit_testing.enrich_mock_sql_with_missing_columns", "macro_sql": "{% macro enrich_mock_sql_with_missing_columns(mock, options) %}\n  {% set model_node = dbt_unit_testing.node_by_id(mock.unique_id) %}\n  {% set model_name = model_node.name %}\n  {% set input_values_sql = mock.input_values %}\n\n  {% set model_columns = dbt_unit_testing.get_from_cache(\"COLUMNS\", model_node.name) %}\n  {% if not model_columns %}\n    {% set model_sql = dbt_unit_testing.build_node_sql(model_node, complete=true, use_database_models=options.use_database_models) %}\n    {% set model_columns = dbt_unit_testing.extract_columns_list(model_sql) %}\n    {{ dbt_unit_testing.cache(\"COLUMNS\", model_node.name, model_columns)}}\n  {% else %}\n    {{ dbt_unit_testing.verbose(\"CACHE HIT for \" ~ model_node.name ~ \" COLUMNS\") }}\n  {% endif %}\n  \n  {% set input_columns = dbt_unit_testing.extract_columns_list(input_values_sql) %}\n  {% set missing_columns = dbt_unit_testing.extract_columns_difference(model_columns, input_columns) %}\n\n  {%- if missing_columns -%}\n    {% set input_values_sql %}\n      {% set node_sql = dbt_unit_testing.build_node_sql(model_node, use_database_models=options.use_database_models) %}\n        select * from ({{ input_values_sql }}) as m1\n        left join (select {{ missing_columns | join (\",\")}}\n                  from ({{ node_sql }}) as m2) as m3 on false\n    {%- endset -%}\n  {%- endif -%}\n  {% do mock.update({\"input_values\": input_values_sql}) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.node_by_id", "macro.dbt_unit_testing.get_from_cache", "macro.dbt_unit_testing.build_node_sql", "macro.dbt_unit_testing.extract_columns_list", "macro.dbt_unit_testing.cache", "macro.dbt_unit_testing.verbose", "macro.dbt_unit_testing.extract_columns_difference"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.723516, "supported_languages": null}, "macro.dbt_unit_testing.test": {"name": "test", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/tests.sql", "original_file_path": "macros/tests.sql", "unique_id": "macro.dbt_unit_testing.test", "macro_sql": "{% macro test(model_name, test_description, options={}) %}\n  {{ dbt_unit_testing.ref_tested_model(model_name) }}\n\n  {% if execute %}\n    {% set test_configuration = {\n      \"model_name\": model_name, \n      \"description\": test_description, \n      \"options\": dbt_unit_testing.merge_configs([options])} \n    %}\n    {% set mocks_and_expectations_json_str = caller() %}\n\n    {{ dbt_unit_testing.verbose(\"CONFIG: \" ~ test_configuration) }}\n    \n    {% do test_configuration.update (dbt_unit_testing.build_mocks_and_expectations(test_configuration, mocks_and_expectations_json_str)) %}\n    {% set test_report = dbt_unit_testing.build_test_report(test_configuration) %}\n\n    {% if not test_report.succeeded %}\n      {{ dbt_unit_testing.show_test_report(test_configuration, test_report) }}\n    {% endif %}\n    \n    select 1 as a from (select 1) as t where {{ not test_report.succeeded }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.ref_tested_model", "macro.dbt_unit_testing.merge_configs", "macro.dbt_unit_testing.verbose", "macro.dbt_unit_testing.build_mocks_and_expectations", "macro.dbt_unit_testing.build_test_report", "macro.dbt_unit_testing.show_test_report"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7313511, "supported_languages": null}, "macro.dbt_unit_testing.build_mocks_and_expectations": {"name": "build_mocks_and_expectations", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/tests.sql", "original_file_path": "macros/tests.sql", "unique_id": "macro.dbt_unit_testing.build_mocks_and_expectations", "macro_sql": "{% macro build_mocks_and_expectations(test_configuration, mocks_and_expectations_json_str) %}\n    {% set mocks_and_expectations = dbt_unit_testing.split_json_str(mocks_and_expectations_json_str) %}\n\n    {% for mock_or_expectation in mocks_and_expectations %}\n      {% do mock_or_expectation.update( {\"options\": dbt_unit_testing.merge_configs([test_configuration.options, mock_or_expectation.options])}) %}\n      {% set input_values = dbt_unit_testing.build_input_values_sql(mock_or_expectation.input_values, mock_or_expectation.options) %}\n      {% do mock_or_expectation.update({\"input_values\": input_values}) %}\n    {% endfor %}\n\n    {% set mocks = mocks_and_expectations | selectattr(\"type\", \"==\", \"mock\") | list %}\n    {% set expectations = mocks_and_expectations | selectattr(\"type\", \"==\", \"expectations\") | first %}\n\n    {% for mock in mocks %}\n      {% do mock.update({\"unique_id\": dbt_unit_testing.graph_node(mock.source_name, mock.name).unique_id}) %}\n      {% if mock.options.include_missing_columns %}\n        {% do dbt_unit_testing.enrich_mock_sql_with_missing_columns(mock, test_configuration.options) %}\n      {% endif %}\n    {% endfor %}\n\n    {% set mocks_and_expectations_json = {\n      \"mocks\": mocks,\n      \"expectations\": expectations\n      }\n    %}\n\n    {{ return (mocks_and_expectations_json) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.split_json_str", "macro.dbt_unit_testing.merge_configs", "macro.dbt_unit_testing.build_input_values_sql", "macro.dbt_unit_testing.graph_node", "macro.dbt_unit_testing.enrich_mock_sql_with_missing_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7322261, "supported_languages": null}, "macro.dbt_unit_testing.build_test_report": {"name": "build_test_report", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/tests.sql", "original_file_path": "macros/tests.sql", "unique_id": "macro.dbt_unit_testing.build_test_report", "macro_sql": "{% macro build_test_report(test_configuration) %}\n\n  {% set test_queries = dbt_unit_testing.build_test_queries(test_configuration) %}\n  {% set test_report = dbt_unit_testing.run_test_query(test_configuration, test_queries) %}\n\n  {{ dbt_unit_testing.verbose(\"-------------------- \" ~ test_configuration.model_name ~ \" --------------------\" ) }}\n  {{ dbt_unit_testing.verbose(test_queries.test_query) }}\n  {{ dbt_unit_testing.verbose(\"----------------------------------------\" ) }}\n\n  {{ return (test_report) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.build_test_queries", "macro.dbt_unit_testing.run_test_query", "macro.dbt_unit_testing.verbose"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.732568, "supported_languages": null}, "macro.dbt_unit_testing.build_test_queries": {"name": "build_test_queries", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/tests.sql", "original_file_path": "macros/tests.sql", "unique_id": "macro.dbt_unit_testing.build_test_queries", "macro_sql": "{% macro build_test_queries(test_configuration) %}\n  {% set expectations = test_configuration.expectations %}\n  {% set model_node = dbt_unit_testing.model_node(test_configuration.model_name) %}\n  {%- set model_complete_sql = dbt_unit_testing.build_model_complete_sql(model_node, test_configuration.mocks, test_configuration.options) -%}\n  {% set columns = dbt_unit_testing.quote_and_join_columns(dbt_unit_testing.extract_columns_list(expectations.input_values)) %}\n\n  {%- set actual_query -%}\n    select count(1) as count, {{columns}} from ( {{ model_complete_sql }} ) as s group by {{ columns }}\n  {% endset %}\n\n  {%- set expectations_query -%}\n    select count(1) as count, {{columns}} from ({{ expectations.input_values }}) as s group by {{ columns }}\n  {% endset %}\n\n  {%- set test_query -%}\n    with expectations as (\n      {{ expectations_query }}\n    ),\n    actual as (\n      {{ actual_query }}\n    ),\n\n    extra_entries as (\n    select '+' as diff, count, {{columns}} from actual\n    {{ except() }}\n    select '+' as diff, count, {{columns}} from expectations),\n\n    missing_entries as (\n    select '-' as diff, count, {{columns}} from expectations\n    {{ except() }}\n    select '-' as diff, count, {{columns}} from actual)\n    \n    select * from extra_entries\n    UNION ALL\n    select * from missing_entries\n\n    {% set sort_field = test_configuration.options.get(\"output_sort_field\") %}\n    {% if sort_field %}\n    ORDER BY {{ sort_field }}\n    {% endif %}\n  {%- endset -%}\n\n  {% set test_queries = {\n    \"actual_query\": actual_query,\n    \"expectations_query\": expectations_query,\n    \"test_query\": test_query\n  } %}\n\n  {{ return (test_queries) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.model_node", "macro.dbt_unit_testing.build_model_complete_sql", "macro.dbt_unit_testing.quote_and_join_columns", "macro.dbt_unit_testing.extract_columns_list", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.73336, "supported_languages": null}, "macro.dbt_unit_testing.show_test_report": {"name": "show_test_report", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/tests.sql", "original_file_path": "macros/tests.sql", "unique_id": "macro.dbt_unit_testing.show_test_report", "macro_sql": "{% macro show_test_report(test_configuration, test_report) %}\n  {% set model_name = test_configuration.model_name %}\n  {% set test_description = test_configuration.description | default('(no description)') %}\n\n  {{ dbt_unit_testing.println('{RED}MODEL: {YELLOW}' ~ model_name) }}\n  {{ dbt_unit_testing.println('{RED}TEST:  {YELLOW}' ~ test_description) }}\n  {% if test_report.expectations_row_count != test_report.actual_row_count %}\n    {{ dbt_unit_testing.println('{RED}ERROR: {YELLOW}Number of Rows do not match! (Expected: ' ~ test_report.expectations_row_count ~ ', Actual: ' ~ test_report.actual_row_count ~ ')') }}\n  {% endif %}\n  {% if test_report.different_rows_count > 0 %}\n    {{ dbt_unit_testing.println('{RED}ERROR: {YELLOW}Rows mismatch:') }}\n    {{ dbt_unit_testing.print_table(test_report.test_differences) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.println", "macro.dbt_unit_testing.print_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.733935, "supported_languages": null}, "macro.dbt_unit_testing.run_test_query": {"name": "run_test_query", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/tests.sql", "original_file_path": "macros/tests.sql", "unique_id": "macro.dbt_unit_testing.run_test_query", "macro_sql": "{% macro run_test_query(test_configuration, test_queries) %}\n  {% set model_name = test_configuration.model_name %}\n  {% set test_description = test_configuration.description %}\n  {% set actual_query = test_queries.actual_query %}\n  {% set expectations_query = test_queries.expectations_query %}\n  {% set test_query = test_queries.test_query %}\n\n  {%- set count_query -%}\n    select * FROM \n      (select count(1) as expectation_count from (\n        {{ expectations_query }}\n      ) as exp) as exp_count,\n      (select count(1) as actual_count from (\n        {{ actual_query }}\n      ) as act) as act_count\n  {%- endset -%}\n  {% set r1 = dbt_unit_testing.run_query(count_query) %}\n  {% set expectations_row_count = r1.columns[0].values() | first %}\n  {% set actual_row_count = r1.columns[1].values() | first %}\n\n  {% set test_differences = dbt_unit_testing.run_query(test_query) %}\n  {% set different_rows_count = test_differences.rows | length %}\n  {% set succeeded = different_rows_count == 0 and (expectations_row_count == actual_row_count) %}\n\n  {% set test_report = {\n    \"expectations_row_count\": expectations_row_count,\n    \"actual_row_count\": actual_row_count,\n    \"different_rows_count\": different_rows_count,\n    \"test_differences\": test_differences,\n    \"succeeded\": succeeded,\n  } %}\n  {{ return (test_report) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.734731, "supported_languages": null}, "macro.dbt_unit_testing.ref": {"name": "ref", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/tests.sql", "original_file_path": "macros/tests.sql", "unique_id": "macro.dbt_unit_testing.ref", "macro_sql": "{% macro ref(model_name) %}\n  {% if 'unit-test' in config.get('tags') %}\n      {{ return (dbt_unit_testing.ref_cte_name(model_name)) }}\n  {% else %}\n      {{ return (builtins.ref(model_name)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.ref_cte_name", "macro.dbt_unit_testing.ref"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.734984, "supported_languages": null}, "macro.dbt_unit_testing.source": {"name": "source", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/tests.sql", "original_file_path": "macros/tests.sql", "unique_id": "macro.dbt_unit_testing.source", "macro_sql": "{% macro source(source, table_name) %}\n  {% if 'unit-test' in config.get('tags') %}\n      {{ return (dbt_unit_testing.source_cte_name(source, table_name)) }}\n  {% else %}\n      {{ return (builtins.source(source, table_name)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_unit_testing.source_cte_name", "macro.dbt_unit_testing.source"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.735251, "supported_languages": null}, "macro.dbt_unit_testing.ref_tested_model": {"name": "ref_tested_model", "resource_type": "macro", "package_name": "dbt_unit_testing", "path": "macros/tests.sql", "original_file_path": "macros/tests.sql", "unique_id": "macro.dbt_unit_testing.ref_tested_model", "macro_sql": "{% macro ref_tested_model(model_name) %}\n  {% set ref_tested_model %}\n    -- We add an (unused) reference to the tested model,\n    -- so that DBT includes the model as a dependency of the test in the DAG\n    select * from {{ ref(model_name) }}\n  {% endset %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.735381, "supported_languages": null}, "macro.dbt_date.get_date_dimension": {"name": "get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7421708, "supported_languages": null}, "macro.dbt_date.default__get_date_dimension": {"name": "default__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.74371, "supported_languages": null}, "macro.dbt_date.postgres__get_date_dimension": {"name": "postgres__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt.dateadd('day', '-1', dbt.dateadd('month', '3', dbt.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.745302, "supported_languages": null}, "macro.dbt_date.get_base_dates": {"name": "get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.bigquery__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7460532, "supported_languages": null}, "macro.dbt_date.default__get_base_dates": {"name": "default__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7465951, "supported_languages": null}, "macro.dbt_date.bigquery__get_base_dates": {"name": "bigquery__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7470841, "supported_languages": null}, "macro.dbt_date.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_date')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7475898, "supported_languages": null}, "macro.dbt_date.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.748002, "supported_languages": null}, "macro.dbt_date.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_date')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7481651, "supported_languages": null}, "macro.dbt_date.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{\n        dbt_date.generate_series(\n            dbt_date.get_intervals_between(start_date, end_date, datepart)\n        )\n    }}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.generate_series", "macro.dbt_date.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7484229, "supported_languages": null}, "macro.dbt_date.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.749037, "supported_languages": null}, "macro.dbt_date.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.749333, "supported_languages": null}, "macro.dbt_date.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.749464, "supported_languages": null}, "macro.dbt_date.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_date.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.749831, "supported_languages": null}, "macro.dbt_date.get_fiscal_year_dates": {"name": "get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.751067, "supported_languages": null}, "macro.dbt_date.default__get_fiscal_year_dates": {"name": "default__get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.751497, "supported_languages": null}, "macro.dbt_date.get_fiscal_periods": {"name": "get_fiscal_periods", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_periods.sql", "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql", "unique_id": "macro.dbt_date.get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{#\nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case\n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year,\n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom\n    fscl_periods_quarters\norder by 1,2\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.75217, "supported_languages": null}, "macro.dbt_date.tomorrow": {"name": "tomorrow", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/tomorrow.sql", "original_file_path": "macros/calendar_date/tomorrow.sql", "unique_id": "macro.dbt_date.tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.752324, "supported_languages": null}, "macro.dbt_date.next_week": {"name": "next_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_week.sql", "original_file_path": "macros/calendar_date/next_week.sql", "unique_id": "macro.dbt_date.next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.75245, "supported_languages": null}, "macro.dbt_date.next_month_name": {"name": "next_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month_name.sql", "original_file_path": "macros/calendar_date/next_month_name.sql", "unique_id": "macro.dbt_date.next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.752616, "supported_languages": null}, "macro.dbt_date.next_month": {"name": "next_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month.sql", "original_file_path": "macros/calendar_date/next_month.sql", "unique_id": "macro.dbt_date.next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7527392, "supported_languages": null}, "macro.dbt_date.day_name": {"name": "day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.bigquery__day_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.753185, "supported_languages": null}, "macro.dbt_date.default__day_name": {"name": "default__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.753328, "supported_languages": null}, "macro.dbt_date.snowflake__day_name": {"name": "snowflake__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7534778, "supported_languages": null}, "macro.dbt_date.bigquery__day_name": {"name": "bigquery__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.753619, "supported_languages": null}, "macro.dbt_date.postgres__day_name": {"name": "postgres__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.753844, "supported_languages": null}, "macro.dbt_date.to_unixtimestamp": {"name": "to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.bigquery__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7540638, "supported_languages": null}, "macro.dbt_date.default__to_unixtimestamp": {"name": "default__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.754164, "supported_languages": null}, "macro.dbt_date.snowflake__to_unixtimestamp": {"name": "snowflake__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.754262, "supported_languages": null}, "macro.dbt_date.bigquery__to_unixtimestamp": {"name": "bigquery__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.754334, "supported_languages": null}, "macro.dbt_date.n_days_away": {"name": "n_days_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_days_away.sql", "original_file_path": "macros/calendar_date/n_days_away.sql", "unique_id": "macro.dbt_date.n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.754505, "supported_languages": null}, "macro.dbt_date.week_start": {"name": "week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7548401, "supported_languages": null}, "macro.dbt_date.default__week_start": {"name": "default__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt.date_trunc('week', date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.754943, "supported_languages": null}, "macro.dbt_date.snowflake__week_start": {"name": "snowflake__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.755151, "supported_languages": null}, "macro.dbt_date.postgres__week_start": {"name": "postgres__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt.dateadd('day', -1, dbt.date_trunc('week', dbt.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7553349, "supported_languages": null}, "macro.dbt_date.iso_week_start": {"name": "iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7556858, "supported_languages": null}, "macro.dbt_date._iso_week_start": {"name": "_iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date._iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.755795, "supported_languages": null}, "macro.dbt_date.default__iso_week_start": {"name": "default__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.755889, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_start": {"name": "snowflake__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.755987, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_start": {"name": "postgres__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7560818, "supported_languages": null}, "macro.dbt_date.n_days_ago": {"name": "n_days_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_days_ago.sql", "original_file_path": "macros/calendar_date/n_days_ago.sql", "unique_id": "macro.dbt_date.n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.756373, "supported_languages": null}, "macro.dbt_date.last_week": {"name": "last_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_week.sql", "original_file_path": "macros/calendar_date/last_week.sql", "unique_id": "macro.dbt_date.last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.756503, "supported_languages": null}, "macro.dbt_date.now": {"name": "now", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "unique_id": "macro.dbt_date.now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt.current_timestamp(), tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7566452, "supported_languages": null}, "macro.dbt_date.periods_since": {"name": "periods_since", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/periods_since.sql", "original_file_path": "macros/calendar_date/periods_since.sql", "unique_id": "macro.dbt_date.periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7568262, "supported_languages": null}, "macro.dbt_date.today": {"name": "today", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/today.sql", "original_file_path": "macros/calendar_date/today.sql", "unique_id": "macro.dbt_date.today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7569458, "supported_languages": null}, "macro.dbt_date.last_month": {"name": "last_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month.sql", "original_file_path": "macros/calendar_date/last_month.sql", "unique_id": "macro.dbt_date.last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.757068, "supported_languages": null}, "macro.dbt_date.day_of_year": {"name": "day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.757289, "supported_languages": null}, "macro.dbt_date.default__day_of_year": {"name": "default__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.757385, "supported_languages": null}, "macro.dbt_date.postgres__day_of_year": {"name": "postgres__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.757483, "supported_languages": null}, "macro.dbt_date.redshift__day_of_year": {"name": "redshift__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.757608, "supported_languages": null}, "macro.dbt_date.round_timestamp": {"name": "round_timestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/round_timestamp.sql", "original_file_path": "macros/calendar_date/round_timestamp.sql", "unique_id": "macro.dbt_date.round_timestamp", "macro_sql": "{% macro round_timestamp(timestamp) %}\n    {{ dbt.date_trunc(\"day\", dbt.dateadd(\"hour\", 12, timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.757778, "supported_languages": null}, "macro.dbt_date.from_unixtimestamp": {"name": "from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.bigquery__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.758663, "supported_languages": null}, "macro.dbt_date.default__from_unixtimestamp": {"name": "default__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.758922, "supported_languages": null}, "macro.dbt_date.postgres__from_unixtimestamp": {"name": "postgres__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.759113, "supported_languages": null}, "macro.dbt_date.snowflake__from_unixtimestamp": {"name": "snowflake__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.759441, "supported_languages": null}, "macro.dbt_date.bigquery__from_unixtimestamp": {"name": "bigquery__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.759719, "supported_languages": null}, "macro.dbt_date.n_months_ago": {"name": "n_months_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_months_ago.sql", "original_file_path": "macros/calendar_date/n_months_ago.sql", "unique_id": "macro.dbt_date.n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.75998, "supported_languages": null}, "macro.dbt_date.date_part": {"name": "date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.bigquery__date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.76019, "supported_languages": null}, "macro.dbt_date.default__date_part": {"name": "default__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.760283, "supported_languages": null}, "macro.dbt_date.bigquery__date_part": {"name": "bigquery__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7603729, "supported_languages": null}, "macro.dbt_date.n_weeks_away": {"name": "n_weeks_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_weeks_away.sql", "original_file_path": "macros/calendar_date/n_weeks_away.sql", "unique_id": "macro.dbt_date.n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.760618, "supported_languages": null}, "macro.dbt_date.day_of_month": {"name": "day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "unique_id": "macro.dbt_date.day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7607691, "supported_languages": null}, "macro.dbt_date.redshift__day_of_month": {"name": "redshift__day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "unique_id": "macro.dbt_date.redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.760902, "supported_languages": null}, "macro.dbt_date.yesterday": {"name": "yesterday", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/yesterday.sql", "original_file_path": "macros/calendar_date/yesterday.sql", "unique_id": "macro.dbt_date.yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7610528, "supported_languages": null}, "macro.dbt_date.day_of_week": {"name": "day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.bigquery__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.762344, "supported_languages": null}, "macro.dbt_date.default__day_of_week": {"name": "default__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.762551, "supported_languages": null}, "macro.dbt_date.snowflake__day_of_week": {"name": "snowflake__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.762836, "supported_languages": null}, "macro.dbt_date.bigquery__day_of_week": {"name": "bigquery__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.763041, "supported_languages": null}, "macro.dbt_date.postgres__day_of_week": {"name": "postgres__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7633421, "supported_languages": null}, "macro.dbt_date.redshift__day_of_week": {"name": "redshift__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.763603, "supported_languages": null}, "macro.dbt_date.iso_week_end": {"name": "iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.763923, "supported_languages": null}, "macro.dbt_date._iso_week_end": {"name": "_iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date._iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.764075, "supported_languages": null}, "macro.dbt_date.default__iso_week_end": {"name": "default__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.764174, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_end": {"name": "snowflake__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.764269, "supported_languages": null}, "macro.dbt_date.n_weeks_ago": {"name": "n_weeks_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_weeks_ago.sql", "original_file_path": "macros/calendar_date/n_weeks_ago.sql", "unique_id": "macro.dbt_date.n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.764523, "supported_languages": null}, "macro.dbt_date.month_name": {"name": "month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.bigquery__month_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.764862, "supported_languages": null}, "macro.dbt_date.default__month_name": {"name": "default__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.765003, "supported_languages": null}, "macro.dbt_date.bigquery__month_name": {"name": "bigquery__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.765145, "supported_languages": null}, "macro.dbt_date.snowflake__month_name": {"name": "snowflake__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.765287, "supported_languages": null}, "macro.dbt_date.postgres__month_name": {"name": "postgres__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.765435, "supported_languages": null}, "macro.dbt_date.last_month_name": {"name": "last_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month_name.sql", "original_file_path": "macros/calendar_date/last_month_name.sql", "unique_id": "macro.dbt_date.last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7656069, "supported_languages": null}, "macro.dbt_date.week_of_year": {"name": "week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.765975, "supported_languages": null}, "macro.dbt_date.default__week_of_year": {"name": "default__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.766104, "supported_languages": null}, "macro.dbt_date.postgres__week_of_year": {"name": "postgres__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.76621, "supported_languages": null}, "macro.dbt_date.convert_timezone": {"name": "convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.bigquery__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7668931, "supported_languages": null}, "macro.dbt_date.default__convert_timezone": {"name": "default__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\nconvert_timezone('{{ source_tz }}', '{{ target_tz }}',\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.767039, "supported_languages": null}, "macro.dbt_date.bigquery__convert_timezone": {"name": "bigquery__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.767145, "supported_languages": null}, "macro.dbt_date.spark__convert_timezone": {"name": "spark__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.767259, "supported_languages": null}, "macro.dbt_date.postgres__convert_timezone": {"name": "postgres__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\ncast(\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n        at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt.type_timestamp() }}\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.767425, "supported_languages": null}, "macro.dbt_date.redshift__convert_timezone": {"name": "redshift__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.76756, "supported_languages": null}, "macro.dbt_date.n_months_away": {"name": "n_months_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_months_away.sql", "original_file_path": "macros/calendar_date/n_months_away.sql", "unique_id": "macro.dbt_date.n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.767806, "supported_languages": null}, "macro.dbt_date.iso_week_of_year": {"name": "iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7681909, "supported_languages": null}, "macro.dbt_date._iso_week_of_year": {"name": "_iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date._iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.768331, "supported_languages": null}, "macro.dbt_date.default__iso_week_of_year": {"name": "default__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7684312, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_of_year": {"name": "snowflake__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.768524, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_of_year": {"name": "postgres__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.768627, "supported_languages": null}, "macro.dbt_date.week_end": {"name": "week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.768956, "supported_languages": null}, "macro.dbt_date.default__week_end": {"name": "default__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ last_day(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7690508, "supported_languages": null}, "macro.dbt_date.snowflake__week_end": {"name": "snowflake__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7691882, "supported_languages": null}, "macro.dbt_date.postgres__week_end": {"name": "postgres__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.769326, "supported_languages": null}, "macro.dbt_date.next_month_number": {"name": "next_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month_number.sql", "original_file_path": "macros/calendar_date/next_month_number.sql", "unique_id": "macro.dbt_date.next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7694778, "supported_languages": null}, "macro.dbt_date.last_month_number": {"name": "last_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month_number.sql", "original_file_path": "macros/calendar_date/last_month_number.sql", "unique_id": "macro.dbt_date.last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.769629, "supported_languages": null}, "macro.dbt_expectations.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.type_timestamp", "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.769899, "supported_languages": null}, "macro.dbt_expectations.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.769954, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_timestamp": {"name": "snowflake__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.770005, "supported_languages": null}, "macro.dbt_expectations.postgres__type_timestamp": {"name": "postgres__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7700539, "supported_languages": null}, "macro.dbt_expectations.type_datetime": {"name": "type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.type_datetime", "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.770169, "supported_languages": null}, "macro.dbt_expectations.default__type_datetime": {"name": "default__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.77022, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_datetime": {"name": "snowflake__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.770272, "supported_languages": null}, "macro.dbt_expectations.postgres__type_datetime": {"name": "postgres__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7703218, "supported_languages": null}, "macro.dbt_expectations.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/groupby.sql", "original_file_path": "macros/utils/groupby.sql", "unique_id": "macro.dbt_expectations.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_expectations')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.770592, "supported_languages": null}, "macro.dbt_expectations.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/groupby.sql", "original_file_path": "macros/utils/groupby.sql", "unique_id": "macro.dbt_expectations.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}\n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.770772, "supported_languages": null}, "macro.dbt_expectations.regexp_instr": {"name": "regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1, is_raw=False, flags=\"\") %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence, is_raw, flags\n    ) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.bigquery__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.771592, "supported_languages": null}, "macro.dbt_expectations.default__regexp_instr": {"name": "default__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{# unclear if other databases support raw strings or flags #}\n{% if is_raw or flags %}\n    {{ exceptions.warn(\n            \"is_raw and flags options are not supported for this adapter \"\n            ~ \"and are being ignored.\"\n    ) }}\n{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.771843, "supported_languages": null}, "macro.dbt_expectations.snowflake__regexp_instr": {"name": "snowflake__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.snowflake__regexp_instr", "macro_sql": "{% macro snowflake__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{%- set regexp = \"$$\" ~ regexp ~ \"$$\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'cimes') }}{% endif %}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.77215, "supported_languages": null}, "macro.dbt_expectations.bigquery__regexp_instr": {"name": "bigquery__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.bigquery__regexp_instr", "macro_sql": "{% macro bigquery__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}\n    {{ dbt_expectations._validate_re2_flags(flags) }}\n    {# BigQuery prepends \"(?flags)\" to set flags for current group #}\n    {%- set regexp = \"(?\" ~ flags ~ \")\" ~ regexp -%}\n{% endif %}\n{%- set regexp = \"r'\" ~ regexp ~ \"'\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_re2_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.772498, "supported_languages": null}, "macro.dbt_expectations.postgres__regexp_instr": {"name": "postgres__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'bcegimnpqstwx') }}{% endif %}\ncoalesce(array_length((select regexp_matches({{ source_value }}, '{{ regexp }}', '{{ flags }}')), 1), 0)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.772712, "supported_languages": null}, "macro.dbt_expectations.redshift__regexp_instr": {"name": "redshift__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'ciep') }}{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.772941, "supported_languages": null}, "macro.dbt_expectations._validate_flags": {"name": "_validate_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_flags", "macro_sql": "{% macro _validate_flags(flags, alphabet) %}\n{% for flag in flags %}\n    {% if flag not in alphabet %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flag \" ~ flag ~ \" not in list of allowed flags for this adapter: \" ~ alphabet | join(\", \")\n    ) }}\n    {% endif %}\n{% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.773191, "supported_languages": null}, "macro.dbt_expectations._validate_re2_flags": {"name": "_validate_re2_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_re2_flags", "macro_sql": "{% macro _validate_re2_flags(flags) %}\n{# Re2 supports following flags: #}\n{# i  :  case-insensitive (default fault) #}\n{# m  :  multi-line mode: ^ and $ match begin/end line in addition to begin/end text (default false) #}\n{# s  :  let . match \\n (default false) #}\n{# U  :  ungreedy: swap meaning of x* and x*?, x+ and x+?, etc (default false) #}\n{# Flag syntax is xyz (set) or -xyz (clear) or xy-z (set xy, clear z).  #}\n\n{# Regex explanation: do not allow consecutive dashes, accept all re2 flags and clear operator, do not end with a dash  #}\n{% set re2_flags_pattern = '^(?!.*--)[-imsU]*(?<!-)$' %}\n{% set re = modules.re %}\n{% set is_match = re.match(re2_flags_pattern, flags) %}\n{% if not is_match %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flags \" ~ flags ~ \" isn't a valid re2 flag pattern\" \n    ) }}\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7735171, "supported_languages": null}, "macro.dbt_expectations.log_natural": {"name": "log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.bigquery__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7737238, "supported_languages": null}, "macro.dbt_expectations.default__log_natural": {"name": "default__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.default__log_natural", "macro_sql": "{% macro default__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.773797, "supported_languages": null}, "macro.dbt_expectations.bigquery__log_natural": {"name": "bigquery__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.773867, "supported_languages": null}, "macro.dbt_expectations.snowflake__log_natural": {"name": "snowflake__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.773938, "supported_languages": null}, "macro.dbt_expectations.rand": {"name": "rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.bigquery__rand"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.774156, "supported_languages": null}, "macro.dbt_expectations.default__rand": {"name": "default__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.default__rand", "macro_sql": "{% macro default__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.774209, "supported_languages": null}, "macro.dbt_expectations.bigquery__rand": {"name": "bigquery__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.bigquery__rand", "macro_sql": "{% macro bigquery__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.774258, "supported_languages": null}, "macro.dbt_expectations.snowflake__rand": {"name": "snowflake__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) -%}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.774315, "supported_languages": null}, "macro.dbt_expectations.postgres__rand": {"name": "postgres__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.postgres__rand", "macro_sql": "{% macro postgres__rand() -%}\n\n    random()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7743628, "supported_languages": null}, "macro.dbt_expectations.redshift__rand": {"name": "redshift__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.redshift__rand", "macro_sql": "{% macro redshift__rand() -%}\n\n    random()\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.774411, "supported_languages": null}, "macro.dbt_expectations.median": {"name": "median", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/median.sql", "original_file_path": "macros/math/median.sql", "unique_id": "macro.dbt_expectations.median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.77455, "supported_languages": null}, "macro.dbt_expectations.percentile_cont": {"name": "percentile_cont", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.bigquery__quantile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.774863, "supported_languages": null}, "macro.dbt_expectations.default__quantile": {"name": "default__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.775014, "supported_languages": null}, "macro.dbt_expectations.bigquery__quantile": {"name": "bigquery__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) -%}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.775158, "supported_languages": null}, "macro.dbt_expectations.ignore_row_if_expression": {"name": "ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.ignore_row_if_expression", "macro_sql": "{% macro ignore_row_if_expression(ignore_row_if, columns) %}\n    {{ adapter.dispatch('ignore_row_if_expression', 'dbt_expectations') (ignore_row_if, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7754922, "supported_languages": null}, "macro.dbt_expectations.default__ignore_row_if_expression": {"name": "default__ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.default__ignore_row_if_expression", "macro_sql": "{% macro default__ignore_row_if_expression(ignore_row_if, columns) %}\n  {%- set ignore_row_if_values = [\"all_values_are_missing\", \"any_value_is_missing\"] -%}\n    {% if ignore_row_if not in ignore_row_if_values %}\n        {{ exceptions.raise_compiler_error(\n            \"`ignore_row_if` must be one of \" ~ (ignore_row_if_values | join(\", \")) ~ \". Got: '\" ~ ignore_row_if ~\"'.'\"\n        ) }}\n    {% endif %}\n\n    {%- set op = \"and\" if ignore_row_if == \"all_values_are_missing\" else \"or\" -%}\n    not (\n        {% for column in columns -%}\n        {{ column }} is null{% if not loop.last %} {{ op }} {% endif %}\n        {% endfor %}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.775915, "supported_languages": null}, "macro.dbt_expectations.test_expression_between": {"name": "test_expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "unique_id": "macro.dbt_expectations.test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.776792, "supported_languages": null}, "macro.dbt_expectations.expression_between": {"name": "expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "unique_id": "macro.dbt_expectations.expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.777388, "supported_languages": null}, "macro.dbt_expectations.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.778084, "supported_languages": null}, "macro.dbt_expectations.expression_is_true": {"name": "expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7782888, "supported_languages": null}, "macro.dbt_expectations.default__expression_is_true": {"name": "default__expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7787352, "supported_languages": null}, "macro.dbt_expectations.get_select": {"name": "get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.782779, "supported_languages": null}, "macro.dbt_expectations.default__get_select": {"name": "default__get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7831712, "supported_languages": null}, "macro.dbt_expectations.test_equal_expression": {"name": "test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.783506, "supported_languages": null}, "macro.dbt_expectations.default__test_equal_expression": {"name": "default__test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.784412, "supported_languages": null}, "macro.dbt_expectations.truth_expression": {"name": "truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "unique_id": "macro.dbt_expectations.truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.784587, "supported_languages": null}, "macro.dbt_expectations.default__truth_expression": {"name": "default__truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "unique_id": "macro.dbt_expectations.default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7846599, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"name": "test_expect_column_values_to_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.785046, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"name": "test_expect_column_values_to_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.78579, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"name": "test_expect_column_values_to_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.786329, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"name": "test_expect_column_value_lengths_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7867131, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"name": "test_expect_column_value_lengths_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.787293, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"name": "test_expect_column_values_to_not_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.787807, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"name": "test_expect_column_values_to_not_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.788609, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"name": "test_expect_column_values_to_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.789412, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"name": "test_expect_column_values_to_not_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.790151, "supported_languages": null}, "macro.dbt_expectations._get_like_pattern_expression": {"name": "_get_like_pattern_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "original_file_path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "unique_id": "macro.dbt_expectations._get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.790333, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"name": "test_expect_column_values_to_not_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.790715, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"name": "test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.791591, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"name": "default__test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ dbt_expectations.type_timestamp() }}))\n        <\n        cast({{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ dbt_expectations.type_timestamp() }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7920399, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"name": "test_expect_table_columns_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.792882, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"name": "test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model,\n                                            compare_model,\n                                            group_by=None,\n                                            compare_group_by=None,\n                                            factor=1,\n                                            row_condition=None,\n                                            compare_row_condition=None\n                                        ) -%}\n\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                group_by,\n                                                compare_group_by,\n                                                factor,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7936451, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table": {"name": "default__test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table(model,\n                                                    compare_model,\n                                                    group_by,\n                                                    compare_group_by,\n                                                    factor,\n                                                    row_condition,\n                                                    compare_row_condition\n                                                    ) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.793903, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {"name": "test_expect_table_columns_to_not_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.79493, "supported_languages": null}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"name": "test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.796748, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"name": "default__test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        max(cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }})) as latest_timestamp_column\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n),\ntotal_row_counts as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        -- are the max timestamps per group older than the specified cutoff?\n        latest_timestamp_column <\n            cast(\n                {{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }}\n                as {{ dbt_expectations.type_timestamp() }}\n            )\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on\n            {% for g in group_by %}\n            r.{{ g }} = t.{{ g }} and\n            {% endfor %}\n            r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt_expectations.group_by", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7974908, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_to_exist": {"name": "test_expect_column_to_exist", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "original_file_path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ dbt.type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.798333, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"name": "test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                            value,\n                                            group_by=None,\n                                            row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7988281, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"name": "default__test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n    expression=expression,\n    group_by_columns=group_by,\n    row_condition=row_condition)\n    }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.7990332, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"name": "test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_be_between',\n                        'dbt_expectations') (model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.799696, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between": {"name": "default__test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_be_between(model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n    expression=expression,\n    min_value=min_value,\n    max_value=max_value,\n    group_by_columns=group_by,\n    row_condition=row_condition,\n    strictly=strictly\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.799946, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by=None,\n                                                                    compare_group_by=None,\n                                                                    row_condition=None,\n                                                                    compare_row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table_times_factor',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                factor,\n                                                group_by,\n                                                compare_group_by,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.8007941, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "default__test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by,\n                                                                    compare_group_by,\n                                                                    row_condition,\n                                                                    compare_row_condition\n                                                                    ) -%}\n\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model,\n    compare_model,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.801012, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"name": "test_expect_table_columns_to_match_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.8018901, "supported_languages": null}, "macro.dbt_expectations._get_column_list": {"name": "_get_column_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/_get_column_list.sql", "original_file_path": "macros/schema_tests/table_shape/_get_column_list.sql", "unique_id": "macro.dbt_expectations._get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.802163, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"name": "test_expect_table_columns_to_match_ordered_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.803179, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table": {"name": "test_expect_table_aggregation_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_aggregation_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_aggregation_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table", "macro_sql": "{%- test expect_table_aggregation_to_equal_other_table(model,\n                                                expression,\n                                                compare_model,\n                                                compare_expression=None,\n                                                group_by=None,\n                                                compare_group_by=None,\n                                                row_condition=None,\n                                                compare_row_condition=None,\n                                                tolerance=0.0,\n                                                tolerance_percent=None\n                                                ) -%}\n\n\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition,\n    tolerance=tolerance,\n    tolerance_percent=tolerance_percent\n) }}\n\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.803631, "supported_languages": null}, "macro.dbt_expectations._list_intersect": {"name": "_list_intersect", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/_list_intersect.sql", "original_file_path": "macros/schema_tests/table_shape/_list_intersect.sql", "unique_id": "macro.dbt_expectations._list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.803923, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"name": "test_expect_table_column_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.8042638, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"name": "test_expect_table_column_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.804524, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"name": "test_expect_table_column_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None\n                                                    ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.805225, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"name": "test_expect_column_values_to_not_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.8058639, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"name": "test_expect_column_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.806525, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"name": "test_expect_column_values_to_be_increasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.807528, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"name": "test_expect_column_values_to_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.80786, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"name": "test_expect_column_values_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.808038, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"name": "test_expect_column_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.8085911, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"name": "test_expect_column_values_to_be_decreasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.809448, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"name": "test_expect_column_values_to_be_in_type_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ escape_single_quotes(column.name | upper) }}' as {{ dbt.type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ dbt.type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.810234, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"name": "test_expect_column_values_to_be_of_type", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.810397, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {"name": "test_expect_column_values_to_have_consistent_casing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.810705, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"name": "test_expect_column_values_to_not_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.8111029, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"name": "test_expect_column_min_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.811679, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"name": "test_expect_column_unique_value_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.812265, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"name": "test_expect_column_quantile_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.8128908, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"name": "test_expect_column_median_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.813484, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"name": "test_expect_column_proportion_of_unique_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})*1.0/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.814116, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"name": "test_expect_column_distinct_values_to_equal_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.814765, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"name": "test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model,\n                                                       column_name,\n                                                       value_set,\n                                                       top_n,\n                                                       quote_values=True,\n                                                       data_type=\"decimal\",\n                                                       row_condition=None\n                                                       ) -%}\n\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (\n            model, column_name, value_set, top_n, quote_values, data_type, row_condition\n        ) }}\n\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.816108, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"name": "default__test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model,\n                                                                      column_name,\n                                                                      value_set,\n                                                                      top_n,\n                                                                      quote_values,\n                                                                      data_type,\n                                                                      row_condition\n                                                                      ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.8166661, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"name": "test_expect_column_distinct_values_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.81734, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"name": "test_expect_column_distinct_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                column_name,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.817783, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than": {"name": "test_expect_column_distinct_count_to_be_less_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than", "macro_sql": "{% test expect_column_distinct_count_to_be_less_than(model,\n                                                       column_name,\n                                                       value,\n                                                       group_by=None,\n                                                       row_condition=None\n                                                       ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) < {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.8182259, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"name": "test_expect_column_sum_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.818793, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"name": "test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.819809, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"name": "default__test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.82009, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"name": "test_expect_column_mean_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.820663, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"name": "test_expect_column_max_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.821263, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"name": "test_expect_column_distinct_count_to_be_greater_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                          column_name,\n                                                          value,\n                                                          group_by=None,\n                                                          row_condition=None\n                                                          ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.821717, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"name": "test_expect_column_distinct_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model,\n                                                     column_name,\n                                                     value_set,\n                                                     quote_values=True,\n                                                     row_condition=None\n                                                     ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.822378, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"name": "test_expect_column_distinct_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.822926, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"name": "test_expect_row_values_to_have_data_for_every_n_datepart", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min({{ date_col }}) as start_{{ date_part }},\n            max({{ date_col }}) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n    {%- set db_start_date = dr.columns[0].values()[0].strftime('%Y-%m-%d') -%}\n    {%- set db_end_date = dr.columns[1].values()[0].strftime('%Y-%m-%d') -%}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {#\n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals,\n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ dbt.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt.type_int() }}),\n            cast({{interval}} as {{ dbt.type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ dbt.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {#\n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine\n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{ dbt.dateadd(\n            date_part,\n            \"mod(\n                cast(\" ~ dbt.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt.type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ dbt.type_int() ~ \" )\n            ) * (-1)\",\n            \"cast( \" ~ dbt.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n\n    {% endif %}\n\n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_unit_testing.run_query", "macro.dbt_date.get_base_dates", "macro.dbt.datediff", "macro.dbt.type_int", "macro.dbt.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.825835, "supported_languages": null}, "macro.dbt_expectations._get_metric_expression": {"name": "_get_metric_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations._get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.8291461, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by=None,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.8295412, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n{%- set partition_by = \"partition by \" ~ (group_by | join(\",\")) if group_by -%}\n{%- set group_by_length = (group_by | length ) if group_by else 0 -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt.date_trunc(period, date_column_name) }} as metric_period,\n            {{ group_by | join(\",\") ~ \",\" if group_by }}\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        {{  dbt_expectations.group_by(1 + group_by_length) }}\n\n    )\n    {%- if take_diffs %}\n    , grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(\n                {{ partition_by }}\n                order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/\n            nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt.dateadd(period, -test_periods, dbt.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_expectations.type_timestamp() }})\n    and\n    metric_period < {{ dbt.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt_expectations.group_by", "macro.dbt_expectations._get_metric_expression", "macro.dbt.dateadd", "macro.dbt_date.now", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.830614, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"name": "test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{\n        adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (\n            model, column_name, group_by, sigma_threshold\n        )\n    }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.83127, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\n\nwith metric_values as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/\n            nullif({{ column_name }}_stddev, 0) as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.831671, "supported_languages": null}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"name": "test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.83279, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"name": "default__test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith column_values as (\n\n    select\n        row_number() over(order by 1) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.833576, "supported_languages": null}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"name": "test_expect_compound_columns_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "original_file_path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.8350148, "supported_languages": null}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"name": "test_expect_multicolumn_sum_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{% endfor %} = {{ sum_total }}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.83567, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"name": "test_expect_column_pair_values_to_be_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.8361118, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"name": "test_expect_column_pair_values_A_to_be_greater_than_B", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.8366048, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"name": "test_expect_column_pair_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1688944881.837638, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"test.csp.sampletest": [], "test.csp.cardholdertest": ["source.csp.curated.rskcsp_ds_cardholder_curated"], "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Email__c__80.48c668962f": ["source.csp.curated.rskcsp_ds_cardholder_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Email__c__String.4383285e09": ["source.csp.curated.rskcsp_ds_cardholder_curated"], "test.csp.source_not_null_curated_rskcsp_ds_cardholder_curated_CCS_Facility_ID__c.93b5c8f1c6": ["source.csp.curated.rskcsp_ds_cardholder_curated"], "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Facility_ID__c__18.975a514e01": ["source.csp.curated.rskcsp_ds_cardholder_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Facility_ID__c__String.d250c7f57d": ["source.csp.curated.rskcsp_ds_cardholder_curated"], "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_First_Name__c__255.b70ed6ec5c": ["source.csp.curated.rskcsp_ds_cardholder_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_First_Name__c__String.e0e09baba0": ["source.csp.curated.rskcsp_ds_cardholder_curated"], "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Is_Card_Needed__c__255.2836e217e0": ["source.csp.curated.rskcsp_ds_cardholder_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Is_Card_Needed__c__String.7f72683ffb": ["source.csp.curated.rskcsp_ds_cardholder_curated"], "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Last_Name__c__255.4b67642f28": ["source.csp.curated.rskcsp_ds_cardholder_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Last_Name__c__String.8cdce274c7": ["source.csp.curated.rskcsp_ds_cardholder_curated"], "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Level_of_Control__c__255.cf76a1ee91": ["source.csp.curated.rskcsp_ds_cardholder_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Level_of_Control__c__String.229bf943dd": ["source.csp.curated.rskcsp_ds_cardholder_curated"], "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Mobile_Number__c__40.371229c6c9": ["source.csp.curated.rskcsp_ds_cardholder_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Mobile_Number__c__String.981e790b85": ["source.csp.curated.rskcsp_ds_cardholder_curated"], "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Title__c__255.f5e3caa7fe": ["source.csp.curated.rskcsp_ds_cardholder_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Title__c__String.93d1b7980b": ["source.csp.curated.rskcsp_ds_cardholder_curated"], "test.csp.source_not_null_curated_rskcsp_ds_cardholder_curated_CreatedById.11104cbeb1": ["source.csp.curated.rskcsp_ds_cardholder_curated"], "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CreatedById__18.41a5de79d4": ["source.csp.curated.rskcsp_ds_cardholder_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CreatedById__String.75d4c9f264": ["source.csp.curated.rskcsp_ds_cardholder_curated"], "test.csp.source_not_null_curated_rskcsp_ds_cardholder_curated_CreatedDate.cd39601b66": ["source.csp.curated.rskcsp_ds_cardholder_curated"], "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CurrencyIsoCode__3.c3b3077d33": ["source.csp.curated.rskcsp_ds_cardholder_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CurrencyIsoCode__String.2b12d5d003": ["source.csp.curated.rskcsp_ds_cardholder_curated"], "test.csp.source_not_null_curated_rskcsp_ds_cardholder_curated_Id.8058ab6385": ["source.csp.curated.rskcsp_ds_cardholder_curated"], "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_Id__18.b5049735d3": ["source.csp.curated.rskcsp_ds_cardholder_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_Id__String.78a8d212e0": ["source.csp.curated.rskcsp_ds_cardholder_curated"], "test.csp.source_not_null_curated_rskcsp_ds_cardholder_curated_LastModifiedById.b9ad66c0fb": ["source.csp.curated.rskcsp_ds_cardholder_curated"], "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_LastModifiedById__18.9ae03035f1": ["source.csp.curated.rskcsp_ds_cardholder_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_LastModifiedById__String.feca5019bf": ["source.csp.curated.rskcsp_ds_cardholder_curated"], "test.csp.source_not_null_curated_rskcsp_ds_cardholder_curated_LastModifiedDate.6aed7f5098": ["source.csp.curated.rskcsp_ds_cardholder_curated"], "test.csp.source_not_null_curated_rskcsp_ds_cardholder_curated_Name.b60c864c33": ["source.csp.curated.rskcsp_ds_cardholder_curated"], "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_Name__80.c6237921f6": ["source.csp.curated.rskcsp_ds_cardholder_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_Name__String.0fe179ecb6": ["source.csp.curated.rskcsp_ds_cardholder_curated"], "test.csp.source_not_null_curated_rskcsp_ds_limit_curated_CCS_Facility__c.f96725e6fa": ["source.csp.curated.rskcsp_ds_limit_curated"], "test.csp.source_length_check_curated_rskcsp_ds_limit_curated_CCS_Facility__c__18.ed8b173071": ["source.csp.curated.rskcsp_ds_limit_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_CCS_Facility__c__String.12b7433887": ["source.csp.curated.rskcsp_ds_limit_curated"], "test.csp.source_length_check_curated_rskcsp_ds_limit_curated_CCS_Is_this_a_Temporary_Amendment__c__255.f76d2ae503": ["source.csp.curated.rskcsp_ds_limit_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_CCS_Is_this_a_Temporary_Amendment__c__String.b93ecc04f5": ["source.csp.curated.rskcsp_ds_limit_curated"], "test.csp.source_length_check_curated_rskcsp_ds_limit_curated_CCS_Tenor__c__30.2e148aff69": ["source.csp.curated.rskcsp_ds_limit_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_CCS_Tenor__c__String.e2ccc850bd": ["source.csp.curated.rskcsp_ds_limit_curated"], "test.csp.source_not_null_curated_rskcsp_ds_limit_curated_CreatedById.492bab4edb": ["source.csp.curated.rskcsp_ds_limit_curated"], "test.csp.source_length_check_curated_rskcsp_ds_limit_curated_CreatedById__18.9fa460032a": ["source.csp.curated.rskcsp_ds_limit_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_CreatedById__String.1e81e459da": ["source.csp.curated.rskcsp_ds_limit_curated"], "test.csp.source_not_null_curated_rskcsp_ds_limit_curated_CreatedDate.5e65ad90a8": ["source.csp.curated.rskcsp_ds_limit_curated"], "test.csp.source_length_check_curated_rskcsp_ds_limit_curated_CurrencyIsoCode__3.fd146ed665": ["source.csp.curated.rskcsp_ds_limit_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_CurrencyIsoCode__String.07c269c97a": ["source.csp.curated.rskcsp_ds_limit_curated"], "test.csp.source_not_null_curated_rskcsp_ds_limit_curated_Id.7b32a7d878": ["source.csp.curated.rskcsp_ds_limit_curated"], "test.csp.source_length_check_curated_rskcsp_ds_limit_curated_Id__18.a7c04f54f3": ["source.csp.curated.rskcsp_ds_limit_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_Id__String.40e8a609c7": ["source.csp.curated.rskcsp_ds_limit_curated"], "test.csp.source_not_null_curated_rskcsp_ds_limit_curated_LastModifiedById.4568f789ca": ["source.csp.curated.rskcsp_ds_limit_curated"], "test.csp.source_length_check_curated_rskcsp_ds_limit_curated_LastModifiedById__18.f8cee00a5d": ["source.csp.curated.rskcsp_ds_limit_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_LastModifiedById__String.12bf21e705": ["source.csp.curated.rskcsp_ds_limit_curated"], "test.csp.source_not_null_curated_rskcsp_ds_limit_curated_LastModifiedDate.7a34374111": ["source.csp.curated.rskcsp_ds_limit_curated"], "test.csp.source_not_null_curated_rskcsp_ds_limit_curated_Name.58a0a4503f": ["source.csp.curated.rskcsp_ds_limit_curated"], "test.csp.source_length_check_curated_rskcsp_ds_limit_curated_Name__80.7af9cc9356": ["source.csp.curated.rskcsp_ds_limit_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_Name__String.c349a2fdd3": ["source.csp.curated.rskcsp_ds_limit_curated"], "test.csp.source_not_null_curated_rskcsp_ds_entity_involvement_curated_CreatedById.0ac5b9c4a4": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"], "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_CreatedById__18.c50f0954df": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_CreatedById__String.4b8c158c6e": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"], "test.csp.source_not_null_curated_rskcsp_ds_entity_involvement_curated_CreatedDate.8cd3dcc5f3": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"], "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_CurrencyIsoCode__3.90c3f28b19": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_CurrencyIsoCode__String.c7479241c3": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"], "test.csp.source_not_null_curated_rskcsp_ds_entity_involvement_curated_Id.0c27c42eba": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"], "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_Id__18.2867d4d293": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_Id__String.59b63e5fa4": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"], "test.csp.source_not_null_curated_rskcsp_ds_entity_involvement_curated_LastModifiedById.4a5f99dd9b": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"], "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_LastModifiedById__18.bdf1164c04": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LastModifiedById__String.21aa6a7cdb": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"], "test.csp.source_not_null_curated_rskcsp_ds_entity_involvement_curated_LastModifiedDate.d9e6c8471d": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"], "test.csp.source_not_null_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Account__c.4227eb8fd6": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"], "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Account__c__18.5ffc385d3b": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Account__c__String.dc7b77d556": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"], "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Borrower_Type__c__255.534d37fdec": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Borrower_Type__c__String.1d4a591f91": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"], "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Contingent_Type__c__255.d47173ca0e": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Contingent_Type__c__String.a82415a14f": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"], "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Loan__c__18.0356536f4e": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Loan__c__String.9168694324": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"], "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Product_Package__c__18.f174ca6c31": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Product_Package__c__String.7d990badc0": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"], "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_Migration_ID__c__18.719c3680b8": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_Migration_ID__c__String.704c7befc9": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"], "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_Name__80.c9396fb10a": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_Name__String.59554e6b34": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"], "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_RecordTypeId__18.f26d0fbd12": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_RecordTypeId__String.c6bd2a6caf": ["source.csp.curated.rskcsp_ds_entity_involvement_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_50_of_Security_LV_from_Land_Property__c__255.ffde91bc94": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_50_of_Security_LV_from_Land_Property__c__String.f18b2bce6f": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Account_a_Discounted_Account__c__255.4aa51d61c0": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Account_a_Discounted_Account__c__String.51b82174fe": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_AccountNumber__c__8.9e9161367a": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_AccountNumber__c__String.0bd878362e": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Amend_Margin__c__255.965d929c77": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Amend_Margin__c__String.a97d0ca9da": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Amend_Returned_Margin__c__255.9d035c6f76": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Amend_Returned_Margin__c__String.7170346938": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Apply_CRH__c__255.60f0e80f40": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Apply_CRH__c__String.99cf0e6410": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Apply_Tranche_Drawdown__c__255.14c48768e1": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Apply_Tranche_Drawdown__c__String.3d8ecdc48a": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Approval_Status__c__255.b9b44d0bc1": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Approval_Status__c__String.65b0ce30e4": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_Borrowing_Structure_Route__c.7ac40ac21a": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_CardScheme__c__255.c27b6fff53": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_CardScheme__c__String.4d7f46a8d7": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_CCA__c.86f21435af": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_CFGICleanGrowthFinanceInitiative__c__255.b815119ca4": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_CFGICleanGrowthFinanceInitiative__c__String.8fad710767": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Change_Fixed_Rate_Duration__c__255.a4da67ae6d": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Change_Fixed_Rate_Duration__c__String.5da80801f8": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Chosen_Rate__c__255.93f588a8ae": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Chosen_Rate__c__String.0c5a77656d": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Client_Choice_Rationale__c__255.49e15a64b6": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Client_Choice_Rationale__c__String.9bbf1abcc7": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Commentary_on_Pricing__c__32768.bd09d75094": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Commentary_on_Pricing__c__String.0247ec59e3": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_CRH_Monthly_or_Quarterly__c__255.900a010a7d": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_CRH_Monthly_or_Quarterly__c__String.bf24d60c77": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Customer_documentation_preference__c__255.234307f5f0": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Customer_documentation_preference__c__String.fbec828014": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_DateOfMarketLinksAgreementKnown__c__255.30de9d16d3": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_DateOfMarketLinksAgreementKnown__c__String.aa938e9e03": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_DateOfTravelLinkAgreementKnown__c__255.86f196456b": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_DateOfTravelLinkAgreementKnown__c__String.3a5e4b63ba": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_DoNotTrade__c.2abd07cb78": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Duration__c__255.4a95f93f36": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Duration__c__String.2df4f9bc42": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_e_Loan_Product_Selection__c__4099.9eca70b01a": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_e_Loan_Product_Selection__c__String.d581597085": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Eligible_for_CRH__c__1300.9a011acab8": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Eligible_for_CRH__c__String.5b03a746fa": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Exception_Pricing_Request__c__255.f9c81db9ee": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Exception_Pricing_Request__c__String.e9b154f4aa": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_Exclude_from_Change__c.696c2da65d": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_Exclude_from_Exposure_Value__c.70a68d99cf": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Exposure_Value__c__1300.b71cf7a719": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Exposure_Value__c__String.5c743d4753": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Final_Limit_or_Change_per_Step__c__255.d199bf68ae": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Final_Limit_or_Change_per_Step__c__String.c9e5b0a7bb": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_FormFactor__c__255.bff7f1305a": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_FormFactor__c__String.33a663ad8d": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Frequency__c__255.299519926e": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Frequency__c__String.2e92dd9bbd": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Front_Book_Back_Book__c__1300.d77f2ba7da": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Front_Book_Back_Book__c__String.142378a61c": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Hard_Soft__c__1300.a59a422573": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Hard_Soft__c__String.fc57fab575": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Heritage__c__255.a718ac2091": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Heritage__c__String.0d4f83827b": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_How_much_to_pay_off_each_month__c__255.3b75a715e7": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_How_much_to_pay_off_each_month__c__String.ffb7787124": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_Informed_Choice_Facility_Record__c.e084448330": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type__c__255.8df4881148": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type__c__String.10fa9e2825": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_Greater50NonSplit__c__255.7011b03400": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_Greater50NonSplit__c__String.4b609c8ba3": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_Greater50Split__c__255.19e697d5c4": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_Greater50Split__c__String.69d8f73dd0": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_split__c__255.087bab44b7": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_split__c__String.2c287c01e4": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Is_this_a_Temporary_Amendment__c__255.296f7c6b38": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Is_this_a_Temporary_Amendment__c__String.af1841a1ae": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Is_this_Facility_LBCM__c__255.08755fc57b": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Is_this_Facility_LBCM__c__String.2cf535f1b7": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Journey__c__1300.71c778add8": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Journey__c__String.43e26dfbdb": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_LBCM_Facility_Validation__c.2f9371516d": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Limit_Indicator__c__1300.8a2df6e011": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Limit_Indicator__c__String.ef7533dd95": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Limit_Type__c__255.39c3078899": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Limit_Type__c__String.21bfc38166": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Link__c__1300.61d2aa5796": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Link__c__String.d17762a3f7": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Loan_Repayment_Profile__c__255.1efef69ecd": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Loan_Repayment_Profile__c__String.0d6937a6f5": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Max_period_for_each_FX_contract__c__255.1708a8378a": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Max_period_for_each_FX_contract__c__String.8870a3fd50": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_MoneyOutExtractionIntended__c__255.583641302b": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_MoneyOutExtractionIntended__c__String.dde58678c1": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_ODType__c__255.10a7240c92": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_ODType__c__String.99f2bb1f87": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Overdraft_Limit_Type__c__255.3faaa9002d": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Overdraft_Limit_Type__c__String.fc1e9ed103": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Overdraft_Request_Type__c__255.c37bccad07": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Overdraft_Request_Type__c__String.0bd2257ebb": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Partially_Amortising_Loan_Type__c__255.76a8fbd696": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Partially_Amortising_Loan_Type__c__String.dc5c062d31": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Pricing_Product__c__255.8a2217e69b": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Pricing_Product__c__String.37c8fea05f": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_Product_Approval_Rendering__c.2aaab996dd": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Product_Rationale__c__120000.f10ac47312": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Product_Rationale__c__String.1bf32de657": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Provide_Comparative_quote__c__255.a7b1c44f31": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Provide_Comparative_quote__c__String.80d3f9afe4": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Purpose__c__255.74a387a737": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Purpose__c__String.63090fa4b7": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Repayment_Frequency__c__255.f41061aab0": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Repayment_Frequency__c__String.ac28580a87": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_RightOfWithdrawalConfirmed__c__255.705eb4d948": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_RightOfWithdrawalConfirmed__c__String.647a9834f7": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Sector__c__255.6d7005cdad": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Sector__c__String.de36ed3b94": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Security__c__255.03e9e9294d": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Security__c__String.907cfb2b60": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Send_quote_to_client_before_sanction__c__255.deab12c9c4": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Send_quote_to_client_before_sanction__c__String.644b4d14a6": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Set_up_a_direct_debit_to_manage__c__255.bbfedc3b8d": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Set_up_a_direct_debit_to_manage__c__String.0df949dc9f": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_SetUpDisplayRatesActionProfiles__c.f1cf2a0d68": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Signatory_1__c__18.20b7323cac": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Signatory_1__c__String.39525eea71": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Signatory_2__c__18.53dde1b5d6": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Signatory_2__c__String.f89e683dbb": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Signatory_3__c__18.a71aba3797": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Signatory_3__c__String.bc80165b48": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Signatory_4__c__18.7f02ba89a8": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Signatory_4__c__String.9757d31095": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_SortCode__c__6.c79c2cb16b": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_SortCode__c__String.f076ea01e1": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Specific_1_Period_End__c__255.2b6907f373": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Specific_1_Period_End__c__String.49a3c76451": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Specific_2_Period_End__c__255.c310b01cca": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Specific_2_Period_End__c__String.60e529b83f": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Step_Frequency__c__255.71a4df4e63": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Step_Frequency__c__String.00e7830db5": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Step_Option__c__255.4cc93a868d": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Step_Option__c__String.bc2cd87a7f": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_SurroundServices__c__255.85d7771e79": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_SurroundServices__c__String.1f0ec5d76b": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_TenorRestriction__c__255.e8ed77aae6": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_TenorRestriction__c__String.3d88ba7f65": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Traded_Non_Traded__c__1300.b6f6f9221f": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Traded_Non_Traded__c__String.65d5f7f55d": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_TrancheDrawdown__c__1300.ec6dda5adc": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_TrancheDrawdown__c__String.032d9292e8": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_Utilisation_exceed_Current_Limit__c.3d9cf328ad": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Which_limits_apply_to_the_facility__c__4099.d3a5f35ebf": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Which_limits_apply_to_the_facility__c__String.867eb2fcd0": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CreatedById.d11fb360c1": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CreatedById__18.d6cd217d9a": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CreatedById__String.6e3e906913": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CreatedDate.dbafec5b47": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CurrencyIsoCode__3.514e1bdea2": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CurrencyIsoCode__String.c82a77d6e6": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_Id.700079c0d5": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_Id__18.bd20263164": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_Id__String.b862331699": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_LastModifiedById.f6fe308e76": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LastModifiedById__18.73fe24e3e9": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LastModifiedById__String.ac1c8a8340": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_LastModifiedDate.015c63dad3": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Account__c__18.f3523bdd8f": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Account__c__String.f2008777d7": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Credit_Memo__c__18.ae20738469": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Credit_Memo__c__String.11e11a2625": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Financed_Fee_Calculations__c__255.a95d463fc1": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Financed_Fee_Calculations__c__String.3c0f62357c": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_LLC_BI__Is_In_Review__c.3b8ab1b998": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_LLC_BI__isRenewal__c.5fc0febb34": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__lookupKey__c__255.f8324809fb": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__lookupKey__c__String.9154cd0148": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Product__c__255.965e41e6e2": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Product__c__String.598545d00e": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Line__c__255.8b7a7cc45e": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Line__c__String.e779fbae41": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Package__c__18.d1363648fe": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Package__c__String.0e521f7fbe": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Reference__c__18.efb9b19b47": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Reference__c__String.a4bcd4415d": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Type__c__255.6446244454": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Type__c__String.d4da33d401": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Stage__c__255.9750decb39": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Stage__c__String.ae027669f8": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Status__c__255.4e04c2e33b": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Status__c__String.258ae7caf6": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_Migration_ID__c__18.c60a17c7c5": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_Migration_ID__c__String.3c9416a982": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_Name__80.4bb2cc202f": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_Name__String.1b162520b5": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_OwnerId.94132ff092": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_OwnerId__18.7853dc00ad": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_OwnerId__String.42fd83e386": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_Primary_Source_of_Repayment__c__255.6b3a5ec25c": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_Primary_Source_of_Repayment__c__String.00e0a856c0": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_RecordTypeId__18.e628cac861": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_RecordTypeId__String.2b08146613": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_Step_Frequency__c__255.04e4865a45": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_Step_Frequency__c__String.31dc91b0cd": ["source.csp.curated.rskcsp_ds_facility_curated"], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_CCS_LBG_Entity__c__255.3d925965ae": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_CCS_LBG_Entity__c__String.3aafc7148d": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_CCS_LBG_Entity_Facility__c__1300.2b1469b9e5": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_CCS_LBG_Entity_Facility__c__String.ba0687350e": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_curated_CreatedById.2332c061a0": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_CreatedById__18.bc08cf1e7d": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_CreatedById__String.4df44e4103": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_curated_CreatedDate.1ba544bf94": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_CurrencyIsoCode__3.44912a9792": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_CurrencyIsoCode__String.6af246194a": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_curated_Id.feaa9a4621": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_Id__18.db88c41c36": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_Id__String.9a468868a0": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_curated_LastModifiedById.3e4dc4fd66": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LastModifiedById__18.0312c02789": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LastModifiedById__String.87378c329c": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_curated_LastModifiedDate.7f3d0a8080": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Automatically_Added__c.6ad3cf64fc": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Code__c__50.740cd8700c": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Code__c__String.39630dc1f3": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Collateral_Mgmt__c__18.75f2eb9782": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Collateral_Mgmt__c__String.278d2cf884": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Covenant_Mgmt__c__18.f86c7c9946": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Covenant_Mgmt__c__String.198e948801": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Loan__c__18.4a8bb1626a": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Loan__c__String.5dceaf6594": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_1__c__100.789f96ba1c": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_1__c__String.04e65b63e7": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_2__c__100.d8b3330d6a": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_2__c__String.5b09e7f6bd": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_3__c__100.37fd3a898d": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_3__c__String.42f80bbc5c": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Relationship__c__18.5aed3da610": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Relationship__c__String.7de89ba5a7": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Severity__c__50.d2ba020f91": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Severity__c__String.de2fdb8e30": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Status__c__255.1d2d623157": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Status__c__String.1b7e38f5b8": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Type__c.ae836651fc": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Type__c__255.411cc41043": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Type__c__String.b9dad0d8b9": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_Name__80.a1682ca3cf": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_Name__String.d509861d46": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_curated_OwnerId.90d12e8647": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_OwnerId__18.3b9be4090b": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_OwnerId__String.6242421658": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_RM_Mitigation_Comments__c__32768.0888494490": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_RM_Mitigation_Comments__c__String.f68bd3ff46": ["source.csp.curated.rskcsp_ds_policy_exception_curated"], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CreatedById.8f15c7a2b3": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CreatedById__18.20fbf00cf6": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CreatedById__String.53f4c129f3": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CreatedDate.f372cd98a2": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CurrencyIsoCode__3.3f7c587be4": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CurrencyIsoCode__String.21a32da4b0": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Id.aa1584fa03": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Id__18.c742ea923c": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Id__String.f020306799": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LastModifiedById.7a824f2775": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LastModifiedById__18.c8e176bb90": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LastModifiedById__String.2469e45758": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LastModifiedDate.4cfd65193a": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Comment_Required__c.c5fc52a47d": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__lookupKey__c__255.dfa56cf8ed": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__lookupKey__c__String.ddac3dce7e": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Policy_Exception_Template__c.e02b2dcdda": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Policy_Exception_Template__c__18.001f26bf21": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Policy_Exception_Template__c__String.591efa3d29": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Reason__c.bc18e88fb7": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Reason__c__255.f960b015b9": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Reason__c__String.57cf1cebad": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Name.037ae570b3": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Name__80.47a6832554": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Name__String.28877ebcc6": ["source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated"], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_template_curated_CreatedById.41f8048cdb": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_CreatedById__18.065c8d94ea": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_CreatedById__String.d7e215f31e": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_template_curated_CreatedDate.d964e9e670": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_CurrencyIsoCode__3.54267a49c6": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_CurrencyIsoCode__String.27ec77a5a6": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_template_curated_Id.74cbfe3f85": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_Id__18.c89d06ce8f": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_Id__String.fd3aee3677": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_template_curated_LastModifiedById.78c3b1472e": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LastModifiedById__18.c0346145fc": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LastModifiedById__String.47ccc8d735": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_template_curated_LastModifiedDate.accd8ea07a": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Active__c.efe1fead37": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Code__c__50.c7355d4831": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Code__c__String.73cf5ccd9c": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Description__c__32768.0852a06b86": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Description__c__String.b042471eca": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__lookupKey__c__255.5c30194a88": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__lookupKey__c__String.1a37284723": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Severities__c__4099.263d514eee": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Severities__c__String.df61996836": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Start_Date__c.63b733438e": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Type__c__255.2f574ba958": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Type__c__String.4ca4b2c1c2": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_Name__80.dac6344b3b": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_Name__String.bea41dd9c9": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_template_curated_OwnerId.2e740b69e1": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_OwnerId__18.87d00d5ff0": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_OwnerId__String.b60839b6ad": ["source.csp.curated.rskcsp_ds_policy_exception_template_curated"], "source.csp.curated.rskcsp_ds_cardholder_curated": [], "source.csp.curated.rskcsp_ds_limit_curated": [], "source.csp.curated.rskcsp_ds_entity_involvement_curated": [], "source.csp.curated.rskcsp_ds_facility_curated": [], "source.csp.curated.rskcsp_ds_policy_exception_curated": [], "source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated": [], "source.csp.curated.rskcsp_ds_policy_exception_template_curated": [], "source.csp.raw.rskcsp_ds_cardholder": [], "source.csp.raw.rskcsp_ds_limit": [], "source.csp.raw.rskcsp_ds_legal_entities": [], "source.csp.raw.rskcsp_ds_loan": [], "source.csp.staging.rskcsp_ds_cardholder_staging": [], "source.csp.staging.rskcsp_ds_limit_staging": [], "source.csp.staging.rskcsp_ds_legal_entities_staging": [], "source.csp.staging.rskcsp_ds_loan_staging": [], "source.csp.curation.rskcsp_ds_cardholder_curated": [], "source.csp.curation.rskcsp_ds_limit_curated": [], "source.csp.curation.rskcsp_ds_legal_curated": [], "source.csp.curation.rskcsp_ds_loan_curated": [], "source.csp.consumption.cardholder": [], "source.csp.consumption.loan": [], "source.csp.consumption.legal_entities": [], "source.csp.consumption.limit": []}, "child_map": {"test.csp.sampletest": [], "test.csp.cardholdertest": [], "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Email__c__80.48c668962f": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Email__c__String.4383285e09": [], "test.csp.source_not_null_curated_rskcsp_ds_cardholder_curated_CCS_Facility_ID__c.93b5c8f1c6": [], "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Facility_ID__c__18.975a514e01": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Facility_ID__c__String.d250c7f57d": [], "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_First_Name__c__255.b70ed6ec5c": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_First_Name__c__String.e0e09baba0": [], "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Is_Card_Needed__c__255.2836e217e0": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Is_Card_Needed__c__String.7f72683ffb": [], "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Last_Name__c__255.4b67642f28": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Last_Name__c__String.8cdce274c7": [], "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Level_of_Control__c__255.cf76a1ee91": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Level_of_Control__c__String.229bf943dd": [], "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Mobile_Number__c__40.371229c6c9": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Mobile_Number__c__String.981e790b85": [], "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Title__c__255.f5e3caa7fe": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Title__c__String.93d1b7980b": [], "test.csp.source_not_null_curated_rskcsp_ds_cardholder_curated_CreatedById.11104cbeb1": [], "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CreatedById__18.41a5de79d4": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CreatedById__String.75d4c9f264": [], "test.csp.source_not_null_curated_rskcsp_ds_cardholder_curated_CreatedDate.cd39601b66": [], "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CurrencyIsoCode__3.c3b3077d33": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CurrencyIsoCode__String.2b12d5d003": [], "test.csp.source_not_null_curated_rskcsp_ds_cardholder_curated_Id.8058ab6385": [], "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_Id__18.b5049735d3": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_Id__String.78a8d212e0": [], "test.csp.source_not_null_curated_rskcsp_ds_cardholder_curated_LastModifiedById.b9ad66c0fb": [], "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_LastModifiedById__18.9ae03035f1": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_LastModifiedById__String.feca5019bf": [], "test.csp.source_not_null_curated_rskcsp_ds_cardholder_curated_LastModifiedDate.6aed7f5098": [], "test.csp.source_not_null_curated_rskcsp_ds_cardholder_curated_Name.b60c864c33": [], "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_Name__80.c6237921f6": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_Name__String.0fe179ecb6": [], "test.csp.source_not_null_curated_rskcsp_ds_limit_curated_CCS_Facility__c.f96725e6fa": [], "test.csp.source_length_check_curated_rskcsp_ds_limit_curated_CCS_Facility__c__18.ed8b173071": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_CCS_Facility__c__String.12b7433887": [], "test.csp.source_length_check_curated_rskcsp_ds_limit_curated_CCS_Is_this_a_Temporary_Amendment__c__255.f76d2ae503": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_CCS_Is_this_a_Temporary_Amendment__c__String.b93ecc04f5": [], "test.csp.source_length_check_curated_rskcsp_ds_limit_curated_CCS_Tenor__c__30.2e148aff69": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_CCS_Tenor__c__String.e2ccc850bd": [], "test.csp.source_not_null_curated_rskcsp_ds_limit_curated_CreatedById.492bab4edb": [], "test.csp.source_length_check_curated_rskcsp_ds_limit_curated_CreatedById__18.9fa460032a": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_CreatedById__String.1e81e459da": [], "test.csp.source_not_null_curated_rskcsp_ds_limit_curated_CreatedDate.5e65ad90a8": [], "test.csp.source_length_check_curated_rskcsp_ds_limit_curated_CurrencyIsoCode__3.fd146ed665": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_CurrencyIsoCode__String.07c269c97a": [], "test.csp.source_not_null_curated_rskcsp_ds_limit_curated_Id.7b32a7d878": [], "test.csp.source_length_check_curated_rskcsp_ds_limit_curated_Id__18.a7c04f54f3": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_Id__String.40e8a609c7": [], "test.csp.source_not_null_curated_rskcsp_ds_limit_curated_LastModifiedById.4568f789ca": [], "test.csp.source_length_check_curated_rskcsp_ds_limit_curated_LastModifiedById__18.f8cee00a5d": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_LastModifiedById__String.12bf21e705": [], "test.csp.source_not_null_curated_rskcsp_ds_limit_curated_LastModifiedDate.7a34374111": [], "test.csp.source_not_null_curated_rskcsp_ds_limit_curated_Name.58a0a4503f": [], "test.csp.source_length_check_curated_rskcsp_ds_limit_curated_Name__80.7af9cc9356": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_Name__String.c349a2fdd3": [], "test.csp.source_not_null_curated_rskcsp_ds_entity_involvement_curated_CreatedById.0ac5b9c4a4": [], "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_CreatedById__18.c50f0954df": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_CreatedById__String.4b8c158c6e": [], "test.csp.source_not_null_curated_rskcsp_ds_entity_involvement_curated_CreatedDate.8cd3dcc5f3": [], "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_CurrencyIsoCode__3.90c3f28b19": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_CurrencyIsoCode__String.c7479241c3": [], "test.csp.source_not_null_curated_rskcsp_ds_entity_involvement_curated_Id.0c27c42eba": [], "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_Id__18.2867d4d293": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_Id__String.59b63e5fa4": [], "test.csp.source_not_null_curated_rskcsp_ds_entity_involvement_curated_LastModifiedById.4a5f99dd9b": [], "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_LastModifiedById__18.bdf1164c04": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LastModifiedById__String.21aa6a7cdb": [], "test.csp.source_not_null_curated_rskcsp_ds_entity_involvement_curated_LastModifiedDate.d9e6c8471d": [], "test.csp.source_not_null_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Account__c.4227eb8fd6": [], "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Account__c__18.5ffc385d3b": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Account__c__String.dc7b77d556": [], "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Borrower_Type__c__255.534d37fdec": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Borrower_Type__c__String.1d4a591f91": [], "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Contingent_Type__c__255.d47173ca0e": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Contingent_Type__c__String.a82415a14f": [], "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Loan__c__18.0356536f4e": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Loan__c__String.9168694324": [], "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Product_Package__c__18.f174ca6c31": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Product_Package__c__String.7d990badc0": [], "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_Migration_ID__c__18.719c3680b8": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_Migration_ID__c__String.704c7befc9": [], "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_Name__80.c9396fb10a": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_Name__String.59554e6b34": [], "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_RecordTypeId__18.f26d0fbd12": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_RecordTypeId__String.c6bd2a6caf": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_50_of_Security_LV_from_Land_Property__c__255.ffde91bc94": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_50_of_Security_LV_from_Land_Property__c__String.f18b2bce6f": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Account_a_Discounted_Account__c__255.4aa51d61c0": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Account_a_Discounted_Account__c__String.51b82174fe": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_AccountNumber__c__8.9e9161367a": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_AccountNumber__c__String.0bd878362e": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Amend_Margin__c__255.965d929c77": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Amend_Margin__c__String.a97d0ca9da": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Amend_Returned_Margin__c__255.9d035c6f76": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Amend_Returned_Margin__c__String.7170346938": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Apply_CRH__c__255.60f0e80f40": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Apply_CRH__c__String.99cf0e6410": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Apply_Tranche_Drawdown__c__255.14c48768e1": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Apply_Tranche_Drawdown__c__String.3d8ecdc48a": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Approval_Status__c__255.b9b44d0bc1": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Approval_Status__c__String.65b0ce30e4": [], "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_Borrowing_Structure_Route__c.7ac40ac21a": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_CardScheme__c__255.c27b6fff53": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_CardScheme__c__String.4d7f46a8d7": [], "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_CCA__c.86f21435af": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_CFGICleanGrowthFinanceInitiative__c__255.b815119ca4": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_CFGICleanGrowthFinanceInitiative__c__String.8fad710767": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Change_Fixed_Rate_Duration__c__255.a4da67ae6d": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Change_Fixed_Rate_Duration__c__String.5da80801f8": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Chosen_Rate__c__255.93f588a8ae": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Chosen_Rate__c__String.0c5a77656d": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Client_Choice_Rationale__c__255.49e15a64b6": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Client_Choice_Rationale__c__String.9bbf1abcc7": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Commentary_on_Pricing__c__32768.bd09d75094": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Commentary_on_Pricing__c__String.0247ec59e3": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_CRH_Monthly_or_Quarterly__c__255.900a010a7d": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_CRH_Monthly_or_Quarterly__c__String.bf24d60c77": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Customer_documentation_preference__c__255.234307f5f0": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Customer_documentation_preference__c__String.fbec828014": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_DateOfMarketLinksAgreementKnown__c__255.30de9d16d3": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_DateOfMarketLinksAgreementKnown__c__String.aa938e9e03": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_DateOfTravelLinkAgreementKnown__c__255.86f196456b": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_DateOfTravelLinkAgreementKnown__c__String.3a5e4b63ba": [], "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_DoNotTrade__c.2abd07cb78": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Duration__c__255.4a95f93f36": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Duration__c__String.2df4f9bc42": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_e_Loan_Product_Selection__c__4099.9eca70b01a": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_e_Loan_Product_Selection__c__String.d581597085": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Eligible_for_CRH__c__1300.9a011acab8": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Eligible_for_CRH__c__String.5b03a746fa": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Exception_Pricing_Request__c__255.f9c81db9ee": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Exception_Pricing_Request__c__String.e9b154f4aa": [], "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_Exclude_from_Change__c.696c2da65d": [], "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_Exclude_from_Exposure_Value__c.70a68d99cf": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Exposure_Value__c__1300.b71cf7a719": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Exposure_Value__c__String.5c743d4753": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Final_Limit_or_Change_per_Step__c__255.d199bf68ae": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Final_Limit_or_Change_per_Step__c__String.c9e5b0a7bb": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_FormFactor__c__255.bff7f1305a": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_FormFactor__c__String.33a663ad8d": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Frequency__c__255.299519926e": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Frequency__c__String.2e92dd9bbd": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Front_Book_Back_Book__c__1300.d77f2ba7da": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Front_Book_Back_Book__c__String.142378a61c": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Hard_Soft__c__1300.a59a422573": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Hard_Soft__c__String.fc57fab575": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Heritage__c__255.a718ac2091": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Heritage__c__String.0d4f83827b": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_How_much_to_pay_off_each_month__c__255.3b75a715e7": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_How_much_to_pay_off_each_month__c__String.ffb7787124": [], "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_Informed_Choice_Facility_Record__c.e084448330": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type__c__255.8df4881148": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type__c__String.10fa9e2825": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_Greater50NonSplit__c__255.7011b03400": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_Greater50NonSplit__c__String.4b609c8ba3": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_Greater50Split__c__255.19e697d5c4": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_Greater50Split__c__String.69d8f73dd0": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_split__c__255.087bab44b7": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_split__c__String.2c287c01e4": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Is_this_a_Temporary_Amendment__c__255.296f7c6b38": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Is_this_a_Temporary_Amendment__c__String.af1841a1ae": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Is_this_Facility_LBCM__c__255.08755fc57b": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Is_this_Facility_LBCM__c__String.2cf535f1b7": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Journey__c__1300.71c778add8": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Journey__c__String.43e26dfbdb": [], "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_LBCM_Facility_Validation__c.2f9371516d": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Limit_Indicator__c__1300.8a2df6e011": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Limit_Indicator__c__String.ef7533dd95": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Limit_Type__c__255.39c3078899": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Limit_Type__c__String.21bfc38166": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Link__c__1300.61d2aa5796": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Link__c__String.d17762a3f7": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Loan_Repayment_Profile__c__255.1efef69ecd": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Loan_Repayment_Profile__c__String.0d6937a6f5": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Max_period_for_each_FX_contract__c__255.1708a8378a": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Max_period_for_each_FX_contract__c__String.8870a3fd50": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_MoneyOutExtractionIntended__c__255.583641302b": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_MoneyOutExtractionIntended__c__String.dde58678c1": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_ODType__c__255.10a7240c92": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_ODType__c__String.99f2bb1f87": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Overdraft_Limit_Type__c__255.3faaa9002d": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Overdraft_Limit_Type__c__String.fc1e9ed103": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Overdraft_Request_Type__c__255.c37bccad07": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Overdraft_Request_Type__c__String.0bd2257ebb": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Partially_Amortising_Loan_Type__c__255.76a8fbd696": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Partially_Amortising_Loan_Type__c__String.dc5c062d31": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Pricing_Product__c__255.8a2217e69b": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Pricing_Product__c__String.37c8fea05f": [], "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_Product_Approval_Rendering__c.2aaab996dd": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Product_Rationale__c__120000.f10ac47312": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Product_Rationale__c__String.1bf32de657": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Provide_Comparative_quote__c__255.a7b1c44f31": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Provide_Comparative_quote__c__String.80d3f9afe4": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Purpose__c__255.74a387a737": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Purpose__c__String.63090fa4b7": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Repayment_Frequency__c__255.f41061aab0": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Repayment_Frequency__c__String.ac28580a87": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_RightOfWithdrawalConfirmed__c__255.705eb4d948": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_RightOfWithdrawalConfirmed__c__String.647a9834f7": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Sector__c__255.6d7005cdad": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Sector__c__String.de36ed3b94": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Security__c__255.03e9e9294d": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Security__c__String.907cfb2b60": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Send_quote_to_client_before_sanction__c__255.deab12c9c4": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Send_quote_to_client_before_sanction__c__String.644b4d14a6": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Set_up_a_direct_debit_to_manage__c__255.bbfedc3b8d": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Set_up_a_direct_debit_to_manage__c__String.0df949dc9f": [], "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_SetUpDisplayRatesActionProfiles__c.f1cf2a0d68": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Signatory_1__c__18.20b7323cac": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Signatory_1__c__String.39525eea71": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Signatory_2__c__18.53dde1b5d6": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Signatory_2__c__String.f89e683dbb": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Signatory_3__c__18.a71aba3797": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Signatory_3__c__String.bc80165b48": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Signatory_4__c__18.7f02ba89a8": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Signatory_4__c__String.9757d31095": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_SortCode__c__6.c79c2cb16b": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_SortCode__c__String.f076ea01e1": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Specific_1_Period_End__c__255.2b6907f373": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Specific_1_Period_End__c__String.49a3c76451": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Specific_2_Period_End__c__255.c310b01cca": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Specific_2_Period_End__c__String.60e529b83f": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Step_Frequency__c__255.71a4df4e63": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Step_Frequency__c__String.00e7830db5": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Step_Option__c__255.4cc93a868d": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Step_Option__c__String.bc2cd87a7f": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_SurroundServices__c__255.85d7771e79": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_SurroundServices__c__String.1f0ec5d76b": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_TenorRestriction__c__255.e8ed77aae6": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_TenorRestriction__c__String.3d88ba7f65": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Traded_Non_Traded__c__1300.b6f6f9221f": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Traded_Non_Traded__c__String.65d5f7f55d": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_TrancheDrawdown__c__1300.ec6dda5adc": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_TrancheDrawdown__c__String.032d9292e8": [], "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_Utilisation_exceed_Current_Limit__c.3d9cf328ad": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Which_limits_apply_to_the_facility__c__4099.d3a5f35ebf": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Which_limits_apply_to_the_facility__c__String.867eb2fcd0": [], "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CreatedById.d11fb360c1": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CreatedById__18.d6cd217d9a": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CreatedById__String.6e3e906913": [], "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CreatedDate.dbafec5b47": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CurrencyIsoCode__3.514e1bdea2": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CurrencyIsoCode__String.c82a77d6e6": [], "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_Id.700079c0d5": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_Id__18.bd20263164": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_Id__String.b862331699": [], "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_LastModifiedById.f6fe308e76": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LastModifiedById__18.73fe24e3e9": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LastModifiedById__String.ac1c8a8340": [], "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_LastModifiedDate.015c63dad3": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Account__c__18.f3523bdd8f": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Account__c__String.f2008777d7": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Credit_Memo__c__18.ae20738469": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Credit_Memo__c__String.11e11a2625": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Financed_Fee_Calculations__c__255.a95d463fc1": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Financed_Fee_Calculations__c__String.3c0f62357c": [], "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_LLC_BI__Is_In_Review__c.3b8ab1b998": [], "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_LLC_BI__isRenewal__c.5fc0febb34": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__lookupKey__c__255.f8324809fb": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__lookupKey__c__String.9154cd0148": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Product__c__255.965e41e6e2": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Product__c__String.598545d00e": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Line__c__255.8b7a7cc45e": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Line__c__String.e779fbae41": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Package__c__18.d1363648fe": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Package__c__String.0e521f7fbe": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Reference__c__18.efb9b19b47": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Reference__c__String.a4bcd4415d": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Type__c__255.6446244454": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Type__c__String.d4da33d401": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Stage__c__255.9750decb39": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Stage__c__String.ae027669f8": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Status__c__255.4e04c2e33b": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Status__c__String.258ae7caf6": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_Migration_ID__c__18.c60a17c7c5": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_Migration_ID__c__String.3c9416a982": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_Name__80.4bb2cc202f": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_Name__String.1b162520b5": [], "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_OwnerId.94132ff092": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_OwnerId__18.7853dc00ad": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_OwnerId__String.42fd83e386": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_Primary_Source_of_Repayment__c__255.6b3a5ec25c": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_Primary_Source_of_Repayment__c__String.00e0a856c0": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_RecordTypeId__18.e628cac861": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_RecordTypeId__String.2b08146613": [], "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_Step_Frequency__c__255.04e4865a45": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_Step_Frequency__c__String.31dc91b0cd": [], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_CCS_LBG_Entity__c__255.3d925965ae": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_CCS_LBG_Entity__c__String.3aafc7148d": [], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_CCS_LBG_Entity_Facility__c__1300.2b1469b9e5": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_CCS_LBG_Entity_Facility__c__String.ba0687350e": [], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_curated_CreatedById.2332c061a0": [], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_CreatedById__18.bc08cf1e7d": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_CreatedById__String.4df44e4103": [], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_curated_CreatedDate.1ba544bf94": [], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_CurrencyIsoCode__3.44912a9792": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_CurrencyIsoCode__String.6af246194a": [], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_curated_Id.feaa9a4621": [], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_Id__18.db88c41c36": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_Id__String.9a468868a0": [], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_curated_LastModifiedById.3e4dc4fd66": [], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LastModifiedById__18.0312c02789": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LastModifiedById__String.87378c329c": [], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_curated_LastModifiedDate.7f3d0a8080": [], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Automatically_Added__c.6ad3cf64fc": [], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Code__c__50.740cd8700c": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Code__c__String.39630dc1f3": [], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Collateral_Mgmt__c__18.75f2eb9782": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Collateral_Mgmt__c__String.278d2cf884": [], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Covenant_Mgmt__c__18.f86c7c9946": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Covenant_Mgmt__c__String.198e948801": [], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Loan__c__18.4a8bb1626a": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Loan__c__String.5dceaf6594": [], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_1__c__100.789f96ba1c": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_1__c__String.04e65b63e7": [], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_2__c__100.d8b3330d6a": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_2__c__String.5b09e7f6bd": [], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_3__c__100.37fd3a898d": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_3__c__String.42f80bbc5c": [], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Relationship__c__18.5aed3da610": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Relationship__c__String.7de89ba5a7": [], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Severity__c__50.d2ba020f91": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Severity__c__String.de2fdb8e30": [], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Status__c__255.1d2d623157": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Status__c__String.1b7e38f5b8": [], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Type__c.ae836651fc": [], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Type__c__255.411cc41043": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Type__c__String.b9dad0d8b9": [], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_Name__80.a1682ca3cf": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_Name__String.d509861d46": [], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_curated_OwnerId.90d12e8647": [], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_OwnerId__18.3b9be4090b": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_OwnerId__String.6242421658": [], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_RM_Mitigation_Comments__c__32768.0888494490": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_RM_Mitigation_Comments__c__String.f68bd3ff46": [], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CreatedById.8f15c7a2b3": [], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CreatedById__18.20fbf00cf6": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CreatedById__String.53f4c129f3": [], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CreatedDate.f372cd98a2": [], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CurrencyIsoCode__3.3f7c587be4": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CurrencyIsoCode__String.21a32da4b0": [], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Id.aa1584fa03": [], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Id__18.c742ea923c": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Id__String.f020306799": [], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LastModifiedById.7a824f2775": [], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LastModifiedById__18.c8e176bb90": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LastModifiedById__String.2469e45758": [], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LastModifiedDate.4cfd65193a": [], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Comment_Required__c.c5fc52a47d": [], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__lookupKey__c__255.dfa56cf8ed": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__lookupKey__c__String.ddac3dce7e": [], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Policy_Exception_Template__c.e02b2dcdda": [], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Policy_Exception_Template__c__18.001f26bf21": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Policy_Exception_Template__c__String.591efa3d29": [], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Reason__c.bc18e88fb7": [], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Reason__c__255.f960b015b9": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Reason__c__String.57cf1cebad": [], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Name.037ae570b3": [], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Name__80.47a6832554": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Name__String.28877ebcc6": [], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_template_curated_CreatedById.41f8048cdb": [], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_CreatedById__18.065c8d94ea": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_CreatedById__String.d7e215f31e": [], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_template_curated_CreatedDate.d964e9e670": [], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_CurrencyIsoCode__3.54267a49c6": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_CurrencyIsoCode__String.27ec77a5a6": [], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_template_curated_Id.74cbfe3f85": [], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_Id__18.c89d06ce8f": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_Id__String.fd3aee3677": [], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_template_curated_LastModifiedById.78c3b1472e": [], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LastModifiedById__18.c0346145fc": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LastModifiedById__String.47ccc8d735": [], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_template_curated_LastModifiedDate.accd8ea07a": [], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Active__c.efe1fead37": [], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Code__c__50.c7355d4831": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Code__c__String.73cf5ccd9c": [], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Description__c__32768.0852a06b86": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Description__c__String.b042471eca": [], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__lookupKey__c__255.5c30194a88": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__lookupKey__c__String.1a37284723": [], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Severities__c__4099.263d514eee": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Severities__c__String.df61996836": [], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Start_Date__c.63b733438e": [], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Type__c__255.2f574ba958": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Type__c__String.4ca4b2c1c2": [], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_Name__80.dac6344b3b": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_Name__String.bea41dd9c9": [], "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_template_curated_OwnerId.2e740b69e1": [], "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_OwnerId__18.87d00d5ff0": [], "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_OwnerId__String.b60839b6ad": [], "source.csp.curated.rskcsp_ds_cardholder_curated": ["test.csp.cardholdertest", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Email__c__String.4383285e09", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Facility_ID__c__String.d250c7f57d", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_First_Name__c__String.e0e09baba0", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Is_Card_Needed__c__String.7f72683ffb", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Last_Name__c__String.8cdce274c7", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Level_of_Control__c__String.229bf943dd", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Mobile_Number__c__String.981e790b85", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CCS_Title__c__String.93d1b7980b", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CreatedById__String.75d4c9f264", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_CurrencyIsoCode__String.2b12d5d003", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_Id__String.78a8d212e0", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_LastModifiedById__String.feca5019bf", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_cardholder_curated_Name__String.0fe179ecb6", "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Email__c__80.48c668962f", "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Facility_ID__c__18.975a514e01", "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_First_Name__c__255.b70ed6ec5c", "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Is_Card_Needed__c__255.2836e217e0", "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Last_Name__c__255.4b67642f28", "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Level_of_Control__c__255.cf76a1ee91", "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Mobile_Number__c__40.371229c6c9", "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CCS_Title__c__255.f5e3caa7fe", "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CreatedById__18.41a5de79d4", "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_CurrencyIsoCode__3.c3b3077d33", "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_Id__18.b5049735d3", "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_LastModifiedById__18.9ae03035f1", "test.csp.source_length_check_curated_rskcsp_ds_cardholder_curated_Name__80.c6237921f6", "test.csp.source_not_null_curated_rskcsp_ds_cardholder_curated_CCS_Facility_ID__c.93b5c8f1c6", "test.csp.source_not_null_curated_rskcsp_ds_cardholder_curated_CreatedById.11104cbeb1", "test.csp.source_not_null_curated_rskcsp_ds_cardholder_curated_CreatedDate.cd39601b66", "test.csp.source_not_null_curated_rskcsp_ds_cardholder_curated_Id.8058ab6385", "test.csp.source_not_null_curated_rskcsp_ds_cardholder_curated_LastModifiedById.b9ad66c0fb", "test.csp.source_not_null_curated_rskcsp_ds_cardholder_curated_LastModifiedDate.6aed7f5098", "test.csp.source_not_null_curated_rskcsp_ds_cardholder_curated_Name.b60c864c33"], "source.csp.curated.rskcsp_ds_limit_curated": ["test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_CCS_Facility__c__String.12b7433887", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_CCS_Is_this_a_Temporary_Amendment__c__String.b93ecc04f5", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_CCS_Tenor__c__String.e2ccc850bd", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_CreatedById__String.1e81e459da", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_CurrencyIsoCode__String.07c269c97a", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_Id__String.40e8a609c7", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_LastModifiedById__String.12bf21e705", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_limit_curated_Name__String.c349a2fdd3", "test.csp.source_length_check_curated_rskcsp_ds_limit_curated_CCS_Facility__c__18.ed8b173071", "test.csp.source_length_check_curated_rskcsp_ds_limit_curated_CCS_Is_this_a_Temporary_Amendment__c__255.f76d2ae503", "test.csp.source_length_check_curated_rskcsp_ds_limit_curated_CCS_Tenor__c__30.2e148aff69", "test.csp.source_length_check_curated_rskcsp_ds_limit_curated_CreatedById__18.9fa460032a", "test.csp.source_length_check_curated_rskcsp_ds_limit_curated_CurrencyIsoCode__3.fd146ed665", "test.csp.source_length_check_curated_rskcsp_ds_limit_curated_Id__18.a7c04f54f3", "test.csp.source_length_check_curated_rskcsp_ds_limit_curated_LastModifiedById__18.f8cee00a5d", "test.csp.source_length_check_curated_rskcsp_ds_limit_curated_Name__80.7af9cc9356", "test.csp.source_not_null_curated_rskcsp_ds_limit_curated_CCS_Facility__c.f96725e6fa", "test.csp.source_not_null_curated_rskcsp_ds_limit_curated_CreatedById.492bab4edb", "test.csp.source_not_null_curated_rskcsp_ds_limit_curated_CreatedDate.5e65ad90a8", "test.csp.source_not_null_curated_rskcsp_ds_limit_curated_Id.7b32a7d878", "test.csp.source_not_null_curated_rskcsp_ds_limit_curated_LastModifiedById.4568f789ca", "test.csp.source_not_null_curated_rskcsp_ds_limit_curated_LastModifiedDate.7a34374111", "test.csp.source_not_null_curated_rskcsp_ds_limit_curated_Name.58a0a4503f"], "source.csp.curated.rskcsp_ds_entity_involvement_curated": ["test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_CreatedById__String.4b8c158c6e", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_CurrencyIsoCode__String.c7479241c3", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_Id__String.59b63e5fa4", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Account__c__String.dc7b77d556", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Borrower_Type__c__String.1d4a591f91", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Contingent_Type__c__String.a82415a14f", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Loan__c__String.9168694324", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Product_Package__c__String.7d990badc0", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_LastModifiedById__String.21aa6a7cdb", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_Migration_ID__c__String.704c7befc9", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_Name__String.59554e6b34", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_entity_involvement_curated_RecordTypeId__String.c6bd2a6caf", "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_CreatedById__18.c50f0954df", "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_CurrencyIsoCode__3.90c3f28b19", "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_Id__18.2867d4d293", "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Account__c__18.5ffc385d3b", "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Borrower_Type__c__255.534d37fdec", "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Contingent_Type__c__255.d47173ca0e", "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Loan__c__18.0356536f4e", "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Product_Package__c__18.f174ca6c31", "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_LastModifiedById__18.bdf1164c04", "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_Migration_ID__c__18.719c3680b8", "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_Name__80.c9396fb10a", "test.csp.source_length_check_curated_rskcsp_ds_entity_involvement_curated_RecordTypeId__18.f26d0fbd12", "test.csp.source_not_null_curated_rskcsp_ds_entity_involvement_curated_CreatedById.0ac5b9c4a4", "test.csp.source_not_null_curated_rskcsp_ds_entity_involvement_curated_CreatedDate.8cd3dcc5f3", "test.csp.source_not_null_curated_rskcsp_ds_entity_involvement_curated_Id.0c27c42eba", "test.csp.source_not_null_curated_rskcsp_ds_entity_involvement_curated_LLC_BI__Account__c.4227eb8fd6", "test.csp.source_not_null_curated_rskcsp_ds_entity_involvement_curated_LastModifiedById.4a5f99dd9b", "test.csp.source_not_null_curated_rskcsp_ds_entity_involvement_curated_LastModifiedDate.d9e6c8471d"], "source.csp.curated.rskcsp_ds_facility_curated": ["test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_50_of_Security_LV_from_Land_Property__c__String.f18b2bce6f", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_AccountNumber__c__String.0bd878362e", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Account_a_Discounted_Account__c__String.51b82174fe", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Amend_Margin__c__String.a97d0ca9da", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Amend_Returned_Margin__c__String.7170346938", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Apply_CRH__c__String.99cf0e6410", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Apply_Tranche_Drawdown__c__String.3d8ecdc48a", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Approval_Status__c__String.65b0ce30e4", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_CFGICleanGrowthFinanceInitiative__c__String.8fad710767", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_CRH_Monthly_or_Quarterly__c__String.bf24d60c77", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_CardScheme__c__String.4d7f46a8d7", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Change_Fixed_Rate_Duration__c__String.5da80801f8", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Chosen_Rate__c__String.0c5a77656d", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Client_Choice_Rationale__c__String.9bbf1abcc7", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Commentary_on_Pricing__c__String.0247ec59e3", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Customer_documentation_preference__c__String.fbec828014", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_DateOfMarketLinksAgreementKnown__c__String.aa938e9e03", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_DateOfTravelLinkAgreementKnown__c__String.3a5e4b63ba", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Duration__c__String.2df4f9bc42", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Eligible_for_CRH__c__String.5b03a746fa", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Exception_Pricing_Request__c__String.e9b154f4aa", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Exposure_Value__c__String.5c743d4753", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Final_Limit_or_Change_per_Step__c__String.c9e5b0a7bb", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_FormFactor__c__String.33a663ad8d", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Frequency__c__String.2e92dd9bbd", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Front_Book_Back_Book__c__String.142378a61c", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Hard_Soft__c__String.fc57fab575", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Heritage__c__String.0d4f83827b", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_How_much_to_pay_off_each_month__c__String.ffb7787124", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_Greater50NonSplit__c__String.4b609c8ba3", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_Greater50Split__c__String.69d8f73dd0", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type__c__String.10fa9e2825", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_split__c__String.2c287c01e4", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Is_this_Facility_LBCM__c__String.2cf535f1b7", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Is_this_a_Temporary_Amendment__c__String.af1841a1ae", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Journey__c__String.43e26dfbdb", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Limit_Indicator__c__String.ef7533dd95", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Limit_Type__c__String.21bfc38166", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Link__c__String.d17762a3f7", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Loan_Repayment_Profile__c__String.0d6937a6f5", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Max_period_for_each_FX_contract__c__String.8870a3fd50", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_MoneyOutExtractionIntended__c__String.dde58678c1", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_ODType__c__String.99f2bb1f87", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Overdraft_Limit_Type__c__String.fc1e9ed103", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Overdraft_Request_Type__c__String.0bd2257ebb", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Partially_Amortising_Loan_Type__c__String.dc5c062d31", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Pricing_Product__c__String.37c8fea05f", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Product_Rationale__c__String.1bf32de657", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Provide_Comparative_quote__c__String.80d3f9afe4", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Purpose__c__String.63090fa4b7", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Repayment_Frequency__c__String.ac28580a87", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_RightOfWithdrawalConfirmed__c__String.647a9834f7", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Sector__c__String.de36ed3b94", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Security__c__String.907cfb2b60", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Send_quote_to_client_before_sanction__c__String.644b4d14a6", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Set_up_a_direct_debit_to_manage__c__String.0df949dc9f", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Signatory_1__c__String.39525eea71", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Signatory_2__c__String.f89e683dbb", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Signatory_3__c__String.bc80165b48", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Signatory_4__c__String.9757d31095", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_SortCode__c__String.f076ea01e1", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Specific_1_Period_End__c__String.49a3c76451", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Specific_2_Period_End__c__String.60e529b83f", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Step_Frequency__c__String.00e7830db5", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Step_Option__c__String.bc2cd87a7f", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_SurroundServices__c__String.1f0ec5d76b", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_TenorRestriction__c__String.3d88ba7f65", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Traded_Non_Traded__c__String.65d5f7f55d", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_TrancheDrawdown__c__String.032d9292e8", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_Which_limits_apply_to_the_facility__c__String.867eb2fcd0", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CCS_e_Loan_Product_Selection__c__String.d581597085", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CreatedById__String.6e3e906913", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_CurrencyIsoCode__String.c82a77d6e6", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_Id__String.b862331699", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Account__c__String.f2008777d7", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Credit_Memo__c__String.11e11a2625", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Financed_Fee_Calculations__c__String.3c0f62357c", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Line__c__String.e779fbae41", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Package__c__String.0e521f7fbe", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Reference__c__String.a4bcd4415d", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Type__c__String.d4da33d401", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Product__c__String.598545d00e", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Stage__c__String.ae027669f8", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__Status__c__String.258ae7caf6", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LLC_BI__lookupKey__c__String.9154cd0148", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_LastModifiedById__String.ac1c8a8340", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_Migration_ID__c__String.3c9416a982", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_Name__String.1b162520b5", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_OwnerId__String.42fd83e386", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_Primary_Source_of_Repayment__c__String.00e0a856c0", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_RecordTypeId__String.2b08146613", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_facility_curated_Step_Frequency__c__String.31dc91b0cd", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_50_of_Security_LV_from_Land_Property__c__255.ffde91bc94", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_AccountNumber__c__8.9e9161367a", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Account_a_Discounted_Account__c__255.4aa51d61c0", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Amend_Margin__c__255.965d929c77", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Amend_Returned_Margin__c__255.9d035c6f76", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Apply_CRH__c__255.60f0e80f40", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Apply_Tranche_Drawdown__c__255.14c48768e1", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Approval_Status__c__255.b9b44d0bc1", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_CFGICleanGrowthFinanceInitiative__c__255.b815119ca4", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_CRH_Monthly_or_Quarterly__c__255.900a010a7d", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_CardScheme__c__255.c27b6fff53", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Change_Fixed_Rate_Duration__c__255.a4da67ae6d", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Chosen_Rate__c__255.93f588a8ae", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Client_Choice_Rationale__c__255.49e15a64b6", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Commentary_on_Pricing__c__32768.bd09d75094", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Customer_documentation_preference__c__255.234307f5f0", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_DateOfMarketLinksAgreementKnown__c__255.30de9d16d3", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_DateOfTravelLinkAgreementKnown__c__255.86f196456b", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Duration__c__255.4a95f93f36", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Eligible_for_CRH__c__1300.9a011acab8", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Exception_Pricing_Request__c__255.f9c81db9ee", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Exposure_Value__c__1300.b71cf7a719", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Final_Limit_or_Change_per_Step__c__255.d199bf68ae", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_FormFactor__c__255.bff7f1305a", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Frequency__c__255.299519926e", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Front_Book_Back_Book__c__1300.d77f2ba7da", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Hard_Soft__c__1300.a59a422573", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Heritage__c__255.a718ac2091", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_How_much_to_pay_off_each_month__c__255.3b75a715e7", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_Greater50NonSplit__c__255.7011b03400", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_Greater50Split__c__255.19e697d5c4", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type__c__255.8df4881148", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Interest_Rate_Type_split__c__255.087bab44b7", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Is_this_Facility_LBCM__c__255.08755fc57b", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Is_this_a_Temporary_Amendment__c__255.296f7c6b38", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Journey__c__1300.71c778add8", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Limit_Indicator__c__1300.8a2df6e011", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Limit_Type__c__255.39c3078899", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Link__c__1300.61d2aa5796", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Loan_Repayment_Profile__c__255.1efef69ecd", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Max_period_for_each_FX_contract__c__255.1708a8378a", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_MoneyOutExtractionIntended__c__255.583641302b", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_ODType__c__255.10a7240c92", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Overdraft_Limit_Type__c__255.3faaa9002d", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Overdraft_Request_Type__c__255.c37bccad07", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Partially_Amortising_Loan_Type__c__255.76a8fbd696", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Pricing_Product__c__255.8a2217e69b", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Product_Rationale__c__120000.f10ac47312", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Provide_Comparative_quote__c__255.a7b1c44f31", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Purpose__c__255.74a387a737", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Repayment_Frequency__c__255.f41061aab0", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_RightOfWithdrawalConfirmed__c__255.705eb4d948", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Sector__c__255.6d7005cdad", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Security__c__255.03e9e9294d", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Send_quote_to_client_before_sanction__c__255.deab12c9c4", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Set_up_a_direct_debit_to_manage__c__255.bbfedc3b8d", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Signatory_1__c__18.20b7323cac", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Signatory_2__c__18.53dde1b5d6", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Signatory_3__c__18.a71aba3797", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Signatory_4__c__18.7f02ba89a8", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_SortCode__c__6.c79c2cb16b", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Specific_1_Period_End__c__255.2b6907f373", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Specific_2_Period_End__c__255.c310b01cca", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Step_Frequency__c__255.71a4df4e63", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Step_Option__c__255.4cc93a868d", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_SurroundServices__c__255.85d7771e79", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_TenorRestriction__c__255.e8ed77aae6", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Traded_Non_Traded__c__1300.b6f6f9221f", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_TrancheDrawdown__c__1300.ec6dda5adc", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_Which_limits_apply_to_the_facility__c__4099.d3a5f35ebf", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CCS_e_Loan_Product_Selection__c__4099.9eca70b01a", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CreatedById__18.d6cd217d9a", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_CurrencyIsoCode__3.514e1bdea2", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_Id__18.bd20263164", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Account__c__18.f3523bdd8f", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Credit_Memo__c__18.ae20738469", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Financed_Fee_Calculations__c__255.a95d463fc1", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Line__c__255.8b7a7cc45e", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Package__c__18.d1363648fe", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Reference__c__18.efb9b19b47", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Product_Type__c__255.6446244454", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Product__c__255.965e41e6e2", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Stage__c__255.9750decb39", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__Status__c__255.4e04c2e33b", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LLC_BI__lookupKey__c__255.f8324809fb", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_LastModifiedById__18.73fe24e3e9", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_Migration_ID__c__18.c60a17c7c5", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_Name__80.4bb2cc202f", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_OwnerId__18.7853dc00ad", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_Primary_Source_of_Repayment__c__255.6b3a5ec25c", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_RecordTypeId__18.e628cac861", "test.csp.source_length_check_curated_rskcsp_ds_facility_curated_Step_Frequency__c__255.04e4865a45", "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_Borrowing_Structure_Route__c.7ac40ac21a", "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_CCA__c.86f21435af", "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_DoNotTrade__c.2abd07cb78", "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_Exclude_from_Change__c.696c2da65d", "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_Exclude_from_Exposure_Value__c.70a68d99cf", "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_Informed_Choice_Facility_Record__c.e084448330", "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_LBCM_Facility_Validation__c.2f9371516d", "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_Product_Approval_Rendering__c.2aaab996dd", "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_SetUpDisplayRatesActionProfiles__c.f1cf2a0d68", "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CCS_Utilisation_exceed_Current_Limit__c.3d9cf328ad", "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CreatedById.d11fb360c1", "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_CreatedDate.dbafec5b47", "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_Id.700079c0d5", "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_LLC_BI__Is_In_Review__c.3b8ab1b998", "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_LLC_BI__isRenewal__c.5fc0febb34", "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_LastModifiedById.f6fe308e76", "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_LastModifiedDate.015c63dad3", "test.csp.source_not_null_curated_rskcsp_ds_facility_curated_OwnerId.94132ff092"], "source.csp.curated.rskcsp_ds_policy_exception_curated": ["test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_CCS_LBG_Entity_Facility__c__String.ba0687350e", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_CCS_LBG_Entity__c__String.3aafc7148d", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_CreatedById__String.4df44e4103", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_CurrencyIsoCode__String.6af246194a", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_Id__String.9a468868a0", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Code__c__String.39630dc1f3", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Collateral_Mgmt__c__String.278d2cf884", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Covenant_Mgmt__c__String.198e948801", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Loan__c__String.5dceaf6594", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_1__c__String.04e65b63e7", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_2__c__String.5b09e7f6bd", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_3__c__String.42f80bbc5c", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Relationship__c__String.7de89ba5a7", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Severity__c__String.de2fdb8e30", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Status__c__String.1b7e38f5b8", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Type__c__String.b9dad0d8b9", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_LastModifiedById__String.87378c329c", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_Name__String.d509861d46", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_OwnerId__String.6242421658", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_curated_RM_Mitigation_Comments__c__String.f68bd3ff46", "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_CCS_LBG_Entity_Facility__c__1300.2b1469b9e5", "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_CCS_LBG_Entity__c__255.3d925965ae", "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_CreatedById__18.bc08cf1e7d", "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_CurrencyIsoCode__3.44912a9792", "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_Id__18.db88c41c36", "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Code__c__50.740cd8700c", "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Collateral_Mgmt__c__18.75f2eb9782", "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Covenant_Mgmt__c__18.f86c7c9946", "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Loan__c__18.4a8bb1626a", "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_1__c__100.789f96ba1c", "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_2__c__100.d8b3330d6a", "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Mitigation_Reason_3__c__100.37fd3a898d", "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Relationship__c__18.5aed3da610", "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Severity__c__50.d2ba020f91", "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Status__c__255.1d2d623157", "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Type__c__255.411cc41043", "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_LastModifiedById__18.0312c02789", "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_Name__80.a1682ca3cf", "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_OwnerId__18.3b9be4090b", "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_curated_RM_Mitigation_Comments__c__32768.0888494490", "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_curated_CreatedById.2332c061a0", "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_curated_CreatedDate.1ba544bf94", "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_curated_Id.feaa9a4621", "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Automatically_Added__c.6ad3cf64fc", "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_curated_LLC_BI__Type__c.ae836651fc", "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_curated_LastModifiedById.3e4dc4fd66", "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_curated_LastModifiedDate.7f3d0a8080", "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_curated_OwnerId.90d12e8647"], "source.csp.curated.rskcsp_ds_policy_exception_mitigation_reason_curated": ["test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CreatedById__String.53f4c129f3", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CurrencyIsoCode__String.21a32da4b0", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Id__String.f020306799", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Policy_Exception_Template__c__String.591efa3d29", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Reason__c__String.57cf1cebad", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__lookupKey__c__String.ddac3dce7e", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LastModifiedById__String.2469e45758", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Name__String.28877ebcc6", "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CreatedById__18.20fbf00cf6", "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CurrencyIsoCode__3.3f7c587be4", "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Id__18.c742ea923c", "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Policy_Exception_Template__c__18.001f26bf21", "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Reason__c__255.f960b015b9", "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__lookupKey__c__255.dfa56cf8ed", "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LastModifiedById__18.c8e176bb90", "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Name__80.47a6832554", "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CreatedById.8f15c7a2b3", "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_CreatedDate.f372cd98a2", "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Id.aa1584fa03", "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Comment_Required__c.c5fc52a47d", "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Policy_Exception_Template__c.e02b2dcdda", "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LLC_BI__Reason__c.bc18e88fb7", "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LastModifiedById.7a824f2775", "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_LastModifiedDate.4cfd65193a", "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_mitigation_reason_curated_Name.037ae570b3"], "source.csp.curated.rskcsp_ds_policy_exception_template_curated": ["test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_CreatedById__String.d7e215f31e", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_CurrencyIsoCode__String.27ec77a5a6", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_Id__String.fd3aee3677", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Code__c__String.73cf5ccd9c", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Description__c__String.b042471eca", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Severities__c__String.df61996836", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Type__c__String.4ca4b2c1c2", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__lookupKey__c__String.1a37284723", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_LastModifiedById__String.47ccc8d735", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_Name__String.bea41dd9c9", "test.csp.dbt_expectations_source_expect_column_values_to_be_of_type_curated_rskcsp_ds_policy_exception_template_curated_OwnerId__String.b60839b6ad", "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_CreatedById__18.065c8d94ea", "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_CurrencyIsoCode__3.54267a49c6", "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_Id__18.c89d06ce8f", "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Code__c__50.c7355d4831", "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Description__c__32768.0852a06b86", "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Severities__c__4099.263d514eee", "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Type__c__255.2f574ba958", "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__lookupKey__c__255.5c30194a88", "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_LastModifiedById__18.c0346145fc", "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_Name__80.dac6344b3b", "test.csp.source_length_check_curated_rskcsp_ds_policy_exception_template_curated_OwnerId__18.87d00d5ff0", "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_template_curated_CreatedById.41f8048cdb", "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_template_curated_CreatedDate.d964e9e670", "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_template_curated_Id.74cbfe3f85", "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Active__c.efe1fead37", "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_template_curated_LLC_BI__Start_Date__c.63b733438e", "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_template_curated_LastModifiedById.78c3b1472e", "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_template_curated_LastModifiedDate.accd8ea07a", "test.csp.source_not_null_curated_rskcsp_ds_policy_exception_template_curated_OwnerId.2e740b69e1"], "source.csp.raw.rskcsp_ds_cardholder": [], "source.csp.raw.rskcsp_ds_limit": [], "source.csp.raw.rskcsp_ds_legal_entities": [], "source.csp.raw.rskcsp_ds_loan": [], "source.csp.staging.rskcsp_ds_cardholder_staging": [], "source.csp.staging.rskcsp_ds_limit_staging": [], "source.csp.staging.rskcsp_ds_legal_entities_staging": [], "source.csp.staging.rskcsp_ds_loan_staging": [], "source.csp.curation.rskcsp_ds_cardholder_curated": [], "source.csp.curation.rskcsp_ds_limit_curated": [], "source.csp.curation.rskcsp_ds_legal_curated": [], "source.csp.curation.rskcsp_ds_loan_curated": [], "source.csp.consumption.cardholder": [], "source.csp.consumption.loan": [], "source.csp.consumption.legal_entities": [], "source.csp.consumption.limit": []}}